{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":1,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/钢铁侠.png","path":"img/钢铁侠.png","modified":1,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"2dd938099e2bf1f41821818b6f3c4fff3360696a","modified":1489573170000},{"_id":"source/CNAME","hash":"0270443ed67dc8e1fce106940898ec073eee0eed","modified":1481129659000},{"_id":"themes/next/.DS_Store","hash":"b4031ca706d0e344ab2ab686d4decf4474d9e602","modified":1489548089000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1489546686000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1489546686000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1489546686000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1489546686000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1489546686000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1489546686000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1489546686000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1489546686000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1489546686000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1489546686000},{"_id":"themes/next/_config.yml","hash":"e153b89bd89a8adea8446e84203fbbf9ea375128","modified":1489647844000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1489546686000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1489546686000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1489546686000},{"_id":"themes/next/gulpfile.coffee","hash":"933e6d29eb82522cff0df209d52b935e91b1111c","modified":1489546686000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1489546686000},{"_id":"source/404/index.md","hash":"7837dc1421ecc359cac771025ec461ee231e1526","modified":1481131621000},{"_id":"source/about/index.md","hash":"b67638a79da357226378ac29b87d50ebde677db2","modified":1467634220000},{"_id":"source/_posts/Mac环境使用DigitalOcean租用VPS，部署Docker容器-SS搭建专属梯子.md","hash":"c34cce1ef46b2b8498cb1245db18d9bc871f47dc","modified":1489640164000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1488358329000},{"_id":"source/_posts/Cocoapods进阶-屡试不爽，安装Cocoapods1.1.0最新心得及问题总结!.md","hash":"2d266a91bd7a404dad21a6ef9a060bc75748f12f","modified":1489640066000},{"_id":"source/_posts/Mac搭建Hexo博客.md","hash":"dff8050857c14933e987243e71250780d959af95","modified":1489640394000},{"_id":"source/_posts/Node之package-json文件解析.md","hash":"51adaf754da86998dd4c4efb7eda71426dbeb727","modified":1489640179000},{"_id":"source/_posts/Mac环境更改shell自定义终端-oh-my-zsh安装及配置.md","hash":"b4ae75c3d4661f398270d1332394eae8913b8e66","modified":1489640148000},{"_id":"source/_posts/ReactNative学习-MAC集成环境.md","hash":"4996442dff85cb8fd9b66faa509a4fe838024add","modified":1489640221000},{"_id":"source/_posts/ReactNative学习-state与props介绍与比较.md","hash":"d609519ecc1e6285a72c3e9cc104f48d757a6a1e","modified":1489640237000},{"_id":"source/_posts/ReactNative学习-什么是iflux.md","hash":"b87e44d7634ee08e940e2ba7161b596bae766a3f","modified":1489640205000},{"_id":"source/_posts/ReactNative学习-React-js全家桶.md","hash":"63ce71131e934c2537115f90fb6f15db58db80a8","modified":1489640229000},{"_id":"source/_posts/Swift学习-Swift3-0已出坑，适配iOS10-项目迁移Swift3-0问题总结。.md","hash":"5fa4dee69af2ac498e790043ce71563a5f85c41c","modified":1489640289000},{"_id":"source/_posts/WKWebView替换UIWebView.md","hash":"3a3da37c433ea81052b96c6fa31118e3f5d1a51f","modified":1489640272000},{"_id":"source/_posts/免费开发者证书真机调试App ID失效问题解决方案总结.md","hash":"8a3a7dbadbacb67e088d5694be55b928cb522577","modified":1489640147000},{"_id":"source/_posts/发布博客.md","hash":"3c4e4a72eae8b585165cda2409cd18eb1e360e8f","modified":1489640409000},{"_id":"source/img/avatar.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1466977180000},{"_id":"source/img/favicon.ico","hash":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1466977180000},{"_id":"source/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1466977180000},{"_id":"source/categories/index.md","hash":"95f99ee7266e4d735134a9525eb6b0f5355689d7","modified":1489630667000},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1489573002000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1489546686000},{"_id":"source/tags/index.md","hash":"2853c638fe67884da37902d3729683cd86731aac","modified":1489630604000},{"_id":"themes/next/.git/config","hash":"a33539305f85ea695520b496f67659d5751acff8","modified":1489546686000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1489546614000},{"_id":"themes/next/.git/index","hash":"77c8e6c6c489dfbff85a64aa4b80dd06ea79d816","modified":1489546686000},{"_id":"themes/next/.git/packed-refs","hash":"e4a5396a91cb6d9ce1f1b34fbc769b4c81089f4d","modified":1489546686000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1489546686000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1489546686000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1489546686000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1489546686000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1489546686000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1489546686000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1489546686000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1489546686000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1489546686000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1489546686000},{"_id":"themes/next/languages/ru.yml","hash":"7462c3017dae88e5f80ff308db0b95baf960c83f","modified":1489546686000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1489546686000},{"_id":"themes/next/layout/.DS_Store","hash":"da7a022cd34d1eee0b45cea3d3f0a359b467736f","modified":1489646429000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1489546686000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1489546686000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1489546686000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"695d41ac233a44dcd2b90e73b3339e8fd280754a","modified":1489646597000},{"_id":"themes/next/layout/archive.swig","hash":"32ba50b15d8387ddd9103917a46d32ce04661ef7","modified":1489647264000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1489546686000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1489546686000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1489546686000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1489546686000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1489546686000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1489546686000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1489546686000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1489546686000},{"_id":"themes/next/scripts/.DS_Store","hash":"2ecca5dd0b7260968763bb4ded8695e5748d3d0e","modified":1489631899000},{"_id":"themes/next/source/.DS_Store","hash":"e2c3c05cf7934a2fedbe36472a1aa1c1fc189998","modified":1489631576000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1489546686000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1489546686000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1489546686000},{"_id":"source/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1466977180000},{"_id":"source/img/钢铁侠.png","hash":"dcddae0148624ca1cf287fa72f8e8ed554ef55df","modified":1465113170000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489546686000},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1466977180000},{"_id":"source/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1466977180000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1489546614000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1489546614000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1489546614000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1489546614000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1489546614000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1489546614000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1489546614000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1489546614000},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1489546614000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1489546614000},{"_id":"themes/next/.git/logs/HEAD","hash":"052b5b44a99d9ad6a2b655825b605a6c08987096","modified":1489546686000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1489546686000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1489546686000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1489546686000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1489546686000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1489546686000},{"_id":"themes/next/layout/_macro/post.swig","hash":"cf0e192eedaa1a1bbbab9e7a7e6979c4e24cda31","modified":1489546686000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1489546686000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1489546686000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1489546686000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1489546686000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1489546686000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1489546686000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1489546686000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1489546686000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1489546686000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1489546686000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1489546686000},{"_id":"themes/next/layout/_scripts/.DS_Store","hash":"499d9587043d09cd6ba79b01f972a0a284b0c9f3","modified":1489631907000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1489546686000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1489546686000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1489546686000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1489546686000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1489546686000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"ee94460fc8675a73fe4c6b7d29b58ae040e1a24c","modified":1489546686000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1489546686000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1489546686000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1489546686000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1489546686000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1489546686000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1489546686000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1489546686000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1489546686000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1489546686000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1489546686000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1489546686000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1489546686000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1489546686000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489546686000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489546686000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1489546686000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1489546686000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1489546686000},{"_id":"source/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1466977180000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489546686000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489546686000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489546686000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489546686000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489546686000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489546686000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489546686000},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1466977180000},{"_id":"themes/next/.git/refs/heads/master","hash":"70f4eebfe33f3d460e8f4f4708edf0ab1f9a66b6","modified":1489546686000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1489546686000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1489546686000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1489546686000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1489546686000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1489546686000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1489546686000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1489546686000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1489546686000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1489546686000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1489546686000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1489546686000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1489546686000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/exturl.swig","hash":"8e20dd2078d7dfdf4a5a6daa142bb94d002300f5","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1489546686000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1489546686000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1489546686000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1489546686000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1489546686000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1489546686000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1489546686000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1489546686000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1489546686000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1489546686000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1489546686000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1489546686000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1489546686000},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1489546686000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1489546686000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1489546686000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1489546686000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1489546686000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1489546686000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1489546686000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1489546686000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1489546686000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1489546686000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1489546686000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1489546686000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1489546686000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1489546686000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1489546686000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1489546686000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1489546686000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1489546686000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1489546686000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1489546686000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1489546686000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1489546686000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1489546686000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1489546686000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1489546686000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1489546686000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1489546686000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"052b5b44a99d9ad6a2b655825b605a6c08987096","modified":1489546686000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1489546686000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1489546686000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1489546686000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1489546686000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1489546686000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1489546686000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1489546686000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"1eb34b9c1f6d541605ff23333eeb133e1c4daf17","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1489546686000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1489546686000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1489546686000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1489546686000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1489546686000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1489546686000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1489546686000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1489546686000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1489546686000},{"_id":"source/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1466977180000},{"_id":"themes/next/.git/objects/pack/pack-77e6b4c3a1dae84faee2fba297ed405930e724cd.idx","hash":"3f33e0af2defa770b74a4fde87f011489a846aff","modified":1489546686000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1489546686000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1489546686000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1489546686000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"052b5b44a99d9ad6a2b655825b605a6c08987096","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1489546686000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1489546686000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489546686000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1489546686000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1489546686000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1489546686000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1489546686000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1489546686000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1489546686000},{"_id":"themes/next/.git/objects/pack/pack-77e6b4c3a1dae84faee2fba297ed405930e724cd.pack","hash":"392796e75ecfebaaf59f85e17846b05e42690fe3","modified":1489546686000},{"_id":"public/404.html","hash":"085e0c42e014cc3d937cd97a2064cf397c1832a9","modified":1489647852781},{"_id":"public/about/index.html","hash":"1fd5499e0a879d8b32e28242a38978fbe7f476be","modified":1489647852781},{"_id":"public/categories/index.html","hash":"6b64f01a3f37ffea652bdc9fc4ca4833f45d92e9","modified":1489647852782},{"_id":"public/tags/index.html","hash":"e08a93623bd890a6b275287c61a05552378ea84f","modified":1489647852782},{"_id":"public/2017/03/03/ReactNative学习-什么是iflux/index.html","hash":"a85fd397c789a9e42c6e85f2a1ab44f700fc3e63","modified":1489647852782},{"_id":"public/2017/02/28/ReactNative学习-state与props介绍与比较/index.html","hash":"315eed98a8f045977685ddb466e34c705830b4bf","modified":1489647852782},{"_id":"public/2017/02/25/Mac环境更改shell自定义终端-oh-my-zsh安装及配置/index.html","hash":"a9a2d1ba8d7ac17231859ad9476b5e20933af7a8","modified":1489647852782},{"_id":"public/2017/02/21/Mac环境使用DigitalOcean租用VPS，部署Docker容器-SS搭建专属梯子/index.html","hash":"9b5cc7063da20a74a164d753e6e31e20fb19f170","modified":1489647852782},{"_id":"public/2017/02/13/Node之package-json文件解析/index.html","hash":"22fc9556fc03a483d72a9d4913e1f38160c84deb","modified":1489647852783},{"_id":"public/2016/12/24/ReactNative学习-React-js全家桶/index.html","hash":"c57de1b2e9ef1cec4431fc9277f29a390c3d0010","modified":1489647852783},{"_id":"public/2016/12/08/ReactNative学习-MAC集成环境/index.html","hash":"35cea2a59191210cb3b1222dd19768e1eeef396f","modified":1489647852783},{"_id":"public/2016/10/15/Swift学习-Swift3-0已出坑，适配iOS10-项目迁移Swift3-0问题总结。/index.html","hash":"2162a7cccd19cda7de53c6c0bf9e559e88e6d7d5","modified":1489647852783},{"_id":"public/2016/10/10/Cocoapods进阶-屡试不爽，安装Cocoapods1.1.0最新心得及问题总结!/index.html","hash":"6facd7c4fa28acef76544000dd61cadbe6974405","modified":1489647852783},{"_id":"public/2016/07/01/WKWebView替换UIWebView/index.html","hash":"2432dd97c29a59bd6abb737f92c13ffd339a286a","modified":1489647852783},{"_id":"public/2016/06/01/Mac搭建Hexo博客/index.html","hash":"3961ae81e88c4032a49b588c229e16ad39055f1a","modified":1489647852783},{"_id":"public/2016/05/08/发布博客/index.html","hash":"b3d76253e608568a472e124e77e8ec5dc4c89ad6","modified":1489647852783},{"_id":"public/2016/04/29/免费开发者证书真机调试App ID失效问题解决方案总结/index.html","hash":"6c33e788bbc32933e59bdc65e054733f6462281f","modified":1489647852784},{"_id":"public/categories/Mac/index.html","hash":"6f5f84b1eebcbd95fd45ea862e5f7b5edc79116c","modified":1489647852784},{"_id":"public/categories/Cocoapods/index.html","hash":"790814e6bf35f7055d05e0939c51675ff63f1070","modified":1489647852784},{"_id":"public/categories/Node/index.html","hash":"6060a1ba9a62d79b2458e5016f5aad3170727374","modified":1489647852784},{"_id":"public/categories/ReactNative/index.html","hash":"c659b8f9a192e222c1e8a5bb7a4383ec12d58d16","modified":1489647852784},{"_id":"public/categories/iOS/index.html","hash":"df73b67103662c68db90c6e2688e25b0d748cf99","modified":1489647852784},{"_id":"public/categories/Xcode/index.html","hash":"ccaec56e341d2b980e294c6001b2a3bc896f89d0","modified":1489647852784},{"_id":"public/index.html","hash":"2cce59acdaa6a5a718c33b0cc3cb612ac486a408","modified":1489647852784},{"_id":"public/page/2/index.html","hash":"4aeec179d40009a0386b93bc4c0db5afe9e0abc2","modified":1489647852784},{"_id":"public/archives/index.html","hash":"7d0effe892582e78ed7ae57de0d283fc19465333","modified":1489647852784},{"_id":"public/archives/page/2/index.html","hash":"550df4d40cc3063008e257442016a37689802a0d","modified":1489647852784},{"_id":"public/archives/2016/index.html","hash":"06118a78557b002064e85bbcf2b9a0a27614c7aa","modified":1489647852784},{"_id":"public/archives/2016/04/index.html","hash":"8f2b81831902dd0f6767438f30f080d022837429","modified":1489647852784},{"_id":"public/archives/2016/05/index.html","hash":"42c879c20f2310c02841c4136200f21a730876c6","modified":1489647852785},{"_id":"public/archives/2016/06/index.html","hash":"25078f5b5300b7dcc13ab24da1f5d881f6072a87","modified":1489647852785},{"_id":"public/archives/2016/07/index.html","hash":"0dd3ae45adaf5f40bd5f1e10d24dbf5fdde44f76","modified":1489647852785},{"_id":"public/archives/2016/10/index.html","hash":"0999d8c1a3544dff7e0b0f02210b882af4d12f49","modified":1489647852785},{"_id":"public/archives/2016/12/index.html","hash":"63b678be8d7c69ae9038969b5cf30d28c951fc42","modified":1489647852785},{"_id":"public/archives/2017/index.html","hash":"8c11e3264647d21e1ff03b43323e9f8e5566847d","modified":1489647852785},{"_id":"public/archives/2017/02/index.html","hash":"ae1ceaa8a13a90a0aa18d8396c664f0f561c2e0a","modified":1489647852785},{"_id":"public/archives/2017/03/index.html","hash":"967ac50bcb13d237837ad75507763b0552df9f20","modified":1489647852785},{"_id":"public/tags/Mac/index.html","hash":"7af8b8d0fb2004c5af4ff9060299842581df1489","modified":1489647852785},{"_id":"public/tags/进阶/index.html","hash":"0c8203a5fb3e5df030faf547641a13654eb832d1","modified":1489647852785},{"_id":"public/tags/Cocoapods/index.html","hash":"42c38dc684ed299c350848910c27a312ef1fb0a8","modified":1489647852785},{"_id":"public/tags/Node/index.html","hash":"998939f60d00e9692d523931e0fd1ae9907ebade","modified":1489647852785},{"_id":"public/tags/JavaScript/index.html","hash":"e666b39bb2e4b7f5d023b5f8ad360f41c562a343","modified":1489647852785},{"_id":"public/tags/React-Native/index.html","hash":"af9b172835c6d9ee6cf8bbb0a3f01d30608a5a7b","modified":1489647852785},{"_id":"public/tags/ReactNative/index.html","hash":"c30d85b665c0235f72943d5692c0ed0a7ebab725","modified":1489647852785},{"_id":"public/tags/React/index.html","hash":"0104623dc511e23b8425fc949d1e0c1bc92128bb","modified":1489647852785},{"_id":"public/tags/Swift/index.html","hash":"2d44ff7623ddb6a60275f836f4580a006d5b90d8","modified":1489647852785},{"_id":"public/categories/Hexo/index.html","hash":"eed4093d249787f11a15deb3f3b8602b98036f25","modified":1489647852785},{"_id":"public/tags/iOS/index.html","hash":"fd87626ccd6ad8b92064fe5e0607cd852250373b","modified":1489647852785},{"_id":"public/tags/随笔/index.html","hash":"9c66e37e5c67a5475e51d6e792486fd11f70bd31","modified":1489647852785},{"_id":"public/tags/Xcode/index.html","hash":"e7961a4d139f9668625421469526079591d0744f","modified":1489647852786},{"_id":"public/tags/Hexo/index.html","hash":"4b94d44daa3dd7e5cd1bb803a4573982b4962dc0","modified":1489647852786},{"_id":"public/CNAME","hash":"0270443ed67dc8e1fce106940898ec073eee0eed","modified":1489647852905},{"_id":"public/img/avatar.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1489647852905},{"_id":"public/img/favicon.ico","hash":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1489647852905},{"_id":"public/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1489647852905},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1489647852905},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1489647852905},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1489647852906},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1489647852906},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1489647852907},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1489647852907},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1489647852907},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1489647852907},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1489647852907},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489647852907},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489647852907},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1489647852907},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1489647852907},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1489647852907},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1489647852908},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1489647852908},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489647852908},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489647852908},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489647852908},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489647852908},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489647852908},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489647852908},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1489647852908},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489647852908},{"_id":"public/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1489647855155},{"_id":"public/img/钢铁侠.png","hash":"dcddae0148624ca1cf287fa72f8e8ed554ef55df","modified":1489647855157},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1489647855221},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1489647855221},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1489647855231},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1489647855231},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1489647855231},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1489647855231},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1489647855231},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1489647855231},{"_id":"public/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1489647855231},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1489647855231},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1489647855231},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1489647855231},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1489647855231},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1489647855231},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1489647855231},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1489647855231},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1489647855231},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1489647855231},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1489647855231},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1489647855231},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1489647855232},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1489647855232},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1489647855232},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1489647855232},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1489647855232},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1489647855232},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1489647855232},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1489647855232},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489647855232},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1489647855232},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1489647855232},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489647855232},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1489647855232},{"_id":"public/css/main.css","hash":"c95cae1ff985e86e4fe8b044b6d40d59c7601af0","modified":1489647855232},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1489647855232},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1489647855232},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1489647855232},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1489647855232},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1489647855232},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1489647855232},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1489647855232},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1489647855232},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1489647855232},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1489647855232},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1489647855232},{"_id":"public/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1489647855232},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1489647855233},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1489647855233},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1489647855233},{"_id":"public/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1489647855240},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1489647855244},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1489647855258},{"_id":"public/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1489647855261}],"Category":[{"name":"Mac","_id":"cj0c1v88q0005ksfyr2g3ubhm"},{"name":"Cocoapods","_id":"cj0c1v892000cksfyu6mbi15q"},{"name":"Hexo","_id":"cj0c1v898000hksfy07qr6ud7"},{"name":"Node","_id":"cj0c1v89d000pksfym2y42kk0"},{"name":"ReactNative","_id":"cj0c1v89p000uksfytib0tqti"},{"name":"iOS","_id":"cj0c1v8a3001eksfy0g09vzww"},{"name":"Xcode","_id":"cj0c1v8a9001oksfys80isnu4"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","comments":0,"fancybox":false,"noDate":"true","_content":"\n<style type=\"text/css\">\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.search2 {\n\t\theight: 2.2em;\n\t\tfont-size: 1em;\n\t\twidth: 50%;\n\t\tmargin: auto 24%;\n\t\tcolor: #727272;\n\t\topacity: .6;\n\t\tborder: 2px solid lightgray;\n\t}\n\t.search2:hover {\n\t\topacity: 1;\n\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n\t\t};\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n</style>\n\n***\n\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=300 height=360 src=\"http://music.163.com/outchain/player?type=0&id=414624452&auto=1&height=430\"></iframe>\n</div>\n\n","source":"404/index.md","raw":"title: 404 Not Found：该页无法显示\ncomments: false\npermalink: /404\nfancybox: false\nnoDate: \"true\"\n---\n\n<style type=\"text/css\">\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.search2 {\n\t\theight: 2.2em;\n\t\tfont-size: 1em;\n\t\twidth: 50%;\n\t\tmargin: auto 24%;\n\t\tcolor: #727272;\n\t\topacity: .6;\n\t\tborder: 2px solid lightgray;\n\t}\n\t.search2:hover {\n\t\topacity: 1;\n\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n\t\t};\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n</style>\n\n***\n\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\">\n以下是博主喜欢的一些歌曲，可以听听，稍作休息~\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=300 height=360 src=\"http://music.163.com/outchain/player?type=0&id=414624452&auto=1&height=430\"></iframe>\n</div>\n\n","date":"2016-12-07T17:27:02.000Z","updated":"2016-12-07T17:27:01.000Z","path":"/404.html","layout":"page","_id":"cj0c1v8860000ksfyc1iausxk","content":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n</style>\n\n<hr>\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息~<br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"300\" height=\"360\" src=\"http://music.163.com/outchain/player?type=0&id=414624452&auto=1&height=430\"></iframe><br></div>\n\n","excerpt":"","more":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n</style>\n\n<hr>\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息~<br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=300 height=360 src=\"http://music.163.com/outchain/player?type=0&id=414624452&auto=1&height=430\"></iframe><br></div>\n\n"},{"layout":"post","slug":"about","title":"About Me","_content":"<style type=\"text/css\">\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.player {\n\t\ttext-align: center;\n\t\tmargin: .5em auto 0;\n\t}\n\t.player br {\n\t\tdisplay: none;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n\t#ds-recent-visitors {\n\t\tpadding: 0;\n\t}\n\t#ds-recent-visitors div,#ds-recent-visitors div a{\n\t\tdisplay: inline-block;\n\t}\n\t#ds-recent-visitors div img {\n\t\tdisplay: inline-block !important;\n\t\twidth: 56px !important;\n\t\theight: 56px !important;\n\t\tborder-radius: 50%;\n\t\tborder: 1px solid #ddd;\n\t\tpadding: 2px;\n\t}\n\t.article-entry img:first-child {\n\t\tdisplay: block;\n\t}\n\t.article-entry span {\n\t\tfont-family: Arial;\n\t}\n</style>\n　　90后，上过大学，也当过兵，人生无悔了。热爱生活，对生活有着无限的遐想，也爱运动，爱旅行，同时也爱折腾，有一颗不安分的心，喜欢挑战新事物。当自己明确了真正所热衷的事，喜欢并找到了与之匹配的职业，内心从此不再迷茫，不再彷徨。\n　　　　\n<p style=\"text-align: right;\"><span>——</span>  路 </p>\n\n\n<br>\n\n\n\n\n\n\n\n\n\n","source":"about/index.md","raw":"layout: post\nslug: \"about\"\ntitle: About Me \n---\n<style type=\"text/css\">\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.player {\n\t\ttext-align: center;\n\t\tmargin: .5em auto 0;\n\t}\n\t.player br {\n\t\tdisplay: none;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n\t#ds-recent-visitors {\n\t\tpadding: 0;\n\t}\n\t#ds-recent-visitors div,#ds-recent-visitors div a{\n\t\tdisplay: inline-block;\n\t}\n\t#ds-recent-visitors div img {\n\t\tdisplay: inline-block !important;\n\t\twidth: 56px !important;\n\t\theight: 56px !important;\n\t\tborder-radius: 50%;\n\t\tborder: 1px solid #ddd;\n\t\tpadding: 2px;\n\t}\n\t.article-entry img:first-child {\n\t\tdisplay: block;\n\t}\n\t.article-entry span {\n\t\tfont-family: Arial;\n\t}\n</style>\n　　90后，上过大学，也当过兵，人生无悔了。热爱生活，对生活有着无限的遐想，也爱运动，爱旅行，同时也爱折腾，有一颗不安分的心，喜欢挑战新事物。当自己明确了真正所热衷的事，喜欢并找到了与之匹配的职业，内心从此不再迷茫，不再彷徨。\n　　　　\n<p style=\"text-align: right;\"><span>——</span>  路 </p>\n\n\n<br>\n\n\n\n\n\n\n\n\n\n","date":"2016-12-11T14:22:27.000Z","updated":"2016-07-04T12:10:20.000Z","path":"about/index.html","comments":1,"_id":"cj0c1v88e0002ksfy6dfwltv0","content":"<p><style type=\"text/css\"><br>    strong a {<br>        color: #747474;<br>    }<br>    .player {<br>        text-align: center;<br>        margin: .5em auto 0;<br>    }<br>    .player br {<br>        display: none;<br>    }<br>    .sign {<br>        text-align: right;<br>        font-style: italic;<br>    }</p>\n<pre><code>#ds-recent-visitors {\n    padding: 0;\n}\n#ds-recent-visitors div,#ds-recent-visitors div a{\n    display: inline-block;\n}\n#ds-recent-visitors div img {\n    display: inline-block !important;\n    width: 56px !important;\n    height: 56px !important;\n    border-radius: 50%;\n    border: 1px solid #ddd;\n    padding: 2px;\n}\n.article-entry img:first-child {\n    display: block;\n}\n.article-entry span {\n    font-family: Arial;\n}\n</code></pre><p></style><br>　　90后，上过大学，也当过兵，人生无悔了。热爱生活，对生活有着无限的遐想，也爱运动，爱旅行，同时也爱折腾，有一颗不安分的心，喜欢挑战新事物。当自己明确了真正所热衷的事，喜欢并找到了与之匹配的职业，内心从此不再迷茫，不再彷徨。\n　　　　</p>\n<p style=\"text-align: right;\"><span>——</span>  路 </p>\n\n\n<p><br></p>\n","excerpt":"","more":"<p><style type=\"text/css\"><br>    strong a {<br>        color: #747474;<br>    }<br>    .player {<br>        text-align: center;<br>        margin: .5em auto 0;<br>    }<br>    .player br {<br>        display: none;<br>    }<br>    .sign {<br>        text-align: right;<br>        font-style: italic;<br>    }</p>\n<pre><code>#ds-recent-visitors {\n    padding: 0;\n}\n#ds-recent-visitors div,#ds-recent-visitors div a{\n    display: inline-block;\n}\n#ds-recent-visitors div img {\n    display: inline-block !important;\n    width: 56px !important;\n    height: 56px !important;\n    border-radius: 50%;\n    border: 1px solid #ddd;\n    padding: 2px;\n}\n.article-entry img:first-child {\n    display: block;\n}\n.article-entry span {\n    font-family: Arial;\n}\n</code></pre><p></style><br>　　90后，上过大学，也当过兵，人生无悔了。热爱生活，对生活有着无限的遐想，也爱运动，爱旅行，同时也爱折腾，有一颗不安分的心，喜欢挑战新事物。当自己明确了真正所热衷的事，喜欢并找到了与之匹配的职业，内心从此不再迷茫，不再彷徨。\n　　　　</p>\n<p style=\"text-align: right;\"><span>——</span>  路 </p>\n\n\n<p><br></p>\n"},{"title":"分类","date":"2017-03-15T10:19:15.000Z","type":"categories","comments":0,"_content":"\n\n","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-15 18:19:15\ntype: \"categories\"\ncomments: false\n---\n\n\n","updated":"2017-03-16T02:17:47.000Z","path":"categories/index.html","layout":"page","_id":"cj0c1v88s0006ksfyif97575u","content":"","excerpt":"","more":""},{"layout":"tags","title":"标签","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","type":"tags","comments":0,"_content":"\n\n","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: 标签\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\ntype: \"tags\"\ncomments: false\n---\n\n\n","date":"2017-03-16T02:16:44.000Z","updated":"2017-03-16T02:16:44.000Z","path":"tags/index.html","_id":"cj0c1v88u0008ksfyr0cubuwt","content":"","excerpt":"","more":""}],"Post":[{"title":"Mac环境使用DigitalOcean租用VPS，部署Docker容器+SS搭建专属梯子","date":"2017-02-21T13:52:55.000Z","_content":"> 技术在于折腾。\n\n\n一、DigitalOcean官网注册\nhttps://cloud.digitalocean.com/\nps：注册费用$5，现在还送$10，一共$15,如果选用最便宜的服务器，可以使用3个月。\n![DigitalOcean官网](http://upload-images.jianshu.io/upload_images/1666327-c528d190dab09ee3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n二、创建虚拟服务器\n\n![创建虚拟服务器](http://upload-images.jianshu.io/upload_images/1666327-e4559747abf846b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n三、选择服务器\n* 系统默认是乌班图，喜欢CoreOS、CentOS可以自行选择\n* 价钱是每月的使用费以及设备的配置，如果平时上网话，5刀的足以\n* 线路使用纽约、旧金山都可以，建议使用旧金山的\n![选择服务器、使用金额及线路](http://upload-images.jianshu.io/upload_images/1666327-ea46899a01e5a007.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n四、选择连接方式，建议使用ssh连接(安全)\n\n![选择设置ssh](http://upload-images.jianshu.io/upload_images/1666327-579a658a82cf16f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![配置ssh](http://upload-images.jianshu.io/upload_images/1666327-d8cf08dd3ed44f8a.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nps：关于配置ssh可以在settings里面找到。\n* 生成ssh，可以参考github官方生成文档：https://help.github.com/articles/connecting-to-github-with-ssh/\n* 查看ssh,可以通过查找文件输入 *~/.ssh*的方式\n具体查看公钥\n```\ncat ~/.ssh/id_rsa.pub \n```\n![查看ssh](http://upload-images.jianshu.io/upload_images/1666327-ad7c75321bc57179.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n* 再把查看的公钥粘贴至对话框\n\n![粘贴ssh](http://upload-images.jianshu.io/upload_images/1666327-faa39f8b0a849441.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n四、连接服务器\n![虚拟服务器IP](http://upload-images.jianshu.io/upload_images/1666327-d50805f02617e517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 连接服务器，生成的IP地址\n\n```\nssh root@xxx.xxx.xxx.xxx\n```\n\n![连接服务器](http://upload-images.jianshu.io/upload_images/1666327-804ba850fb461acc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n* 部署docker容器\n\n```\napt install docker.io\n```\n\n* 拉取shadowsocks 仓库\n\n```\ndocker pull oddrationale/docker-shadowsocks\n```\n\n* 设置仓库的端口、密码、及加密方式\nps：\nxxxxxx 是你要设置的密码\n1984 是你的端口号\n```\ndocker run -d -p 1984:1984 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 1984 -k xxxxxx -m aes-256-cfb\n```\n* 查看docker 列表\nps：如果出现up就表明部署成功\n\n```\ndocker ps\n```\n\n![看到docker容器的列表](http://upload-images.jianshu.io/upload_images/1666327-f5b68806ffe2040d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n五、下载ss客户端（shadowsocks），并添加。\nGitHub官方提供下载dmg：\nhttps://github.com/shadowsocks/shadowsocks-iOS/releases\n\n![shadowsocks下载](http://upload-images.jianshu.io/upload_images/1666327-a926bcfd857363fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 安装后配置服务器，打开服务器设置，并添加服务器。\n![添加服务器](http://upload-images.jianshu.io/upload_images/1666327-d24a0c10167502ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n* 把创建的服务器Ip、端口号及创建的加密方式密码填入即可\nps：\n默认端口号填写的*1984*\n加密方式选择*aes-256-cfb*\n![设定服务器](http://upload-images.jianshu.io/upload_images/1666327-a5d24645b774e6fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n","source":"_posts/Mac环境使用DigitalOcean租用VPS，部署Docker容器-SS搭建专属梯子.md","raw":"---\ntitle: Mac环境使用DigitalOcean租用VPS，部署Docker容器+SS搭建专属梯子\ndate: 2017-02-21 21:52:55\ncategories:\n    - Mac\ntags:\n    - Mac\n    - 进阶\n---\n> 技术在于折腾。\n\n\n一、DigitalOcean官网注册\nhttps://cloud.digitalocean.com/\nps：注册费用$5，现在还送$10，一共$15,如果选用最便宜的服务器，可以使用3个月。\n![DigitalOcean官网](http://upload-images.jianshu.io/upload_images/1666327-c528d190dab09ee3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n二、创建虚拟服务器\n\n![创建虚拟服务器](http://upload-images.jianshu.io/upload_images/1666327-e4559747abf846b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n三、选择服务器\n* 系统默认是乌班图，喜欢CoreOS、CentOS可以自行选择\n* 价钱是每月的使用费以及设备的配置，如果平时上网话，5刀的足以\n* 线路使用纽约、旧金山都可以，建议使用旧金山的\n![选择服务器、使用金额及线路](http://upload-images.jianshu.io/upload_images/1666327-ea46899a01e5a007.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n四、选择连接方式，建议使用ssh连接(安全)\n\n![选择设置ssh](http://upload-images.jianshu.io/upload_images/1666327-579a658a82cf16f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![配置ssh](http://upload-images.jianshu.io/upload_images/1666327-d8cf08dd3ed44f8a.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nps：关于配置ssh可以在settings里面找到。\n* 生成ssh，可以参考github官方生成文档：https://help.github.com/articles/connecting-to-github-with-ssh/\n* 查看ssh,可以通过查找文件输入 *~/.ssh*的方式\n具体查看公钥\n```\ncat ~/.ssh/id_rsa.pub \n```\n![查看ssh](http://upload-images.jianshu.io/upload_images/1666327-ad7c75321bc57179.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n* 再把查看的公钥粘贴至对话框\n\n![粘贴ssh](http://upload-images.jianshu.io/upload_images/1666327-faa39f8b0a849441.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n四、连接服务器\n![虚拟服务器IP](http://upload-images.jianshu.io/upload_images/1666327-d50805f02617e517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 连接服务器，生成的IP地址\n\n```\nssh root@xxx.xxx.xxx.xxx\n```\n\n![连接服务器](http://upload-images.jianshu.io/upload_images/1666327-804ba850fb461acc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n* 部署docker容器\n\n```\napt install docker.io\n```\n\n* 拉取shadowsocks 仓库\n\n```\ndocker pull oddrationale/docker-shadowsocks\n```\n\n* 设置仓库的端口、密码、及加密方式\nps：\nxxxxxx 是你要设置的密码\n1984 是你的端口号\n```\ndocker run -d -p 1984:1984 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 1984 -k xxxxxx -m aes-256-cfb\n```\n* 查看docker 列表\nps：如果出现up就表明部署成功\n\n```\ndocker ps\n```\n\n![看到docker容器的列表](http://upload-images.jianshu.io/upload_images/1666327-f5b68806ffe2040d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n五、下载ss客户端（shadowsocks），并添加。\nGitHub官方提供下载dmg：\nhttps://github.com/shadowsocks/shadowsocks-iOS/releases\n\n![shadowsocks下载](http://upload-images.jianshu.io/upload_images/1666327-a926bcfd857363fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 安装后配置服务器，打开服务器设置，并添加服务器。\n![添加服务器](http://upload-images.jianshu.io/upload_images/1666327-d24a0c10167502ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n* 把创建的服务器Ip、端口号及创建的加密方式密码填入即可\nps：\n默认端口号填写的*1984*\n加密方式选择*aes-256-cfb*\n![设定服务器](http://upload-images.jianshu.io/upload_images/1666327-a5d24645b774e6fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n","slug":"Mac环境使用DigitalOcean租用VPS，部署Docker容器-SS搭建专属梯子","published":1,"updated":"2017-03-16T04:56:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0c1v8890001ksfy3xdi5uqh","content":"<blockquote>\n<p>技术在于折腾。</p>\n</blockquote>\n<p>一、DigitalOcean官网注册<br><a href=\"https://cloud.digitalocean.com/\" target=\"_blank\" rel=\"external\">https://cloud.digitalocean.com/</a><br>ps：注册费用$5，现在还送$10，一共$15,如果选用最便宜的服务器，可以使用3个月。<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-c528d190dab09ee3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"DigitalOcean官网\"><br>二、创建虚拟服务器</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-e4559747abf846b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建虚拟服务器\"></p>\n<p>三、选择服务器</p>\n<ul>\n<li>系统默认是乌班图，喜欢CoreOS、CentOS可以自行选择</li>\n<li>价钱是每月的使用费以及设备的配置，如果平时上网话，5刀的足以</li>\n<li>线路使用纽约、旧金山都可以，建议使用旧金山的<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-ea46899a01e5a007.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择服务器、使用金额及线路\"><br>四、选择连接方式，建议使用ssh连接(安全)</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-579a658a82cf16f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择设置ssh\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-d8cf08dd3ed44f8a.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"配置ssh\"><br>ps：关于配置ssh可以在settings里面找到。</p>\n<ul>\n<li>生成ssh，可以参考github官方生成文档：<a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\" target=\"_blank\" rel=\"external\">https://help.github.com/articles/connecting-to-github-with-ssh/</a></li>\n<li>查看ssh,可以通过查找文件输入 <em>~/.ssh</em>的方式<br>具体查看公钥<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-ad7c75321bc57179.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看ssh\"></p>\n<ul>\n<li>再把查看的公钥粘贴至对话框</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-faa39f8b0a849441.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"粘贴ssh\"></p>\n<p>四、连接服务器<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-d50805f02617e517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"虚拟服务器IP\"></p>\n<ul>\n<li>连接服务器，生成的IP地址</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh root@xxx.xxx.xxx.xxx</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-804ba850fb461acc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"连接服务器\"></p>\n<ul>\n<li>部署docker容器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt install docker.io</div></pre></td></tr></table></figure>\n<ul>\n<li>拉取shadowsocks 仓库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull oddrationale/docker-shadowsocks</div></pre></td></tr></table></figure>\n<ul>\n<li><p>设置仓库的端口、密码、及加密方式<br>ps：<br>xxxxxx 是你要设置的密码<br>1984 是你的端口号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -d -p 1984:1984 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 1984 -k xxxxxx -m aes-256-cfb</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看docker 列表<br>ps：如果出现up就表明部署成功</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker ps</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-f5b68806ffe2040d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"看到docker容器的列表\"><br>五、下载ss客户端（shadowsocks），并添加。<br>GitHub官方提供下载dmg：<br><a href=\"https://github.com/shadowsocks/shadowsocks-iOS/releases\" target=\"_blank\" rel=\"external\">https://github.com/shadowsocks/shadowsocks-iOS/releases</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-a926bcfd857363fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"shadowsocks下载\"></p>\n<ul>\n<li>安装后配置服务器，打开服务器设置，并添加服务器。<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-d24a0c10167502ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加服务器\"></li>\n<li>把创建的服务器Ip、端口号及创建的加密方式密码填入即可<br>ps：<br>默认端口号填写的<em>1984</em><br>加密方式选择<em>aes-256-cfb</em><br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-a5d24645b774e6fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设定服务器\"></li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>技术在于折腾。</p>\n</blockquote>\n<p>一、DigitalOcean官网注册<br><a href=\"https://cloud.digitalocean.com/\">https://cloud.digitalocean.com/</a><br>ps：注册费用$5，现在还送$10，一共$15,如果选用最便宜的服务器，可以使用3个月。<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-c528d190dab09ee3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"DigitalOcean官网\"><br>二、创建虚拟服务器</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-e4559747abf846b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建虚拟服务器\"></p>\n<p>三、选择服务器</p>\n<ul>\n<li>系统默认是乌班图，喜欢CoreOS、CentOS可以自行选择</li>\n<li>价钱是每月的使用费以及设备的配置，如果平时上网话，5刀的足以</li>\n<li>线路使用纽约、旧金山都可以，建议使用旧金山的<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-ea46899a01e5a007.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择服务器、使用金额及线路\"><br>四、选择连接方式，建议使用ssh连接(安全)</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-579a658a82cf16f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择设置ssh\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-d8cf08dd3ed44f8a.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"配置ssh\"><br>ps：关于配置ssh可以在settings里面找到。</p>\n<ul>\n<li>生成ssh，可以参考github官方生成文档：<a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\">https://help.github.com/articles/connecting-to-github-with-ssh/</a></li>\n<li>查看ssh,可以通过查找文件输入 <em>~/.ssh</em>的方式<br>具体查看公钥<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-ad7c75321bc57179.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看ssh\"></p>\n<ul>\n<li>再把查看的公钥粘贴至对话框</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-faa39f8b0a849441.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"粘贴ssh\"></p>\n<p>四、连接服务器<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-d50805f02617e517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"虚拟服务器IP\"></p>\n<ul>\n<li>连接服务器，生成的IP地址</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh root@xxx.xxx.xxx.xxx</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-804ba850fb461acc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"连接服务器\"></p>\n<ul>\n<li>部署docker容器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt install docker.io</div></pre></td></tr></table></figure>\n<ul>\n<li>拉取shadowsocks 仓库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull oddrationale/docker-shadowsocks</div></pre></td></tr></table></figure>\n<ul>\n<li><p>设置仓库的端口、密码、及加密方式<br>ps：<br>xxxxxx 是你要设置的密码<br>1984 是你的端口号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -d -p 1984:1984 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 1984 -k xxxxxx -m aes-256-cfb</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看docker 列表<br>ps：如果出现up就表明部署成功</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker ps</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-f5b68806ffe2040d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"看到docker容器的列表\"><br>五、下载ss客户端（shadowsocks），并添加。<br>GitHub官方提供下载dmg：<br><a href=\"https://github.com/shadowsocks/shadowsocks-iOS/releases\">https://github.com/shadowsocks/shadowsocks-iOS/releases</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-a926bcfd857363fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"shadowsocks下载\"></p>\n<ul>\n<li>安装后配置服务器，打开服务器设置，并添加服务器。<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-d24a0c10167502ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加服务器\"></li>\n<li>把创建的服务器Ip、端口号及创建的加密方式密码填入即可<br>ps：<br>默认端口号填写的<em>1984</em><br>加密方式选择<em>aes-256-cfb</em><br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-a5d24645b774e6fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设定服务器\"></li>\n</ul>\n"},{"title":"Cocoapods进阶-屡试不爽，安装Cocoapods1.1.0最新心得及问题总结","date":"2016-10-10T10:20:25.000Z","_content":"\n>安装淘宝源就直接跳过,安装十余次,分享下最近安装cocoapods的经验,仅仅提醒ruby版本问题之后的操作.如果还有不懂地方可以下方评论,会及时回答.\n```\nError installing cocoapods:\n\tactivesupport requires Ruby version >= 2.2.2.\n```\n\n### 1.安装ruby \n##### 1>安装 RVM \nRVM: Ruby Version Manager, Ruby的版本管理器，包括Ruby的版本管理和Gem库管理(gemset)\n```\ncurl -L get.rvm.io | bash -s stable\n```\n##### 2>安装home-brew(切记先安装home-brew,再安装ruby!!)\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n![Homebrew](http://upload-images.jianshu.io/upload_images/1666327-6909f2a40a341691.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n[home-brew地址:](http://brew.sh)<--\n\n如果出现重复安装home-brew,不要怕.\n\n![重复安装home-brew](http://upload-images.jianshu.io/upload_images/1666327-775c733738fa3fdc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n会给你提示命令.\nIt appears Homebrew is already installed. If your intent is to reinstall you\nshould do the following before running this installer again:\n```\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\"\n```\n\n##### 3>再安装ruby版本(最新版本2.3.0)\n```\nrvm install 2.3.0\n```\n出现情况:\n1.安装不通过的话可以进行手动安装.\n![手动安装](http://upload-images.jianshu.io/upload_images/1666327-45656448ed643a15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>Installing requirements for osx.\nUpdating system.....\nInstalling required packages: autoconf, automake, libtool, pkg-config, libyaml, readline, libksba, openssl|\n........\nError running 'requirements_osx_brew_libs_install autoconf automake libtool pkg-config libyaml readline libksba openssl',\nshowing last 15 lines of /Users/MTKJ/.rvm/log/1469285314_ruby-2.3.0/package_install_autoconf_automake_libtool_pkg-config_libyaml_readline_libksba_openssl.log\n\n```\nbrew install autoconf\nbrew install automake\nbrew install lib tool\nbrew install apple-gcc42\nbrew install libyaml\nbrew install libxslt\nbrew install libksba\nbrew install openssl\n```\n\n2 . Error running '__rvm_make -j 1' 错误\n\n![running '__rvm_make -j 1'](http://upload-images.jianshu.io/upload_images/1666327-4fa021187046f2d3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>ruby-2.3.0 - #extracting ruby-2.3.0 to /Users/xxxx/.rvm/src/ruby-2.3.0...-\nruby-2.3.0 - #configuring......................................................|\nruby-2.3.0 - #post-configuration.\nruby-2.3.0 - #compiling...........\nError running '__rvm_make -j 1',\nshowing last 15 lines of /Users/xxxx/.rvm/log/1476689284_ruby-2.3.0/make.log\ncompiling dln.c\ncompiling localeinit.c\ncreating verconf.h\nverconf.h updated\ncompiling loadpath.c\ncompiling prelude.c\nlinking static-library libruby.2.3.0-static.a\nverifying static-library libruby.2.3.0-static.a\nlinking shared-library libruby.2.3.0.dylib\ngenerating encdb.h\nencdb.h updated\nmaking enc\n/bin/sh: /Applications/Xcode: No such file or directory\nmake: *** [enc] Error 127\n++ return 2\nThere has been an error while running make. Halting the installation.\n/Users/xxxx/.rvm/bin/rvm: line 66: shell_session_update: command not found\n\n* 安装xcode command line 后再次安装ruby.\n\n```\nxcode-select --install\n```\n* 如果还是没有成功,查看自己xcode command line 是否选在正确版本.\n\n![Command Line Tools](http://upload-images.jianshu.io/upload_images/1666327-b9ed79eaa12daa63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### 4>出现错误了,还是没有安装成功ruby.(没关系,卸载RVM,从新安装!)\n要记得关闭终端重新打开, 或者打开路径`cd ~`出现在`~`\n\n![~](http://upload-images.jianshu.io/upload_images/1666327-801a78332b5d3df5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nsudo rm -rf .rvm .rvmrc   /etc/rvmrc ;gem uninstall rvm\n```\n### 2.安装CocoaPods\n##### 1>安装cocoapods(普通版本)\n```\nsudo gem install cocoapods\n```\n##### 2>更新框架库 \n```\npod setup\n```\n可以查看框架镜像库的`cd   ~/.cocoapods`\n\n##### 3>更新cocoapods版本(测试版本,仅供特定条件)\n```\nsudo gem install cocoapods --pre\n```\n\n","source":"_posts/Cocoapods进阶-屡试不爽，安装Cocoapods1.1.0最新心得及问题总结!.md","raw":"---\ntitle: Cocoapods进阶-屡试不爽，安装Cocoapods1.1.0最新心得及问题总结\ndate: 2016-10-10 18:20:25\ncategories:\n    - Cocoapods\ntags: \n    - Cocoapods\n    - Mac\n---\n\n>安装淘宝源就直接跳过,安装十余次,分享下最近安装cocoapods的经验,仅仅提醒ruby版本问题之后的操作.如果还有不懂地方可以下方评论,会及时回答.\n```\nError installing cocoapods:\n\tactivesupport requires Ruby version >= 2.2.2.\n```\n\n### 1.安装ruby \n##### 1>安装 RVM \nRVM: Ruby Version Manager, Ruby的版本管理器，包括Ruby的版本管理和Gem库管理(gemset)\n```\ncurl -L get.rvm.io | bash -s stable\n```\n##### 2>安装home-brew(切记先安装home-brew,再安装ruby!!)\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n![Homebrew](http://upload-images.jianshu.io/upload_images/1666327-6909f2a40a341691.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n[home-brew地址:](http://brew.sh)<--\n\n如果出现重复安装home-brew,不要怕.\n\n![重复安装home-brew](http://upload-images.jianshu.io/upload_images/1666327-775c733738fa3fdc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n会给你提示命令.\nIt appears Homebrew is already installed. If your intent is to reinstall you\nshould do the following before running this installer again:\n```\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\"\n```\n\n##### 3>再安装ruby版本(最新版本2.3.0)\n```\nrvm install 2.3.0\n```\n出现情况:\n1.安装不通过的话可以进行手动安装.\n![手动安装](http://upload-images.jianshu.io/upload_images/1666327-45656448ed643a15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>Installing requirements for osx.\nUpdating system.....\nInstalling required packages: autoconf, automake, libtool, pkg-config, libyaml, readline, libksba, openssl|\n........\nError running 'requirements_osx_brew_libs_install autoconf automake libtool pkg-config libyaml readline libksba openssl',\nshowing last 15 lines of /Users/MTKJ/.rvm/log/1469285314_ruby-2.3.0/package_install_autoconf_automake_libtool_pkg-config_libyaml_readline_libksba_openssl.log\n\n```\nbrew install autoconf\nbrew install automake\nbrew install lib tool\nbrew install apple-gcc42\nbrew install libyaml\nbrew install libxslt\nbrew install libksba\nbrew install openssl\n```\n\n2 . Error running '__rvm_make -j 1' 错误\n\n![running '__rvm_make -j 1'](http://upload-images.jianshu.io/upload_images/1666327-4fa021187046f2d3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>ruby-2.3.0 - #extracting ruby-2.3.0 to /Users/xxxx/.rvm/src/ruby-2.3.0...-\nruby-2.3.0 - #configuring......................................................|\nruby-2.3.0 - #post-configuration.\nruby-2.3.0 - #compiling...........\nError running '__rvm_make -j 1',\nshowing last 15 lines of /Users/xxxx/.rvm/log/1476689284_ruby-2.3.0/make.log\ncompiling dln.c\ncompiling localeinit.c\ncreating verconf.h\nverconf.h updated\ncompiling loadpath.c\ncompiling prelude.c\nlinking static-library libruby.2.3.0-static.a\nverifying static-library libruby.2.3.0-static.a\nlinking shared-library libruby.2.3.0.dylib\ngenerating encdb.h\nencdb.h updated\nmaking enc\n/bin/sh: /Applications/Xcode: No such file or directory\nmake: *** [enc] Error 127\n++ return 2\nThere has been an error while running make. Halting the installation.\n/Users/xxxx/.rvm/bin/rvm: line 66: shell_session_update: command not found\n\n* 安装xcode command line 后再次安装ruby.\n\n```\nxcode-select --install\n```\n* 如果还是没有成功,查看自己xcode command line 是否选在正确版本.\n\n![Command Line Tools](http://upload-images.jianshu.io/upload_images/1666327-b9ed79eaa12daa63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### 4>出现错误了,还是没有安装成功ruby.(没关系,卸载RVM,从新安装!)\n要记得关闭终端重新打开, 或者打开路径`cd ~`出现在`~`\n\n![~](http://upload-images.jianshu.io/upload_images/1666327-801a78332b5d3df5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nsudo rm -rf .rvm .rvmrc   /etc/rvmrc ;gem uninstall rvm\n```\n### 2.安装CocoaPods\n##### 1>安装cocoapods(普通版本)\n```\nsudo gem install cocoapods\n```\n##### 2>更新框架库 \n```\npod setup\n```\n可以查看框架镜像库的`cd   ~/.cocoapods`\n\n##### 3>更新cocoapods版本(测试版本,仅供特定条件)\n```\nsudo gem install cocoapods --pre\n```\n\n","slug":"Cocoapods进阶-屡试不爽，安装Cocoapods1.1.0最新心得及问题总结!","published":1,"updated":"2017-03-16T04:54:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0c1v88g0003ksfyjy6xbknu","content":"<blockquote>\n<p>安装淘宝源就直接跳过,安装十余次,分享下最近安装cocoapods的经验,仅仅提醒ruby版本问题之后的操作.如果还有不懂地方可以下方评论,会及时回答.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error installing cocoapods:</div><div class=\"line\">\tactivesupport requires Ruby version &gt;= 2.2.2.</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"1-安装ruby\"><a href=\"#1-安装ruby\" class=\"headerlink\" title=\"1.安装ruby\"></a>1.安装ruby</h3><h5 id=\"1-gt-安装-RVM\"><a href=\"#1-gt-安装-RVM\" class=\"headerlink\" title=\"1&gt;安装 RVM\"></a>1&gt;安装 RVM</h5><p>RVM: Ruby Version Manager, Ruby的版本管理器，包括Ruby的版本管理和Gem库管理(gemset)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -L get.rvm.io | bash -s stable</div></pre></td></tr></table></figure></p>\n<h5 id=\"2-gt-安装home-brew-切记先安装home-brew-再安装ruby\"><a href=\"#2-gt-安装home-brew-切记先安装home-brew-再安装ruby\" class=\"headerlink\" title=\"2&gt;安装home-brew(切记先安装home-brew,再安装ruby!!)\"></a>2&gt;安装home-brew(切记先安装home-brew,再安装ruby!!)</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-6909f2a40a341691.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Homebrew\"><br><a href=\"http://brew.sh\" target=\"_blank\" rel=\"external\">home-brew地址:</a>&lt;–</p>\n<p>如果出现重复安装home-brew,不要怕.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-775c733738fa3fdc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"重复安装home-brew\"><br>会给你提示命令.<br>It appears Homebrew is already installed. If your intent is to reinstall you<br>should do the following before running this installer again:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</div></pre></td></tr></table></figure></p>\n<h5 id=\"3-gt-再安装ruby版本-最新版本2-3-0\"><a href=\"#3-gt-再安装ruby版本-最新版本2-3-0\" class=\"headerlink\" title=\"3&gt;再安装ruby版本(最新版本2.3.0)\"></a>3&gt;再安装ruby版本(最新版本2.3.0)</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm install 2.3.0</div></pre></td></tr></table></figure>\n<p>出现情况:<br>1.安装不通过的话可以进行手动安装.<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-45656448ed643a15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"手动安装\"></p>\n<blockquote>\n<p>Installing requirements for osx.<br>Updating system…..<br>Installing required packages: autoconf, automake, libtool, pkg-config, libyaml, readline, libksba, openssl|<br>……..<br>Error running ‘requirements_osx_brew_libs_install autoconf automake libtool pkg-config libyaml readline libksba openssl’,<br>showing last 15 lines of /Users/MTKJ/.rvm/log/1469285314_ruby-2.3.0/package_install_autoconf_automake_libtool_pkg-config_libyaml_readline_libksba_openssl.log</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install autoconf</div><div class=\"line\">brew install automake</div><div class=\"line\">brew install lib tool</div><div class=\"line\">brew install apple-gcc42</div><div class=\"line\">brew install libyaml</div><div class=\"line\">brew install libxslt</div><div class=\"line\">brew install libksba</div><div class=\"line\">brew install openssl</div></pre></td></tr></table></figure>\n<p>2 . Error running ‘__rvm_make -j 1’ 错误</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-4fa021187046f2d3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"running &#39;__rvm_make -j 1&#39;\"></p>\n<blockquote>\n<p>ruby-2.3.0 - #extracting ruby-2.3.0 to /Users/xxxx/.rvm/src/ruby-2.3.0…-<br>ruby-2.3.0 - #configuring………………………………………………|<br>ruby-2.3.0 - #post-configuration.<br>ruby-2.3.0 - #compiling………..<br>Error running ‘__rvm_make -j 1’,<br>showing last 15 lines of /Users/xxxx/.rvm/log/1476689284_ruby-2.3.0/make.log<br>compiling dln.c<br>compiling localeinit.c<br>creating verconf.h<br>verconf.h updated<br>compiling loadpath.c<br>compiling prelude.c<br>linking static-library libruby.2.3.0-static.a<br>verifying static-library libruby.2.3.0-static.a<br>linking shared-library libruby.2.3.0.dylib<br>generating encdb.h<br>encdb.h updated<br>making enc<br>/bin/sh: /Applications/Xcode: No such file or directory<br>make: <em>*</em> [enc] Error 127<br>++ return 2<br>There has been an error while running make. Halting the installation.<br>/Users/xxxx/.rvm/bin/rvm: line 66: shell_session_update: command not found</p>\n</blockquote>\n<ul>\n<li>安装xcode command line 后再次安装ruby.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xcode-select --install</div></pre></td></tr></table></figure>\n<ul>\n<li>如果还是没有成功,查看自己xcode command line 是否选在正确版本.</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-b9ed79eaa12daa63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Command Line Tools\"></p>\n<h5 id=\"4-gt-出现错误了-还是没有安装成功ruby-没关系-卸载RVM-从新安装\"><a href=\"#4-gt-出现错误了-还是没有安装成功ruby-没关系-卸载RVM-从新安装\" class=\"headerlink\" title=\"4&gt;出现错误了,还是没有安装成功ruby.(没关系,卸载RVM,从新安装!)\"></a>4&gt;出现错误了,还是没有安装成功ruby.(没关系,卸载RVM,从新安装!)</h5><p>要记得关闭终端重新打开, 或者打开路径<code>cd ~</code>出现在<code>~</code></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-801a78332b5d3df5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"~\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo rm -rf .rvm .rvmrc   /etc/rvmrc ;gem uninstall rvm</div></pre></td></tr></table></figure>\n<h3 id=\"2-安装CocoaPods\"><a href=\"#2-安装CocoaPods\" class=\"headerlink\" title=\"2.安装CocoaPods\"></a>2.安装CocoaPods</h3><h5 id=\"1-gt-安装cocoapods-普通版本\"><a href=\"#1-gt-安装cocoapods-普通版本\" class=\"headerlink\" title=\"1&gt;安装cocoapods(普通版本)\"></a>1&gt;安装cocoapods(普通版本)</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods</div></pre></td></tr></table></figure>\n<h5 id=\"2-gt-更新框架库\"><a href=\"#2-gt-更新框架库\" class=\"headerlink\" title=\"2&gt;更新框架库\"></a>2&gt;更新框架库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod setup</div></pre></td></tr></table></figure>\n<p>可以查看框架镜像库的<code>cd   ~/.cocoapods</code></p>\n<h5 id=\"3-gt-更新cocoapods版本-测试版本-仅供特定条件\"><a href=\"#3-gt-更新cocoapods版本-测试版本-仅供特定条件\" class=\"headerlink\" title=\"3&gt;更新cocoapods版本(测试版本,仅供特定条件)\"></a>3&gt;更新cocoapods版本(测试版本,仅供特定条件)</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods --pre</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>安装淘宝源就直接跳过,安装十余次,分享下最近安装cocoapods的经验,仅仅提醒ruby版本问题之后的操作.如果还有不懂地方可以下方评论,会及时回答.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error installing cocoapods:</div><div class=\"line\">\tactivesupport requires Ruby version &gt;= 2.2.2.</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"1-安装ruby\"><a href=\"#1-安装ruby\" class=\"headerlink\" title=\"1.安装ruby\"></a>1.安装ruby</h3><h5 id=\"1-gt-安装-RVM\"><a href=\"#1-gt-安装-RVM\" class=\"headerlink\" title=\"1&gt;安装 RVM\"></a>1&gt;安装 RVM</h5><p>RVM: Ruby Version Manager, Ruby的版本管理器，包括Ruby的版本管理和Gem库管理(gemset)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -L get.rvm.io | bash -s stable</div></pre></td></tr></table></figure></p>\n<h5 id=\"2-gt-安装home-brew-切记先安装home-brew-再安装ruby\"><a href=\"#2-gt-安装home-brew-切记先安装home-brew-再安装ruby\" class=\"headerlink\" title=\"2&gt;安装home-brew(切记先安装home-brew,再安装ruby!!)\"></a>2&gt;安装home-brew(切记先安装home-brew,再安装ruby!!)</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-6909f2a40a341691.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Homebrew\"><br><a href=\"http://brew.sh\">home-brew地址:</a>&lt;–</p>\n<p>如果出现重复安装home-brew,不要怕.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-775c733738fa3fdc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"重复安装home-brew\"><br>会给你提示命令.<br>It appears Homebrew is already installed. If your intent is to reinstall you<br>should do the following before running this installer again:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</div></pre></td></tr></table></figure></p>\n<h5 id=\"3-gt-再安装ruby版本-最新版本2-3-0\"><a href=\"#3-gt-再安装ruby版本-最新版本2-3-0\" class=\"headerlink\" title=\"3&gt;再安装ruby版本(最新版本2.3.0)\"></a>3&gt;再安装ruby版本(最新版本2.3.0)</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm install 2.3.0</div></pre></td></tr></table></figure>\n<p>出现情况:<br>1.安装不通过的话可以进行手动安装.<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-45656448ed643a15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"手动安装\"></p>\n<blockquote>\n<p>Installing requirements for osx.<br>Updating system…..<br>Installing required packages: autoconf, automake, libtool, pkg-config, libyaml, readline, libksba, openssl|<br>……..<br>Error running ‘requirements_osx_brew_libs_install autoconf automake libtool pkg-config libyaml readline libksba openssl’,<br>showing last 15 lines of /Users/MTKJ/.rvm/log/1469285314_ruby-2.3.0/package_install_autoconf_automake_libtool_pkg-config_libyaml_readline_libksba_openssl.log</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install autoconf</div><div class=\"line\">brew install automake</div><div class=\"line\">brew install lib tool</div><div class=\"line\">brew install apple-gcc42</div><div class=\"line\">brew install libyaml</div><div class=\"line\">brew install libxslt</div><div class=\"line\">brew install libksba</div><div class=\"line\">brew install openssl</div></pre></td></tr></table></figure>\n<p>2 . Error running ‘__rvm_make -j 1’ 错误</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-4fa021187046f2d3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"running &#39;__rvm_make -j 1&#39;\"></p>\n<blockquote>\n<p>ruby-2.3.0 - #extracting ruby-2.3.0 to /Users/xxxx/.rvm/src/ruby-2.3.0…-<br>ruby-2.3.0 - #configuring………………………………………………|<br>ruby-2.3.0 - #post-configuration.<br>ruby-2.3.0 - #compiling………..<br>Error running ‘__rvm_make -j 1’,<br>showing last 15 lines of /Users/xxxx/.rvm/log/1476689284_ruby-2.3.0/make.log<br>compiling dln.c<br>compiling localeinit.c<br>creating verconf.h<br>verconf.h updated<br>compiling loadpath.c<br>compiling prelude.c<br>linking static-library libruby.2.3.0-static.a<br>verifying static-library libruby.2.3.0-static.a<br>linking shared-library libruby.2.3.0.dylib<br>generating encdb.h<br>encdb.h updated<br>making enc<br>/bin/sh: /Applications/Xcode: No such file or directory<br>make: <em>*</em> [enc] Error 127<br>++ return 2<br>There has been an error while running make. Halting the installation.<br>/Users/xxxx/.rvm/bin/rvm: line 66: shell_session_update: command not found</p>\n</blockquote>\n<ul>\n<li>安装xcode command line 后再次安装ruby.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xcode-select --install</div></pre></td></tr></table></figure>\n<ul>\n<li>如果还是没有成功,查看自己xcode command line 是否选在正确版本.</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-b9ed79eaa12daa63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Command Line Tools\"></p>\n<h5 id=\"4-gt-出现错误了-还是没有安装成功ruby-没关系-卸载RVM-从新安装\"><a href=\"#4-gt-出现错误了-还是没有安装成功ruby-没关系-卸载RVM-从新安装\" class=\"headerlink\" title=\"4&gt;出现错误了,还是没有安装成功ruby.(没关系,卸载RVM,从新安装!)\"></a>4&gt;出现错误了,还是没有安装成功ruby.(没关系,卸载RVM,从新安装!)</h5><p>要记得关闭终端重新打开, 或者打开路径<code>cd ~</code>出现在<code>~</code></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-801a78332b5d3df5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"~\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo rm -rf .rvm .rvmrc   /etc/rvmrc ;gem uninstall rvm</div></pre></td></tr></table></figure>\n<h3 id=\"2-安装CocoaPods\"><a href=\"#2-安装CocoaPods\" class=\"headerlink\" title=\"2.安装CocoaPods\"></a>2.安装CocoaPods</h3><h5 id=\"1-gt-安装cocoapods-普通版本\"><a href=\"#1-gt-安装cocoapods-普通版本\" class=\"headerlink\" title=\"1&gt;安装cocoapods(普通版本)\"></a>1&gt;安装cocoapods(普通版本)</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods</div></pre></td></tr></table></figure>\n<h5 id=\"2-gt-更新框架库\"><a href=\"#2-gt-更新框架库\" class=\"headerlink\" title=\"2&gt;更新框架库\"></a>2&gt;更新框架库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod setup</div></pre></td></tr></table></figure>\n<p>可以查看框架镜像库的<code>cd   ~/.cocoapods</code></p>\n<h5 id=\"3-gt-更新cocoapods版本-测试版本-仅供特定条件\"><a href=\"#3-gt-更新cocoapods版本-测试版本-仅供特定条件\" class=\"headerlink\" title=\"3&gt;更新cocoapods版本(测试版本,仅供特定条件)\"></a>3&gt;更新cocoapods版本(测试版本,仅供特定条件)</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods --pre</div></pre></td></tr></table></figure>\n"},{"title":"Mac搭建Hexo博客","date":"2016-06-01T13:23:31.000Z","_content":"##  前言\n>总算是把Hexo给弄好了。在这期间遇到了各种问题，网上有的教程也有点老了，这里就再写一篇。**最新的教程**可以去[Hexo官网](https://hexo.io/zh-cn/docs/index.html)查看。\n\n##  准备\n\n###  安装Xcode\n\nHexo的编译可能依赖Xcode。\n\n###  安装node.js\n\nHexo是基于node.js的，所以要去[官网](https://nodejs.org/)上下载下来安装。版本可以选择稳定版(4.3.1)也可以选择最新版(5.7.0)。需要注意的是，Hexo 3.1.1测试的最低版本为0.12，所以安装的版本不要太旧，之前看到网上装的0.8.4的版本，我也这么装，结果有一大堆的报错。\n\n###  注册Github账户\n\n在本地搭建好Hexo后可以将内容同步到github上，可以在网上浏览。可以去[Github官网](https://github.com/)上去注册，注册的过程我就不罗嗦了，具体的过程可以去[这个页面](http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool)上跳到Github的那部分去看。其中配置SSH Keys的那部分，可以选择不配制，不配置的话以后每次提交的时候就需要手动输入账号密码，如果配置了的话就不需要了。\n\n##  安装\n\n因为安装包中有些内容在墙外，所以可以换[淘宝源](http://npm.taobao.org/)，或者用\n\n```\nnpm install -g hexo-cli --no-optional\n```\n\ncd进入你要安装的目录，如\n\n```\ncd ~/hexo\n```\n\n然后初始化\n\n```\nhexo init\n```\n\n初始化好之后,执行安装\n\n```\nnpm install\n```\n\n这样就已经安装完毕。\n\n##  后续\n\n###  生成静态页面\n\ncd 到的目录，执行如下命令，生成静态页面至hexo\\public\\目录。\n\n```\nhexo generate\n```\n\n###  本地启动\n\n执行好上面的命令之后,开始启动本地服务。再执行下面的命令：\n\n```\nhexo sever\n```\n\n看到 *INFO Hexo is running at [http://0.0.0.0:4000/](http://0.0.0.0:4000/). Press Ctrl+C to stop.*\n之后，就可以在浏览器中打开页面[http://localhost:4000](http://localhost:4000)来看了。\n\n###  写文章\n\n还是在你cd到的目录,执行new命令后,生成指定名称的文章至hexo\\source\\ _posts\\ blogName.md。\n\n```\nhexo new \"blogName\"\n```\n\nblogName就是博客名。\n\n接下来，就可以用Markdown编辑器写你的文章了。\n\n```\n格式:\ntitle: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改\ncategories: #文章分类目录，可以为空，注意:后面有个空格\ntags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格\n---\n这里开始使用markdown格式输入你的正文。\n```\n\n##  上传至Github\n\n###  安装git\n\n在安装之前，首先我们要确认在你的Github帐号的Repository(仓库)中有 **用户名.github.io** 的项目。在确认之后，就可以执行命令\n\n```\nnpm install hexo-deployer-git --save\n```\n\n##  配置账号\n\n###  配置 _config.yml 文件\n\n在Hexo安装的目录，如 *~/Document/hexo* 中找到 **_config.yml** 文件。打开。翻到最后，找到 **deploy** 字样，改成如下格式：\n\n```\ndeploy:\n    type: git \n    repo: https://github.com/用户名/用户名.github.io.git \n    branch: master\n```\n\n需要**注意**的是：冒号后面有一个空格；使用github可以不用写branch那一行。如果要使用多个 deployer，可改成如下样式：\n\n```\ndeploy:\n- type: git \n  repo:\n- type: heroku \n  repo:\n```\n\n##  同步\n\n###  输入命令\n\n```\nhexo deploy\n```\n\n执行,以后每次执行就可以依次输入下面三行命令：\n\n```\nhero clean\nhero generate\nhexo deploy\n```\n\n##  插件\n###  站点地图\n\n```\nnpm install hexo-generator-sitemap --save\n```\n\n生成的sitemap.xml可以给搜索引擎收录使用。\n如果要生成百度的sitemap，使用以下命令：\n\n```\nnpm install hexo-generator-baidu-sitemap --save\n```\n\n###  RSS订阅\n\n```\nnpm install hexo-generator-feed@1.0.3 --save\n```\n\n\n##  主题更改\n\n[Hexo](http://hexo.io/)提供了官网的主题, 初始化hexo时也会自动生成一个主题, Hexo还支持个性定制主题, 可以根据自己的喜好对主题进行修改, [更多主题](https://github.com/hexojs/hexo/wiki/Themes)可以在官网中找到\n\n个性化博客的设置在博客的根目录下对喜爱的主题进行主题进行克隆\n\n```\ngit clone git@github.com:yunlzheng/hexo-themes.git themes/writing\n#在./_config.yml，修改主题为writingtheme: writing\n#查看本地效果\nhexo g #hero generate简写\nhexo s #hexo server简写\n```\n\n###  安装主题的方法就是一句git命令：\n\n```\ngit clone https://github.com/xx/hexo-theme-xxxx.git themes/xxxx\n```\n\n目录是否是什么无所谓，只要与_config.yml文件一致即可。\n\n安装完成后，打开hexo\\_config.yml，修改主题为指定的主题名\n\n```\ntheme: xxxx\n```\n\n打开hexo\\themes\\xxxx目录，编辑主题配置文件_config.yml：\n\n```\nmenu: #配置页头显示哪些菜单\n#  Home: /\n  Archives: /archives\n  Reading: /reading\n  About: /about\n#  Guestbook: /about\n\nexcerpt_link: Read More #摘要链接文字\narchive_yearly: false #按年存档\n\nwidgets: #配置页脚显示哪些小挂件\n  - category\n#  - tag\n  - tagcloud\n  - recent_posts\n#  - blogroll\n\nblogrolls: #友情链接\n  - bruce sha's duapp wordpress: http://ibruce.duapp.com\n  - bruce sha's javaeye: http://buru.iteye.com\n  - bruce sha's oschina blog: http://my.oschina.net/buru\n  - bruce sha's baidu space: http://hi.baidu.com/iburu\n\nfancybox: true #是否开启fancybox效果\n\nduoshuo_shortname: buru #多说账号\n\ngoogle_analytics:\nrss:\n\n```\n\n###  更新hero\n\n```\nnpm update -g hero\n```\n\n###  更新主题\n\n```\ncd themes/modernist\ngit pull\n```\n\n###  更新插件：\n\n```\nnpm update\n```\n\n在Mac下通过HEXO在Github上搭建博客\nhttp://www.jianshu.com/p/ecd51e8ef2fa\n\nhexo你的博客:\nhttp://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool\n \nHEXO+Github,搭建属于自己的博客:\nhttp://www.jianshu.com/p/465830080ea9\n\n通过Hexo在Github上搭建博客教程: \nhttp://www.jianshu.com/p/858ecf233db9\n\n使用Hexo搭建博客（四），博客的部件和插件:\nhttp://www.jianshu.com/p/739bf1305e66\n\n\n","source":"_posts/Mac搭建Hexo博客.md","raw":"---\ntitle: Mac搭建Hexo博客\ndate: 2016-06-01 21:23:31\ncategories:\n    - Hexo\ntags: \n    - Hexo\n    - Mac\n---\n##  前言\n>总算是把Hexo给弄好了。在这期间遇到了各种问题，网上有的教程也有点老了，这里就再写一篇。**最新的教程**可以去[Hexo官网](https://hexo.io/zh-cn/docs/index.html)查看。\n\n##  准备\n\n###  安装Xcode\n\nHexo的编译可能依赖Xcode。\n\n###  安装node.js\n\nHexo是基于node.js的，所以要去[官网](https://nodejs.org/)上下载下来安装。版本可以选择稳定版(4.3.1)也可以选择最新版(5.7.0)。需要注意的是，Hexo 3.1.1测试的最低版本为0.12，所以安装的版本不要太旧，之前看到网上装的0.8.4的版本，我也这么装，结果有一大堆的报错。\n\n###  注册Github账户\n\n在本地搭建好Hexo后可以将内容同步到github上，可以在网上浏览。可以去[Github官网](https://github.com/)上去注册，注册的过程我就不罗嗦了，具体的过程可以去[这个页面](http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool)上跳到Github的那部分去看。其中配置SSH Keys的那部分，可以选择不配制，不配置的话以后每次提交的时候就需要手动输入账号密码，如果配置了的话就不需要了。\n\n##  安装\n\n因为安装包中有些内容在墙外，所以可以换[淘宝源](http://npm.taobao.org/)，或者用\n\n```\nnpm install -g hexo-cli --no-optional\n```\n\ncd进入你要安装的目录，如\n\n```\ncd ~/hexo\n```\n\n然后初始化\n\n```\nhexo init\n```\n\n初始化好之后,执行安装\n\n```\nnpm install\n```\n\n这样就已经安装完毕。\n\n##  后续\n\n###  生成静态页面\n\ncd 到的目录，执行如下命令，生成静态页面至hexo\\public\\目录。\n\n```\nhexo generate\n```\n\n###  本地启动\n\n执行好上面的命令之后,开始启动本地服务。再执行下面的命令：\n\n```\nhexo sever\n```\n\n看到 *INFO Hexo is running at [http://0.0.0.0:4000/](http://0.0.0.0:4000/). Press Ctrl+C to stop.*\n之后，就可以在浏览器中打开页面[http://localhost:4000](http://localhost:4000)来看了。\n\n###  写文章\n\n还是在你cd到的目录,执行new命令后,生成指定名称的文章至hexo\\source\\ _posts\\ blogName.md。\n\n```\nhexo new \"blogName\"\n```\n\nblogName就是博客名。\n\n接下来，就可以用Markdown编辑器写你的文章了。\n\n```\n格式:\ntitle: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改\ncategories: #文章分类目录，可以为空，注意:后面有个空格\ntags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格\n---\n这里开始使用markdown格式输入你的正文。\n```\n\n##  上传至Github\n\n###  安装git\n\n在安装之前，首先我们要确认在你的Github帐号的Repository(仓库)中有 **用户名.github.io** 的项目。在确认之后，就可以执行命令\n\n```\nnpm install hexo-deployer-git --save\n```\n\n##  配置账号\n\n###  配置 _config.yml 文件\n\n在Hexo安装的目录，如 *~/Document/hexo* 中找到 **_config.yml** 文件。打开。翻到最后，找到 **deploy** 字样，改成如下格式：\n\n```\ndeploy:\n    type: git \n    repo: https://github.com/用户名/用户名.github.io.git \n    branch: master\n```\n\n需要**注意**的是：冒号后面有一个空格；使用github可以不用写branch那一行。如果要使用多个 deployer，可改成如下样式：\n\n```\ndeploy:\n- type: git \n  repo:\n- type: heroku \n  repo:\n```\n\n##  同步\n\n###  输入命令\n\n```\nhexo deploy\n```\n\n执行,以后每次执行就可以依次输入下面三行命令：\n\n```\nhero clean\nhero generate\nhexo deploy\n```\n\n##  插件\n###  站点地图\n\n```\nnpm install hexo-generator-sitemap --save\n```\n\n生成的sitemap.xml可以给搜索引擎收录使用。\n如果要生成百度的sitemap，使用以下命令：\n\n```\nnpm install hexo-generator-baidu-sitemap --save\n```\n\n###  RSS订阅\n\n```\nnpm install hexo-generator-feed@1.0.3 --save\n```\n\n\n##  主题更改\n\n[Hexo](http://hexo.io/)提供了官网的主题, 初始化hexo时也会自动生成一个主题, Hexo还支持个性定制主题, 可以根据自己的喜好对主题进行修改, [更多主题](https://github.com/hexojs/hexo/wiki/Themes)可以在官网中找到\n\n个性化博客的设置在博客的根目录下对喜爱的主题进行主题进行克隆\n\n```\ngit clone git@github.com:yunlzheng/hexo-themes.git themes/writing\n#在./_config.yml，修改主题为writingtheme: writing\n#查看本地效果\nhexo g #hero generate简写\nhexo s #hexo server简写\n```\n\n###  安装主题的方法就是一句git命令：\n\n```\ngit clone https://github.com/xx/hexo-theme-xxxx.git themes/xxxx\n```\n\n目录是否是什么无所谓，只要与_config.yml文件一致即可。\n\n安装完成后，打开hexo\\_config.yml，修改主题为指定的主题名\n\n```\ntheme: xxxx\n```\n\n打开hexo\\themes\\xxxx目录，编辑主题配置文件_config.yml：\n\n```\nmenu: #配置页头显示哪些菜单\n#  Home: /\n  Archives: /archives\n  Reading: /reading\n  About: /about\n#  Guestbook: /about\n\nexcerpt_link: Read More #摘要链接文字\narchive_yearly: false #按年存档\n\nwidgets: #配置页脚显示哪些小挂件\n  - category\n#  - tag\n  - tagcloud\n  - recent_posts\n#  - blogroll\n\nblogrolls: #友情链接\n  - bruce sha's duapp wordpress: http://ibruce.duapp.com\n  - bruce sha's javaeye: http://buru.iteye.com\n  - bruce sha's oschina blog: http://my.oschina.net/buru\n  - bruce sha's baidu space: http://hi.baidu.com/iburu\n\nfancybox: true #是否开启fancybox效果\n\nduoshuo_shortname: buru #多说账号\n\ngoogle_analytics:\nrss:\n\n```\n\n###  更新hero\n\n```\nnpm update -g hero\n```\n\n###  更新主题\n\n```\ncd themes/modernist\ngit pull\n```\n\n###  更新插件：\n\n```\nnpm update\n```\n\n在Mac下通过HEXO在Github上搭建博客\nhttp://www.jianshu.com/p/ecd51e8ef2fa\n\nhexo你的博客:\nhttp://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool\n \nHEXO+Github,搭建属于自己的博客:\nhttp://www.jianshu.com/p/465830080ea9\n\n通过Hexo在Github上搭建博客教程: \nhttp://www.jianshu.com/p/858ecf233db9\n\n使用Hexo搭建博客（四），博客的部件和插件:\nhttp://www.jianshu.com/p/739bf1305e66\n\n\n","slug":"Mac搭建Hexo博客","published":1,"updated":"2017-03-16T04:59:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0c1v88s0007ksfy91s6yzpq","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>总算是把Hexo给弄好了。在这期间遇到了各种问题，网上有的教程也有点老了，这里就再写一篇。<strong>最新的教程</strong>可以去<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"external\">Hexo官网</a>查看。</p>\n</blockquote>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"安装Xcode\"><a href=\"#安装Xcode\" class=\"headerlink\" title=\"安装Xcode\"></a>安装Xcode</h3><p>Hexo的编译可能依赖Xcode。</p>\n<h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>Hexo是基于node.js的，所以要去<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"external\">官网</a>上下载下来安装。版本可以选择稳定版(4.3.1)也可以选择最新版(5.7.0)。需要注意的是，Hexo 3.1.1测试的最低版本为0.12，所以安装的版本不要太旧，之前看到网上装的0.8.4的版本，我也这么装，结果有一大堆的报错。</p>\n<h3 id=\"注册Github账户\"><a href=\"#注册Github账户\" class=\"headerlink\" title=\"注册Github账户\"></a>注册Github账户</h3><p>在本地搭建好Hexo后可以将内容同步到github上，可以在网上浏览。可以去<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Github官网</a>上去注册，注册的过程我就不罗嗦了，具体的过程可以去<a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool\" target=\"_blank\" rel=\"external\">这个页面</a>上跳到Github的那部分去看。其中配置SSH Keys的那部分，可以选择不配制，不配置的话以后每次提交的时候就需要手动输入账号密码，如果配置了的话就不需要了。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>因为安装包中有些内容在墙外，所以可以换<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝源</a>，或者用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli --no-optional</div></pre></td></tr></table></figure>\n<p>cd进入你要安装的目录，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/hexo</div></pre></td></tr></table></figure>\n<p>然后初始化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n<p>初始化好之后,执行安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>这样就已经安装完毕。</p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><h3 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h3><p>cd 到的目录，执行如下命令，生成静态页面至hexo\\public\\目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<h3 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h3><p>执行好上面的命令之后,开始启动本地服务。再执行下面的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo sever</div></pre></td></tr></table></figure>\n<p>看到 <em>INFO Hexo is running at <a href=\"http://0.0.0.0:4000/\" target=\"_blank\" rel=\"external\">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</em><br>之后，就可以在浏览器中打开页面<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a>来看了。</p>\n<h3 id=\"写文章\"><a href=\"#写文章\" class=\"headerlink\" title=\"写文章\"></a>写文章</h3><p>还是在你cd到的目录,执行new命令后,生成指定名称的文章至hexo\\source\\ _posts\\ blogName.md。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;blogName&quot;</div></pre></td></tr></table></figure>\n<p>blogName就是博客名。</p>\n<p>接下来，就可以用Markdown编辑器写你的文章了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">格式:</div><div class=\"line\">title: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中</div><div class=\"line\">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</div><div class=\"line\">categories: #文章分类目录，可以为空，注意:后面有个空格</div><div class=\"line\">tags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格</div><div class=\"line\">---</div><div class=\"line\">这里开始使用markdown格式输入你的正文。</div></pre></td></tr></table></figure>\n<h2 id=\"上传至Github\"><a href=\"#上传至Github\" class=\"headerlink\" title=\"上传至Github\"></a>上传至Github</h2><h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>在安装之前，首先我们要确认在你的Github帐号的Repository(仓库)中有 <strong>用户名.github.io</strong> 的项目。在确认之后，就可以执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<h2 id=\"配置账号\"><a href=\"#配置账号\" class=\"headerlink\" title=\"配置账号\"></a>配置账号</h2><h3 id=\"配置-config-yml-文件\"><a href=\"#配置-config-yml-文件\" class=\"headerlink\" title=\"配置 _config.yml 文件\"></a>配置 _config.yml 文件</h3><p>在Hexo安装的目录，如 <em>~/Document/hexo</em> 中找到 <strong>_config.yml</strong> 文件。打开。翻到最后，找到 <strong>deploy</strong> 字样，改成如下格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">    type: git </div><div class=\"line\">    repo: https://github.com/用户名/用户名.github.io.git </div><div class=\"line\">    branch: master</div></pre></td></tr></table></figure>\n<p>需要<strong>注意</strong>的是：冒号后面有一个空格；使用github可以不用写branch那一行。如果要使用多个 deployer，可改成如下样式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">- type: git </div><div class=\"line\">  repo:</div><div class=\"line\">- type: heroku </div><div class=\"line\">  repo:</div></pre></td></tr></table></figure>\n<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><h3 id=\"输入命令\"><a href=\"#输入命令\" class=\"headerlink\" title=\"输入命令\"></a>输入命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<p>执行,以后每次执行就可以依次输入下面三行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hero clean</div><div class=\"line\">hero generate</div><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"站点地图\"><a href=\"#站点地图\" class=\"headerlink\" title=\"站点地图\"></a>站点地图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>\n<p>生成的sitemap.xml可以给搜索引擎收录使用。<br>如果要生成百度的sitemap，使用以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>\n<h3 id=\"RSS订阅\"><a href=\"#RSS订阅\" class=\"headerlink\" title=\"RSS订阅\"></a>RSS订阅</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-feed@1.0.3 --save</div></pre></td></tr></table></figure>\n<h2 id=\"主题更改\"><a href=\"#主题更改\" class=\"headerlink\" title=\"主题更改\"></a>主题更改</h2><p><a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>提供了官网的主题, 初始化hexo时也会自动生成一个主题, Hexo还支持个性定制主题, 可以根据自己的喜好对主题进行修改, <a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">更多主题</a>可以在官网中找到</p>\n<p>个性化博客的设置在博客的根目录下对喜爱的主题进行主题进行克隆</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git@github.com:yunlzheng/hexo-themes.git themes/writing</div><div class=\"line\">#在./_config.yml，修改主题为writingtheme: writing</div><div class=\"line\">#查看本地效果</div><div class=\"line\">hexo g #hero generate简写</div><div class=\"line\">hexo s #hexo server简写</div></pre></td></tr></table></figure>\n<h3 id=\"安装主题的方法就是一句git命令：\"><a href=\"#安装主题的方法就是一句git命令：\" class=\"headerlink\" title=\"安装主题的方法就是一句git命令：\"></a>安装主题的方法就是一句git命令：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/xx/hexo-theme-xxxx.git themes/xxxx</div></pre></td></tr></table></figure>\n<p>目录是否是什么无所谓，只要与_config.yml文件一致即可。</p>\n<p>安装完成后，打开hexo_config.yml，修改主题为指定的主题名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: xxxx</div></pre></td></tr></table></figure>\n<p>打开hexo\\themes\\xxxx目录，编辑主题配置文件_config.yml：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu: #配置页头显示哪些菜单</div><div class=\"line\">#  Home: /</div><div class=\"line\">  Archives: /archives</div><div class=\"line\">  Reading: /reading</div><div class=\"line\">  About: /about</div><div class=\"line\">#  Guestbook: /about</div><div class=\"line\"></div><div class=\"line\">excerpt_link: Read More #摘要链接文字</div><div class=\"line\">archive_yearly: false #按年存档</div><div class=\"line\"></div><div class=\"line\">widgets: #配置页脚显示哪些小挂件</div><div class=\"line\">  - category</div><div class=\"line\">#  - tag</div><div class=\"line\">  - tagcloud</div><div class=\"line\">  - recent_posts</div><div class=\"line\">#  - blogroll</div><div class=\"line\"></div><div class=\"line\">blogrolls: #友情链接</div><div class=\"line\">  - bruce sha&apos;s duapp wordpress: http://ibruce.duapp.com</div><div class=\"line\">  - bruce sha&apos;s javaeye: http://buru.iteye.com</div><div class=\"line\">  - bruce sha&apos;s oschina blog: http://my.oschina.net/buru</div><div class=\"line\">  - bruce sha&apos;s baidu space: http://hi.baidu.com/iburu</div><div class=\"line\"></div><div class=\"line\">fancybox: true #是否开启fancybox效果</div><div class=\"line\"></div><div class=\"line\">duoshuo_shortname: buru #多说账号</div><div class=\"line\"></div><div class=\"line\">google_analytics:</div><div class=\"line\">rss:</div></pre></td></tr></table></figure>\n<h3 id=\"更新hero\"><a href=\"#更新hero\" class=\"headerlink\" title=\"更新hero\"></a>更新hero</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update -g hero</div></pre></td></tr></table></figure>\n<h3 id=\"更新主题\"><a href=\"#更新主题\" class=\"headerlink\" title=\"更新主题\"></a>更新主题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd themes/modernist</div><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n<h3 id=\"更新插件：\"><a href=\"#更新插件：\" class=\"headerlink\" title=\"更新插件：\"></a>更新插件：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update</div></pre></td></tr></table></figure>\n<p>在Mac下通过HEXO在Github上搭建博客<br><a href=\"http://www.jianshu.com/p/ecd51e8ef2fa\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/ecd51e8ef2fa</a></p>\n<p>hexo你的博客:<br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool\" target=\"_blank\" rel=\"external\">http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool</a></p>\n<p>HEXO+Github,搭建属于自己的博客:<br><a href=\"http://www.jianshu.com/p/465830080ea9\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/465830080ea9</a></p>\n<p>通过Hexo在Github上搭建博客教程:<br><a href=\"http://www.jianshu.com/p/858ecf233db9\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/858ecf233db9</a></p>\n<p>使用Hexo搭建博客（四），博客的部件和插件:<br><a href=\"http://www.jianshu.com/p/739bf1305e66\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/739bf1305e66</a></p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>总算是把Hexo给弄好了。在这期间遇到了各种问题，网上有的教程也有点老了，这里就再写一篇。<strong>最新的教程</strong>可以去<a href=\"https://hexo.io/zh-cn/docs/index.html\">Hexo官网</a>查看。</p>\n</blockquote>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"安装Xcode\"><a href=\"#安装Xcode\" class=\"headerlink\" title=\"安装Xcode\"></a>安装Xcode</h3><p>Hexo的编译可能依赖Xcode。</p>\n<h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>Hexo是基于node.js的，所以要去<a href=\"https://nodejs.org/\">官网</a>上下载下来安装。版本可以选择稳定版(4.3.1)也可以选择最新版(5.7.0)。需要注意的是，Hexo 3.1.1测试的最低版本为0.12，所以安装的版本不要太旧，之前看到网上装的0.8.4的版本，我也这么装，结果有一大堆的报错。</p>\n<h3 id=\"注册Github账户\"><a href=\"#注册Github账户\" class=\"headerlink\" title=\"注册Github账户\"></a>注册Github账户</h3><p>在本地搭建好Hexo后可以将内容同步到github上，可以在网上浏览。可以去<a href=\"https://github.com/\">Github官网</a>上去注册，注册的过程我就不罗嗦了，具体的过程可以去<a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool\">这个页面</a>上跳到Github的那部分去看。其中配置SSH Keys的那部分，可以选择不配制，不配置的话以后每次提交的时候就需要手动输入账号密码，如果配置了的话就不需要了。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>因为安装包中有些内容在墙外，所以可以换<a href=\"http://npm.taobao.org/\">淘宝源</a>，或者用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli --no-optional</div></pre></td></tr></table></figure>\n<p>cd进入你要安装的目录，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/hexo</div></pre></td></tr></table></figure>\n<p>然后初始化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n<p>初始化好之后,执行安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>这样就已经安装完毕。</p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><h3 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h3><p>cd 到的目录，执行如下命令，生成静态页面至hexo\\public\\目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<h3 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h3><p>执行好上面的命令之后,开始启动本地服务。再执行下面的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo sever</div></pre></td></tr></table></figure>\n<p>看到 <em>INFO Hexo is running at <a href=\"http://0.0.0.0:4000/\">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</em><br>之后，就可以在浏览器中打开页面<a href=\"http://localhost:4000\">http://localhost:4000</a>来看了。</p>\n<h3 id=\"写文章\"><a href=\"#写文章\" class=\"headerlink\" title=\"写文章\"></a>写文章</h3><p>还是在你cd到的目录,执行new命令后,生成指定名称的文章至hexo\\source\\ _posts\\ blogName.md。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;blogName&quot;</div></pre></td></tr></table></figure>\n<p>blogName就是博客名。</p>\n<p>接下来，就可以用Markdown编辑器写你的文章了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">格式:</div><div class=\"line\">title: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中</div><div class=\"line\">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</div><div class=\"line\">categories: #文章分类目录，可以为空，注意:后面有个空格</div><div class=\"line\">tags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格</div><div class=\"line\">---</div><div class=\"line\">这里开始使用markdown格式输入你的正文。</div></pre></td></tr></table></figure>\n<h2 id=\"上传至Github\"><a href=\"#上传至Github\" class=\"headerlink\" title=\"上传至Github\"></a>上传至Github</h2><h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>在安装之前，首先我们要确认在你的Github帐号的Repository(仓库)中有 <strong>用户名.github.io</strong> 的项目。在确认之后，就可以执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<h2 id=\"配置账号\"><a href=\"#配置账号\" class=\"headerlink\" title=\"配置账号\"></a>配置账号</h2><h3 id=\"配置-config-yml-文件\"><a href=\"#配置-config-yml-文件\" class=\"headerlink\" title=\"配置 _config.yml 文件\"></a>配置 _config.yml 文件</h3><p>在Hexo安装的目录，如 <em>~/Document/hexo</em> 中找到 <strong>_config.yml</strong> 文件。打开。翻到最后，找到 <strong>deploy</strong> 字样，改成如下格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">    type: git </div><div class=\"line\">    repo: https://github.com/用户名/用户名.github.io.git </div><div class=\"line\">    branch: master</div></pre></td></tr></table></figure>\n<p>需要<strong>注意</strong>的是：冒号后面有一个空格；使用github可以不用写branch那一行。如果要使用多个 deployer，可改成如下样式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">- type: git </div><div class=\"line\">  repo:</div><div class=\"line\">- type: heroku </div><div class=\"line\">  repo:</div></pre></td></tr></table></figure>\n<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><h3 id=\"输入命令\"><a href=\"#输入命令\" class=\"headerlink\" title=\"输入命令\"></a>输入命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<p>执行,以后每次执行就可以依次输入下面三行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hero clean</div><div class=\"line\">hero generate</div><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"站点地图\"><a href=\"#站点地图\" class=\"headerlink\" title=\"站点地图\"></a>站点地图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>\n<p>生成的sitemap.xml可以给搜索引擎收录使用。<br>如果要生成百度的sitemap，使用以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>\n<h3 id=\"RSS订阅\"><a href=\"#RSS订阅\" class=\"headerlink\" title=\"RSS订阅\"></a>RSS订阅</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-feed@1.0.3 --save</div></pre></td></tr></table></figure>\n<h2 id=\"主题更改\"><a href=\"#主题更改\" class=\"headerlink\" title=\"主题更改\"></a>主题更改</h2><p><a href=\"http://hexo.io/\">Hexo</a>提供了官网的主题, 初始化hexo时也会自动生成一个主题, Hexo还支持个性定制主题, 可以根据自己的喜好对主题进行修改, <a href=\"https://github.com/hexojs/hexo/wiki/Themes\">更多主题</a>可以在官网中找到</p>\n<p>个性化博客的设置在博客的根目录下对喜爱的主题进行主题进行克隆</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git@github.com:yunlzheng/hexo-themes.git themes/writing</div><div class=\"line\">#在./_config.yml，修改主题为writingtheme: writing</div><div class=\"line\">#查看本地效果</div><div class=\"line\">hexo g #hero generate简写</div><div class=\"line\">hexo s #hexo server简写</div></pre></td></tr></table></figure>\n<h3 id=\"安装主题的方法就是一句git命令：\"><a href=\"#安装主题的方法就是一句git命令：\" class=\"headerlink\" title=\"安装主题的方法就是一句git命令：\"></a>安装主题的方法就是一句git命令：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/xx/hexo-theme-xxxx.git themes/xxxx</div></pre></td></tr></table></figure>\n<p>目录是否是什么无所谓，只要与_config.yml文件一致即可。</p>\n<p>安装完成后，打开hexo_config.yml，修改主题为指定的主题名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: xxxx</div></pre></td></tr></table></figure>\n<p>打开hexo\\themes\\xxxx目录，编辑主题配置文件_config.yml：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu: #配置页头显示哪些菜单</div><div class=\"line\">#  Home: /</div><div class=\"line\">  Archives: /archives</div><div class=\"line\">  Reading: /reading</div><div class=\"line\">  About: /about</div><div class=\"line\">#  Guestbook: /about</div><div class=\"line\"></div><div class=\"line\">excerpt_link: Read More #摘要链接文字</div><div class=\"line\">archive_yearly: false #按年存档</div><div class=\"line\"></div><div class=\"line\">widgets: #配置页脚显示哪些小挂件</div><div class=\"line\">  - category</div><div class=\"line\">#  - tag</div><div class=\"line\">  - tagcloud</div><div class=\"line\">  - recent_posts</div><div class=\"line\">#  - blogroll</div><div class=\"line\"></div><div class=\"line\">blogrolls: #友情链接</div><div class=\"line\">  - bruce sha&apos;s duapp wordpress: http://ibruce.duapp.com</div><div class=\"line\">  - bruce sha&apos;s javaeye: http://buru.iteye.com</div><div class=\"line\">  - bruce sha&apos;s oschina blog: http://my.oschina.net/buru</div><div class=\"line\">  - bruce sha&apos;s baidu space: http://hi.baidu.com/iburu</div><div class=\"line\"></div><div class=\"line\">fancybox: true #是否开启fancybox效果</div><div class=\"line\"></div><div class=\"line\">duoshuo_shortname: buru #多说账号</div><div class=\"line\"></div><div class=\"line\">google_analytics:</div><div class=\"line\">rss:</div></pre></td></tr></table></figure>\n<h3 id=\"更新hero\"><a href=\"#更新hero\" class=\"headerlink\" title=\"更新hero\"></a>更新hero</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update -g hero</div></pre></td></tr></table></figure>\n<h3 id=\"更新主题\"><a href=\"#更新主题\" class=\"headerlink\" title=\"更新主题\"></a>更新主题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd themes/modernist</div><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n<h3 id=\"更新插件：\"><a href=\"#更新插件：\" class=\"headerlink\" title=\"更新插件：\"></a>更新插件：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update</div></pre></td></tr></table></figure>\n<p>在Mac下通过HEXO在Github上搭建博客<br><a href=\"http://www.jianshu.com/p/ecd51e8ef2fa\">http://www.jianshu.com/p/ecd51e8ef2fa</a></p>\n<p>hexo你的博客:<br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool\">http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool</a></p>\n<p>HEXO+Github,搭建属于自己的博客:<br><a href=\"http://www.jianshu.com/p/465830080ea9\">http://www.jianshu.com/p/465830080ea9</a></p>\n<p>通过Hexo在Github上搭建博客教程:<br><a href=\"http://www.jianshu.com/p/858ecf233db9\">http://www.jianshu.com/p/858ecf233db9</a></p>\n<p>使用Hexo搭建博客（四），博客的部件和插件:<br><a href=\"http://www.jianshu.com/p/739bf1305e66\">http://www.jianshu.com/p/739bf1305e66</a></p>\n"},{"title":"Node之Package.json文件参数解析","date":"2017-02-13T06:12:00.000Z","_content":"\n参考JavaScript 标准参考教程（alpha）http://javascript.ruanyifeng.com/nodejs/packagejson.html#toc0\n### 概述\n* package.json在Node项目中用于描述项目的一些基本信息，以及依赖库的配置，一般每一个Node项目的根目录下都有一个package.json文件。\n* 在项目的根目录中package.json文件可以手工编写，也可以使用npm init命令自动生成，其内容是一个Json对象。\n\n```\nnpm init\n```\n基本结构如下：\n\n```\n{\n  \"name\": \"package\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"babel-cli\": \"^6.23.0\",\n    \"babel-preset-env\": \"^1.1.8\",\n    \"hexo\": \"^3.2.0\",\n    \"immutable\": \"^3.8.1\",\n    \"iflux\": \"^1.2.16\"\n  },\n  \"devDependencies\": {},\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n### scripts字段\n参考文献npm scripts 使用指南 By阮一峰\nhttp://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\nscripts的每一个属性，对应一段脚本。是指定了运行脚本命令的npm命令行缩写，比如start 属性指定了运行npm run start时，所要执行的命令。\n\n```\nnpm run start\n# 等同于执行\nnode index.js\n```\n下面的设置指定了npm run preinstall、npm run postinstall、npm run start、npm run test时，所要执行的命令。\n\n```\n\"scripts\": {\n    \"preinstall\": \"echo here it comes!\",\n    \"postinstall\": \"echo there it goes!\",\n    \"start\": \"node index.js\",\n    \"test\": \"tap test/*.js\"\n}\n```\n\n\n### dependencies字段，devDependencies字段\n\ndependencies字段指定了项目运行所依赖的模块，devDependencies指定项目开发所需要的模块。\n\n它们都指向一个对象。该对象的各个成员，分别由模块名和对应的版本要求组成，表示依赖的模块及其版本范围。\n\n```\n{\n  \"devDependencies\": {\n    \"browserify\": \"~13.0.0\",\n    \"karma-browserify\": \"~5.0.1\"\n  }\n}\n```\n* 指定版本：比如1.2.2，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版本。\n* 波浪号（tilde）+指定版本：比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。\n* 插入号（caret）+指定版本：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。\n* latest：安装最新版本。\n\n\n安装所需要的模块吗，直接使用npm install命令。\n\n```\nnpm install XXXX\n```\n\n如果一个模块不在package.json文件之中，可以单独安装这个模块，并使用相应的参数，将其写入package.json文件之中。\n\n```\nnpm install express --save\n\nnpm install express --save-dev\n```\n上面代码表示单独安装express模块，\n--save     表示将该模块写入dependencies属性，\n--save-dev 表示将该模块写入devDependencies属性。\n\n","source":"_posts/Node之package-json文件解析.md","raw":"---\ntitle: Node之Package.json文件参数解析\ndate: 2017-02-13 14:12:00\ncategories:\n    - Node\ntags:\n    - Node\n    - JavaScript\n---\n\n参考JavaScript 标准参考教程（alpha）http://javascript.ruanyifeng.com/nodejs/packagejson.html#toc0\n### 概述\n* package.json在Node项目中用于描述项目的一些基本信息，以及依赖库的配置，一般每一个Node项目的根目录下都有一个package.json文件。\n* 在项目的根目录中package.json文件可以手工编写，也可以使用npm init命令自动生成，其内容是一个Json对象。\n\n```\nnpm init\n```\n基本结构如下：\n\n```\n{\n  \"name\": \"package\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"babel-cli\": \"^6.23.0\",\n    \"babel-preset-env\": \"^1.1.8\",\n    \"hexo\": \"^3.2.0\",\n    \"immutable\": \"^3.8.1\",\n    \"iflux\": \"^1.2.16\"\n  },\n  \"devDependencies\": {},\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n### scripts字段\n参考文献npm scripts 使用指南 By阮一峰\nhttp://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\nscripts的每一个属性，对应一段脚本。是指定了运行脚本命令的npm命令行缩写，比如start 属性指定了运行npm run start时，所要执行的命令。\n\n```\nnpm run start\n# 等同于执行\nnode index.js\n```\n下面的设置指定了npm run preinstall、npm run postinstall、npm run start、npm run test时，所要执行的命令。\n\n```\n\"scripts\": {\n    \"preinstall\": \"echo here it comes!\",\n    \"postinstall\": \"echo there it goes!\",\n    \"start\": \"node index.js\",\n    \"test\": \"tap test/*.js\"\n}\n```\n\n\n### dependencies字段，devDependencies字段\n\ndependencies字段指定了项目运行所依赖的模块，devDependencies指定项目开发所需要的模块。\n\n它们都指向一个对象。该对象的各个成员，分别由模块名和对应的版本要求组成，表示依赖的模块及其版本范围。\n\n```\n{\n  \"devDependencies\": {\n    \"browserify\": \"~13.0.0\",\n    \"karma-browserify\": \"~5.0.1\"\n  }\n}\n```\n* 指定版本：比如1.2.2，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版本。\n* 波浪号（tilde）+指定版本：比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。\n* 插入号（caret）+指定版本：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。\n* latest：安装最新版本。\n\n\n安装所需要的模块吗，直接使用npm install命令。\n\n```\nnpm install XXXX\n```\n\n如果一个模块不在package.json文件之中，可以单独安装这个模块，并使用相应的参数，将其写入package.json文件之中。\n\n```\nnpm install express --save\n\nnpm install express --save-dev\n```\n上面代码表示单独安装express模块，\n--save     表示将该模块写入dependencies属性，\n--save-dev 表示将该模块写入devDependencies属性。\n\n","slug":"Node之package-json文件解析","published":1,"updated":"2017-03-16T04:56:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0c1v88x0009ksfyxhibmagu","content":"<p>参考JavaScript 标准参考教程（alpha）<a href=\"http://javascript.ruanyifeng.com/nodejs/packagejson.html#toc0\" target=\"_blank\" rel=\"external\">http://javascript.ruanyifeng.com/nodejs/packagejson.html#toc0</a></p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>package.json在Node项目中用于描述项目的一些基本信息，以及依赖库的配置，一般每一个Node项目的根目录下都有一个package.json文件。</li>\n<li>在项目的根目录中package.json文件可以手工编写，也可以使用npm init命令自动生成，其内容是一个Json对象。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<p>基本结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;name&quot;: &quot;package&quot;,</div><div class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class=\"line\">  &quot;description&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</div><div class=\"line\">  &quot;dependencies&quot;: &#123;</div><div class=\"line\">    &quot;babel-cli&quot;: &quot;^6.23.0&quot;,</div><div class=\"line\">    &quot;babel-preset-env&quot;: &quot;^1.1.8&quot;,</div><div class=\"line\">    &quot;hexo&quot;: &quot;^3.2.0&quot;,</div><div class=\"line\">    &quot;immutable&quot;: &quot;^3.8.1&quot;,</div><div class=\"line\">    &quot;iflux&quot;: &quot;^1.2.16&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;devDependencies&quot;: &#123;&#125;,</div><div class=\"line\">  &quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;author&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;license&quot;: &quot;ISC&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"scripts字段\"><a href=\"#scripts字段\" class=\"headerlink\" title=\"scripts字段\"></a>scripts字段</h3><p>参考文献npm scripts 使用指南 By阮一峰<br><a href=\"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html</a><br>scripts的每一个属性，对应一段脚本。是指定了运行脚本命令的npm命令行缩写，比如start 属性指定了运行npm run start时，所要执行的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run start</div><div class=\"line\"># 等同于执行</div><div class=\"line\">node index.js</div></pre></td></tr></table></figure>\n<p>下面的设置指定了npm run preinstall、npm run postinstall、npm run start、npm run test时，所要执行的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;preinstall&quot;: &quot;echo here it comes!&quot;,</div><div class=\"line\">    &quot;postinstall&quot;: &quot;echo there it goes!&quot;,</div><div class=\"line\">    &quot;start&quot;: &quot;node index.js&quot;,</div><div class=\"line\">    &quot;test&quot;: &quot;tap test/*.js&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"dependencies字段，devDependencies字段\"><a href=\"#dependencies字段，devDependencies字段\" class=\"headerlink\" title=\"dependencies字段，devDependencies字段\"></a>dependencies字段，devDependencies字段</h3><p>dependencies字段指定了项目运行所依赖的模块，devDependencies指定项目开发所需要的模块。</p>\n<p>它们都指向一个对象。该对象的各个成员，分别由模块名和对应的版本要求组成，表示依赖的模块及其版本范围。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;devDependencies&quot;: &#123;</div><div class=\"line\">    &quot;browserify&quot;: &quot;~13.0.0&quot;,</div><div class=\"line\">    &quot;karma-browserify&quot;: &quot;~5.0.1&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>指定版本：比如1.2.2，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版本。</li>\n<li>波浪号（tilde）+指定版本：比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。</li>\n<li>插入号（caret）+指定版本：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</li>\n<li>latest：安装最新版本。</li>\n</ul>\n<p>安装所需要的模块吗，直接使用npm install命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install XXXX</div></pre></td></tr></table></figure>\n<p>如果一个模块不在package.json文件之中，可以单独安装这个模块，并使用相应的参数，将其写入package.json文件之中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express --save</div><div class=\"line\"></div><div class=\"line\">npm install express --save-dev</div></pre></td></tr></table></figure>\n<p>上面代码表示单独安装express模块，<br>–save     表示将该模块写入dependencies属性，<br>–save-dev 表示将该模块写入devDependencies属性。</p>\n","excerpt":"","more":"<p>参考JavaScript 标准参考教程（alpha）<a href=\"http://javascript.ruanyifeng.com/nodejs/packagejson.html#toc0\">http://javascript.ruanyifeng.com/nodejs/packagejson.html#toc0</a></p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>package.json在Node项目中用于描述项目的一些基本信息，以及依赖库的配置，一般每一个Node项目的根目录下都有一个package.json文件。</li>\n<li>在项目的根目录中package.json文件可以手工编写，也可以使用npm init命令自动生成，其内容是一个Json对象。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<p>基本结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;name&quot;: &quot;package&quot;,</div><div class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class=\"line\">  &quot;description&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</div><div class=\"line\">  &quot;dependencies&quot;: &#123;</div><div class=\"line\">    &quot;babel-cli&quot;: &quot;^6.23.0&quot;,</div><div class=\"line\">    &quot;babel-preset-env&quot;: &quot;^1.1.8&quot;,</div><div class=\"line\">    &quot;hexo&quot;: &quot;^3.2.0&quot;,</div><div class=\"line\">    &quot;immutable&quot;: &quot;^3.8.1&quot;,</div><div class=\"line\">    &quot;iflux&quot;: &quot;^1.2.16&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;devDependencies&quot;: &#123;&#125;,</div><div class=\"line\">  &quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;author&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;license&quot;: &quot;ISC&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"scripts字段\"><a href=\"#scripts字段\" class=\"headerlink\" title=\"scripts字段\"></a>scripts字段</h3><p>参考文献npm scripts 使用指南 By阮一峰<br><a href=\"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\">http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html</a><br>scripts的每一个属性，对应一段脚本。是指定了运行脚本命令的npm命令行缩写，比如start 属性指定了运行npm run start时，所要执行的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run start</div><div class=\"line\"># 等同于执行</div><div class=\"line\">node index.js</div></pre></td></tr></table></figure>\n<p>下面的设置指定了npm run preinstall、npm run postinstall、npm run start、npm run test时，所要执行的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;preinstall&quot;: &quot;echo here it comes!&quot;,</div><div class=\"line\">    &quot;postinstall&quot;: &quot;echo there it goes!&quot;,</div><div class=\"line\">    &quot;start&quot;: &quot;node index.js&quot;,</div><div class=\"line\">    &quot;test&quot;: &quot;tap test/*.js&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"dependencies字段，devDependencies字段\"><a href=\"#dependencies字段，devDependencies字段\" class=\"headerlink\" title=\"dependencies字段，devDependencies字段\"></a>dependencies字段，devDependencies字段</h3><p>dependencies字段指定了项目运行所依赖的模块，devDependencies指定项目开发所需要的模块。</p>\n<p>它们都指向一个对象。该对象的各个成员，分别由模块名和对应的版本要求组成，表示依赖的模块及其版本范围。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;devDependencies&quot;: &#123;</div><div class=\"line\">    &quot;browserify&quot;: &quot;~13.0.0&quot;,</div><div class=\"line\">    &quot;karma-browserify&quot;: &quot;~5.0.1&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>指定版本：比如1.2.2，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版本。</li>\n<li>波浪号（tilde）+指定版本：比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。</li>\n<li>插入号（caret）+指定版本：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</li>\n<li>latest：安装最新版本。</li>\n</ul>\n<p>安装所需要的模块吗，直接使用npm install命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install XXXX</div></pre></td></tr></table></figure>\n<p>如果一个模块不在package.json文件之中，可以单独安装这个模块，并使用相应的参数，将其写入package.json文件之中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express --save</div><div class=\"line\"></div><div class=\"line\">npm install express --save-dev</div></pre></td></tr></table></figure>\n<p>上面代码表示单独安装express模块，<br>–save     表示将该模块写入dependencies属性，<br>–save-dev 表示将该模块写入devDependencies属性。</p>\n"},{"title":"Mac环境更改shell自定义终端-oh my zsh安装及配置","date":"2017-02-25T03:00:26.000Z","_content":"\n## 安装oh my zsh:\n1.克隆这个项目到本地（根路径 ~）\n\n```\ngit clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\n```\n\n2.创建一个zsh的配置文件\n\n注意:如果你已经有一个~/.zshrc文件的话，建议你先做备份。\n\n* 备份配置文件\n\n```\ncp ~/.zshrc ~/.zshrc.orig\n```\n\n* 然后开始创建zsh的配置文件\n\n```\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n```\n    \n3.查看系统内置了几种shell\n\n```\ncat /etc/shells\n```\n\n4.设置zsh为你的默认的shell\n   \n```\nchsh -s /bin/zsh\n```\n\n5.重启终端\n\n## 更改zsh主题:\n\n1.编辑 ~/.zshrc\n\n2.修改主题\nPs：主题文件在 ~/.oh-my-zsh/themes 目录\n\n```\nZSH_THEME=\"ys\"\n```\n\n\n\n\n","source":"_posts/Mac环境更改shell自定义终端-oh-my-zsh安装及配置.md","raw":"---\ntitle: Mac环境更改shell自定义终端-oh my zsh安装及配置\ndate: 2017-02-25 11:00:26\ncategories:\n    - Mac\ntags: \n    - Mac\n    - 进阶\n---\n\n## 安装oh my zsh:\n1.克隆这个项目到本地（根路径 ~）\n\n```\ngit clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\n```\n\n2.创建一个zsh的配置文件\n\n注意:如果你已经有一个~/.zshrc文件的话，建议你先做备份。\n\n* 备份配置文件\n\n```\ncp ~/.zshrc ~/.zshrc.orig\n```\n\n* 然后开始创建zsh的配置文件\n\n```\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n```\n    \n3.查看系统内置了几种shell\n\n```\ncat /etc/shells\n```\n\n4.设置zsh为你的默认的shell\n   \n```\nchsh -s /bin/zsh\n```\n\n5.重启终端\n\n## 更改zsh主题:\n\n1.编辑 ~/.zshrc\n\n2.修改主题\nPs：主题文件在 ~/.oh-my-zsh/themes 目录\n\n```\nZSH_THEME=\"ys\"\n```\n\n\n\n\n","slug":"Mac环境更改shell自定义终端-oh-my-zsh安装及配置","published":1,"updated":"2017-03-16T04:55:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0c1v891000bksfy4kgoeznc","content":"<h2 id=\"安装oh-my-zsh\"><a href=\"#安装oh-my-zsh\" class=\"headerlink\" title=\"安装oh my zsh:\"></a>安装oh my zsh:</h2><p>1.克隆这个项目到本地（根路径 ~）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</div></pre></td></tr></table></figure>\n<p>2.创建一个zsh的配置文件</p>\n<p>注意:如果你已经有一个~/.zshrc文件的话，建议你先做备份。</p>\n<ul>\n<li>备份配置文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp ~/.zshrc ~/.zshrc.orig</div></pre></td></tr></table></figure>\n<ul>\n<li>然后开始创建zsh的配置文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</div></pre></td></tr></table></figure>\n<p>3.查看系统内置了几种shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/shells</div></pre></td></tr></table></figure>\n<p>4.设置zsh为你的默认的shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chsh -s /bin/zsh</div></pre></td></tr></table></figure>\n<p>5.重启终端</p>\n<h2 id=\"更改zsh主题\"><a href=\"#更改zsh主题\" class=\"headerlink\" title=\"更改zsh主题:\"></a>更改zsh主题:</h2><p>1.编辑 ~/.zshrc</p>\n<p>2.修改主题<br>Ps：主题文件在 ~/.oh-my-zsh/themes 目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZSH_THEME=&quot;ys&quot;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"安装oh-my-zsh\"><a href=\"#安装oh-my-zsh\" class=\"headerlink\" title=\"安装oh my zsh:\"></a>安装oh my zsh:</h2><p>1.克隆这个项目到本地（根路径 ~）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</div></pre></td></tr></table></figure>\n<p>2.创建一个zsh的配置文件</p>\n<p>注意:如果你已经有一个~/.zshrc文件的话，建议你先做备份。</p>\n<ul>\n<li>备份配置文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp ~/.zshrc ~/.zshrc.orig</div></pre></td></tr></table></figure>\n<ul>\n<li>然后开始创建zsh的配置文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</div></pre></td></tr></table></figure>\n<p>3.查看系统内置了几种shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/shells</div></pre></td></tr></table></figure>\n<p>4.设置zsh为你的默认的shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chsh -s /bin/zsh</div></pre></td></tr></table></figure>\n<p>5.重启终端</p>\n<h2 id=\"更改zsh主题\"><a href=\"#更改zsh主题\" class=\"headerlink\" title=\"更改zsh主题:\"></a>更改zsh主题:</h2><p>1.编辑 ~/.zshrc</p>\n<p>2.修改主题<br>Ps：主题文件在 ~/.oh-my-zsh/themes 目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZSH_THEME=&quot;ys&quot;</div></pre></td></tr></table></figure>\n"},{"title":"ReactNative学习-MAC集成环境","date":"2016-12-08T15:29:01.000Z","_content":">官网有更详细的集成步骤，这里只是根据个人需求写出简单实用的集成步骤。\n\n## 1.配置环境\n\n#### 按照HomeBrew\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n#### 安装Node.js\n```\nbrew install node\n```\n#### 替换npm仓库镜像源\n```\nnpm config set registry https://registry.npm.taobao.org --global\n\nnpm config set disturl https://npm.taobao.org/dist --global\n```\n#### 安装Watchman\nWatchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能\n\n```\nbrew install watchman\n```\n\n## 2.安装工具包\n\n#### 安装RN命令行工具包\n```\nnpm install -g yarn react-native-cli\n```\n\n遇到**EACCES: permission denied**权限报错，需要修复/usr/local目录的所有权：\n\n```\nsudo chown -R `whoami` /usr/local\n```\n\n\n## 3.创建React Native测试项目\n主要是需要 **cd** 到对应文件目录，再init， **”testProject“** 名字是自定义的\n\n```\nreact-native init testProject\n```\n#### 如果报错, 无法创建. 尝试使用使用下面的命令更新brew及对应的工具\n```\nbrew update\n\nbrew upgrade\n```\n\n#### 打开项目, 找到iOS文件夹中的工程文件运行即可\n\n","source":"_posts/ReactNative学习-MAC集成环境.md","raw":"---\ntitle: ReactNative学习-MAC集成环境\ndate: 2016-12-08 23:29:01\ncategories:\n    - ReactNative\ntags: \n  - React Native\n---\n>官网有更详细的集成步骤，这里只是根据个人需求写出简单实用的集成步骤。\n\n## 1.配置环境\n\n#### 按照HomeBrew\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n#### 安装Node.js\n```\nbrew install node\n```\n#### 替换npm仓库镜像源\n```\nnpm config set registry https://registry.npm.taobao.org --global\n\nnpm config set disturl https://npm.taobao.org/dist --global\n```\n#### 安装Watchman\nWatchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能\n\n```\nbrew install watchman\n```\n\n## 2.安装工具包\n\n#### 安装RN命令行工具包\n```\nnpm install -g yarn react-native-cli\n```\n\n遇到**EACCES: permission denied**权限报错，需要修复/usr/local目录的所有权：\n\n```\nsudo chown -R `whoami` /usr/local\n```\n\n\n## 3.创建React Native测试项目\n主要是需要 **cd** 到对应文件目录，再init， **”testProject“** 名字是自定义的\n\n```\nreact-native init testProject\n```\n#### 如果报错, 无法创建. 尝试使用使用下面的命令更新brew及对应的工具\n```\nbrew update\n\nbrew upgrade\n```\n\n#### 打开项目, 找到iOS文件夹中的工程文件运行即可\n\n","slug":"ReactNative学习-MAC集成环境","published":1,"updated":"2017-03-16T04:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0c1v893000dksfylq2bbqdi","content":"<blockquote>\n<p>官网有更详细的集成步骤，这里只是根据个人需求写出简单实用的集成步骤。</p>\n</blockquote>\n<h2 id=\"1-配置环境\"><a href=\"#1-配置环境\" class=\"headerlink\" title=\"1.配置环境\"></a>1.配置环境</h2><h4 id=\"按照HomeBrew\"><a href=\"#按照HomeBrew\" class=\"headerlink\" title=\"按照HomeBrew\"></a>按照HomeBrew</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>\n<h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install node</div></pre></td></tr></table></figure>\n<h4 id=\"替换npm仓库镜像源\"><a href=\"#替换npm仓库镜像源\" class=\"headerlink\" title=\"替换npm仓库镜像源\"></a>替换npm仓库镜像源</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config set registry https://registry.npm.taobao.org --global</div><div class=\"line\"></div><div class=\"line\">npm config set disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>\n<h4 id=\"安装Watchman\"><a href=\"#安装Watchman\" class=\"headerlink\" title=\"安装Watchman\"></a>安装Watchman</h4><p>Watchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install watchman</div></pre></td></tr></table></figure>\n<h2 id=\"2-安装工具包\"><a href=\"#2-安装工具包\" class=\"headerlink\" title=\"2.安装工具包\"></a>2.安装工具包</h2><h4 id=\"安装RN命令行工具包\"><a href=\"#安装RN命令行工具包\" class=\"headerlink\" title=\"安装RN命令行工具包\"></a>安装RN命令行工具包</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g yarn react-native-cli</div></pre></td></tr></table></figure>\n<p>遇到<strong>EACCES: permission denied</strong>权限报错，需要修复/usr/local目录的所有权：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chown -R `whoami` /usr/local</div></pre></td></tr></table></figure>\n<h2 id=\"3-创建React-Native测试项目\"><a href=\"#3-创建React-Native测试项目\" class=\"headerlink\" title=\"3.创建React Native测试项目\"></a>3.创建React Native测试项目</h2><p>主要是需要 <strong>cd</strong> 到对应文件目录，再init， <strong>”testProject“</strong> 名字是自定义的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-native init testProject</div></pre></td></tr></table></figure>\n<h4 id=\"如果报错-无法创建-尝试使用使用下面的命令更新brew及对应的工具\"><a href=\"#如果报错-无法创建-尝试使用使用下面的命令更新brew及对应的工具\" class=\"headerlink\" title=\"如果报错, 无法创建. 尝试使用使用下面的命令更新brew及对应的工具\"></a>如果报错, 无法创建. 尝试使用使用下面的命令更新brew及对应的工具</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew update</div><div class=\"line\"></div><div class=\"line\">brew upgrade</div></pre></td></tr></table></figure>\n<h4 id=\"打开项目-找到iOS文件夹中的工程文件运行即可\"><a href=\"#打开项目-找到iOS文件夹中的工程文件运行即可\" class=\"headerlink\" title=\"打开项目, 找到iOS文件夹中的工程文件运行即可\"></a>打开项目, 找到iOS文件夹中的工程文件运行即可</h4>","excerpt":"","more":"<blockquote>\n<p>官网有更详细的集成步骤，这里只是根据个人需求写出简单实用的集成步骤。</p>\n</blockquote>\n<h2 id=\"1-配置环境\"><a href=\"#1-配置环境\" class=\"headerlink\" title=\"1.配置环境\"></a>1.配置环境</h2><h4 id=\"按照HomeBrew\"><a href=\"#按照HomeBrew\" class=\"headerlink\" title=\"按照HomeBrew\"></a>按照HomeBrew</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>\n<h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install node</div></pre></td></tr></table></figure>\n<h4 id=\"替换npm仓库镜像源\"><a href=\"#替换npm仓库镜像源\" class=\"headerlink\" title=\"替换npm仓库镜像源\"></a>替换npm仓库镜像源</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config set registry https://registry.npm.taobao.org --global</div><div class=\"line\"></div><div class=\"line\">npm config set disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>\n<h4 id=\"安装Watchman\"><a href=\"#安装Watchman\" class=\"headerlink\" title=\"安装Watchman\"></a>安装Watchman</h4><p>Watchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install watchman</div></pre></td></tr></table></figure>\n<h2 id=\"2-安装工具包\"><a href=\"#2-安装工具包\" class=\"headerlink\" title=\"2.安装工具包\"></a>2.安装工具包</h2><h4 id=\"安装RN命令行工具包\"><a href=\"#安装RN命令行工具包\" class=\"headerlink\" title=\"安装RN命令行工具包\"></a>安装RN命令行工具包</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g yarn react-native-cli</div></pre></td></tr></table></figure>\n<p>遇到<strong>EACCES: permission denied</strong>权限报错，需要修复/usr/local目录的所有权：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chown -R `whoami` /usr/local</div></pre></td></tr></table></figure>\n<h2 id=\"3-创建React-Native测试项目\"><a href=\"#3-创建React-Native测试项目\" class=\"headerlink\" title=\"3.创建React Native测试项目\"></a>3.创建React Native测试项目</h2><p>主要是需要 <strong>cd</strong> 到对应文件目录，再init， <strong>”testProject“</strong> 名字是自定义的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-native init testProject</div></pre></td></tr></table></figure>\n<h4 id=\"如果报错-无法创建-尝试使用使用下面的命令更新brew及对应的工具\"><a href=\"#如果报错-无法创建-尝试使用使用下面的命令更新brew及对应的工具\" class=\"headerlink\" title=\"如果报错, 无法创建. 尝试使用使用下面的命令更新brew及对应的工具\"></a>如果报错, 无法创建. 尝试使用使用下面的命令更新brew及对应的工具</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew update</div><div class=\"line\"></div><div class=\"line\">brew upgrade</div></pre></td></tr></table></figure>\n<h4 id=\"打开项目-找到iOS文件夹中的工程文件运行即可\"><a href=\"#打开项目-找到iOS文件夹中的工程文件运行即可\" class=\"headerlink\" title=\"打开项目, 找到iOS文件夹中的工程文件运行即可\"></a>打开项目, 找到iOS文件夹中的工程文件运行即可</h4>"},{"title":"ReactNative学习-state与props介绍与比较","date":"2017-02-28T12:33:33.000Z","_content":"\n## State\n* state的作用\n\nstate是React中组件的一个对象.React把用户界面当做是状态机,想象它有不同的状态然后渲染这些状态,可以轻松让用户界面与数据保持一致.\n\nReact中,更新组件的state,会导致重新渲染用户界面(不要操作DOM).简单来说,就是用户界面会随着state变化而变化.\n\n* state工作原理\n\n常用的通知React数据变化的方法是调用setState(data,callback).这个方法会合并data到this.state,并重新渲染组件.渲染完成后,调用可选的callback回调.大部分情况不需要提供callback,因为React会负责吧界面更新到最新状态.\n\n* 那些组件应该有state?\n\n大部分组件的工作应该是从props里取数据并渲染出来.但是,有时需要对用户输入,服务器请求或者时间变化等作出响应,这时才需要state.\n\n组件应该尽可能的无状态化,这样能隔离state,把它放到最合理的地方(Redux做的就是这个事情?),也能减少冗余并易于解释程序运作过程.\n\n常用的模式就是创建多个只负责渲染数据的无状态(stateless)组件,在他们的上层创建一个有状态(stateful)组件并把它的状态通过props传给子级.有状态的组件封装了所有的用户交互逻辑,而这些无状态组件只负责声明式地渲染数据.\n\n* 哪些应该作为state?\n\nstate应该包括那些可能被组件的事件处理器改变并触发用户界面更新的数据.这中数据一般很小且能被JSON序列化.当创建一个状态化的组件的时候,应该保持数据的精简,然后存入this.state.在render()中在根据state来计算需要的其他数据.因为如果在state里添加冗余数据或计算所得数据,经常需要手动保持数据同步.\n\n* 那些不应该作为state?\n\nthis.state应该仅包括能表示用户界面状态所需要的最少数据.因此,不应该包括:\n\n计算所得数据:\n\nReact组件:在render()里使用props和state来创建它.\n\n基于props的重复数据:尽可能保持用props来做作为唯一的数据来源.把props保存到state中的有效的场景是需要知道它以前的值得时候,因为未来的props可能会变化.\n\n\n\n## props\n\n* props的作用\n\n组件中的props是一种父级向子级传递数据的方式.\n\n* 复合组件\n\n```\nvar Avatar = React.createClass({\n 2   render: function() {\n 3     return (\n 4       <div>\n 5         <ProfilePic username={this.props.username} />\n 6         <ProfileLink username={this.props.username} />\n 7       </div>\n 8     );\n 9   }\n10 });\n11 \n12 var ProfilePic = React.createClass({\n13   render: function() {\n14     return (\n15       <img src={'http://graph.facebook.com/' + this.props.username + '/picture'} />\n16     );\n17   }\n18 });\n19 \n20 var ProfileLink = React.createClass({\n21   render: function() {\n22     return (\n23       <a href={'http://www.facebook.com/' + this.props.username}>\n24         {this.props.username}\n25       </a>\n26     );\n27   }\n28 });\n29 \n30 React.render(\n31   <Avatar username=\"pwh\" />,\n32   document.getElementById('example')\n33 );\n```\n\n\n","source":"_posts/ReactNative学习-state与props介绍与比较.md","raw":"---\ntitle: ReactNative学习-state与props介绍与比较\ndate: 2017-02-28 20:33:33\ncategories:\n    - ReactNative\ntags: \n    - ReactNative\n    - React\n    - JavaScript\n---\n\n## State\n* state的作用\n\nstate是React中组件的一个对象.React把用户界面当做是状态机,想象它有不同的状态然后渲染这些状态,可以轻松让用户界面与数据保持一致.\n\nReact中,更新组件的state,会导致重新渲染用户界面(不要操作DOM).简单来说,就是用户界面会随着state变化而变化.\n\n* state工作原理\n\n常用的通知React数据变化的方法是调用setState(data,callback).这个方法会合并data到this.state,并重新渲染组件.渲染完成后,调用可选的callback回调.大部分情况不需要提供callback,因为React会负责吧界面更新到最新状态.\n\n* 那些组件应该有state?\n\n大部分组件的工作应该是从props里取数据并渲染出来.但是,有时需要对用户输入,服务器请求或者时间变化等作出响应,这时才需要state.\n\n组件应该尽可能的无状态化,这样能隔离state,把它放到最合理的地方(Redux做的就是这个事情?),也能减少冗余并易于解释程序运作过程.\n\n常用的模式就是创建多个只负责渲染数据的无状态(stateless)组件,在他们的上层创建一个有状态(stateful)组件并把它的状态通过props传给子级.有状态的组件封装了所有的用户交互逻辑,而这些无状态组件只负责声明式地渲染数据.\n\n* 哪些应该作为state?\n\nstate应该包括那些可能被组件的事件处理器改变并触发用户界面更新的数据.这中数据一般很小且能被JSON序列化.当创建一个状态化的组件的时候,应该保持数据的精简,然后存入this.state.在render()中在根据state来计算需要的其他数据.因为如果在state里添加冗余数据或计算所得数据,经常需要手动保持数据同步.\n\n* 那些不应该作为state?\n\nthis.state应该仅包括能表示用户界面状态所需要的最少数据.因此,不应该包括:\n\n计算所得数据:\n\nReact组件:在render()里使用props和state来创建它.\n\n基于props的重复数据:尽可能保持用props来做作为唯一的数据来源.把props保存到state中的有效的场景是需要知道它以前的值得时候,因为未来的props可能会变化.\n\n\n\n## props\n\n* props的作用\n\n组件中的props是一种父级向子级传递数据的方式.\n\n* 复合组件\n\n```\nvar Avatar = React.createClass({\n 2   render: function() {\n 3     return (\n 4       <div>\n 5         <ProfilePic username={this.props.username} />\n 6         <ProfileLink username={this.props.username} />\n 7       </div>\n 8     );\n 9   }\n10 });\n11 \n12 var ProfilePic = React.createClass({\n13   render: function() {\n14     return (\n15       <img src={'http://graph.facebook.com/' + this.props.username + '/picture'} />\n16     );\n17   }\n18 });\n19 \n20 var ProfileLink = React.createClass({\n21   render: function() {\n22     return (\n23       <a href={'http://www.facebook.com/' + this.props.username}>\n24         {this.props.username}\n25       </a>\n26     );\n27   }\n28 });\n29 \n30 React.render(\n31   <Avatar username=\"pwh\" />,\n32   document.getElementById('example')\n33 );\n```\n\n\n","slug":"ReactNative学习-state与props介绍与比较","published":1,"updated":"2017-03-16T04:57:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0c1v896000fksfycmh6rtli","content":"<h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><ul>\n<li>state的作用</li>\n</ul>\n<p>state是React中组件的一个对象.React把用户界面当做是状态机,想象它有不同的状态然后渲染这些状态,可以轻松让用户界面与数据保持一致.</p>\n<p>React中,更新组件的state,会导致重新渲染用户界面(不要操作DOM).简单来说,就是用户界面会随着state变化而变化.</p>\n<ul>\n<li>state工作原理</li>\n</ul>\n<p>常用的通知React数据变化的方法是调用setState(data,callback).这个方法会合并data到this.state,并重新渲染组件.渲染完成后,调用可选的callback回调.大部分情况不需要提供callback,因为React会负责吧界面更新到最新状态.</p>\n<ul>\n<li>那些组件应该有state?</li>\n</ul>\n<p>大部分组件的工作应该是从props里取数据并渲染出来.但是,有时需要对用户输入,服务器请求或者时间变化等作出响应,这时才需要state.</p>\n<p>组件应该尽可能的无状态化,这样能隔离state,把它放到最合理的地方(Redux做的就是这个事情?),也能减少冗余并易于解释程序运作过程.</p>\n<p>常用的模式就是创建多个只负责渲染数据的无状态(stateless)组件,在他们的上层创建一个有状态(stateful)组件并把它的状态通过props传给子级.有状态的组件封装了所有的用户交互逻辑,而这些无状态组件只负责声明式地渲染数据.</p>\n<ul>\n<li>哪些应该作为state?</li>\n</ul>\n<p>state应该包括那些可能被组件的事件处理器改变并触发用户界面更新的数据.这中数据一般很小且能被JSON序列化.当创建一个状态化的组件的时候,应该保持数据的精简,然后存入this.state.在render()中在根据state来计算需要的其他数据.因为如果在state里添加冗余数据或计算所得数据,经常需要手动保持数据同步.</p>\n<ul>\n<li>那些不应该作为state?</li>\n</ul>\n<p>this.state应该仅包括能表示用户界面状态所需要的最少数据.因此,不应该包括:</p>\n<p>计算所得数据:</p>\n<p>React组件:在render()里使用props和state来创建它.</p>\n<p>基于props的重复数据:尽可能保持用props来做作为唯一的数据来源.把props保存到state中的有效的场景是需要知道它以前的值得时候,因为未来的props可能会变化.</p>\n<h2 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h2><ul>\n<li>props的作用</li>\n</ul>\n<p>组件中的props是一种父级向子级传递数据的方式.</p>\n<ul>\n<li>复合组件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Avatar = React.createClass(&#123;</div><div class=\"line\"> 2   render: function() &#123;</div><div class=\"line\"> 3     return (</div><div class=\"line\"> 4       &lt;div&gt;</div><div class=\"line\"> 5         &lt;ProfilePic username=&#123;this.props.username&#125; /&gt;</div><div class=\"line\"> 6         &lt;ProfileLink username=&#123;this.props.username&#125; /&gt;</div><div class=\"line\"> 7       &lt;/div&gt;</div><div class=\"line\"> 8     );</div><div class=\"line\"> 9   &#125;</div><div class=\"line\">10 &#125;);</div><div class=\"line\">11 </div><div class=\"line\">12 var ProfilePic = React.createClass(&#123;</div><div class=\"line\">13   render: function() &#123;</div><div class=\"line\">14     return (</div><div class=\"line\">15       &lt;img src=&#123;&apos;http://graph.facebook.com/&apos; + this.props.username + &apos;/picture&apos;&#125; /&gt;</div><div class=\"line\">16     );</div><div class=\"line\">17   &#125;</div><div class=\"line\">18 &#125;);</div><div class=\"line\">19 </div><div class=\"line\">20 var ProfileLink = React.createClass(&#123;</div><div class=\"line\">21   render: function() &#123;</div><div class=\"line\">22     return (</div><div class=\"line\">23       &lt;a href=&#123;&apos;http://www.facebook.com/&apos; + this.props.username&#125;&gt;</div><div class=\"line\">24         &#123;this.props.username&#125;</div><div class=\"line\">25       &lt;/a&gt;</div><div class=\"line\">26     );</div><div class=\"line\">27   &#125;</div><div class=\"line\">28 &#125;);</div><div class=\"line\">29 </div><div class=\"line\">30 React.render(</div><div class=\"line\">31   &lt;Avatar username=&quot;pwh&quot; /&gt;,</div><div class=\"line\">32   document.getElementById(&apos;example&apos;)</div><div class=\"line\">33 );</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><ul>\n<li>state的作用</li>\n</ul>\n<p>state是React中组件的一个对象.React把用户界面当做是状态机,想象它有不同的状态然后渲染这些状态,可以轻松让用户界面与数据保持一致.</p>\n<p>React中,更新组件的state,会导致重新渲染用户界面(不要操作DOM).简单来说,就是用户界面会随着state变化而变化.</p>\n<ul>\n<li>state工作原理</li>\n</ul>\n<p>常用的通知React数据变化的方法是调用setState(data,callback).这个方法会合并data到this.state,并重新渲染组件.渲染完成后,调用可选的callback回调.大部分情况不需要提供callback,因为React会负责吧界面更新到最新状态.</p>\n<ul>\n<li>那些组件应该有state?</li>\n</ul>\n<p>大部分组件的工作应该是从props里取数据并渲染出来.但是,有时需要对用户输入,服务器请求或者时间变化等作出响应,这时才需要state.</p>\n<p>组件应该尽可能的无状态化,这样能隔离state,把它放到最合理的地方(Redux做的就是这个事情?),也能减少冗余并易于解释程序运作过程.</p>\n<p>常用的模式就是创建多个只负责渲染数据的无状态(stateless)组件,在他们的上层创建一个有状态(stateful)组件并把它的状态通过props传给子级.有状态的组件封装了所有的用户交互逻辑,而这些无状态组件只负责声明式地渲染数据.</p>\n<ul>\n<li>哪些应该作为state?</li>\n</ul>\n<p>state应该包括那些可能被组件的事件处理器改变并触发用户界面更新的数据.这中数据一般很小且能被JSON序列化.当创建一个状态化的组件的时候,应该保持数据的精简,然后存入this.state.在render()中在根据state来计算需要的其他数据.因为如果在state里添加冗余数据或计算所得数据,经常需要手动保持数据同步.</p>\n<ul>\n<li>那些不应该作为state?</li>\n</ul>\n<p>this.state应该仅包括能表示用户界面状态所需要的最少数据.因此,不应该包括:</p>\n<p>计算所得数据:</p>\n<p>React组件:在render()里使用props和state来创建它.</p>\n<p>基于props的重复数据:尽可能保持用props来做作为唯一的数据来源.把props保存到state中的有效的场景是需要知道它以前的值得时候,因为未来的props可能会变化.</p>\n<h2 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h2><ul>\n<li>props的作用</li>\n</ul>\n<p>组件中的props是一种父级向子级传递数据的方式.</p>\n<ul>\n<li>复合组件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Avatar = React.createClass(&#123;</div><div class=\"line\"> 2   render: function() &#123;</div><div class=\"line\"> 3     return (</div><div class=\"line\"> 4       &lt;div&gt;</div><div class=\"line\"> 5         &lt;ProfilePic username=&#123;this.props.username&#125; /&gt;</div><div class=\"line\"> 6         &lt;ProfileLink username=&#123;this.props.username&#125; /&gt;</div><div class=\"line\"> 7       &lt;/div&gt;</div><div class=\"line\"> 8     );</div><div class=\"line\"> 9   &#125;</div><div class=\"line\">10 &#125;);</div><div class=\"line\">11 </div><div class=\"line\">12 var ProfilePic = React.createClass(&#123;</div><div class=\"line\">13   render: function() &#123;</div><div class=\"line\">14     return (</div><div class=\"line\">15       &lt;img src=&#123;&apos;http://graph.facebook.com/&apos; + this.props.username + &apos;/picture&apos;&#125; /&gt;</div><div class=\"line\">16     );</div><div class=\"line\">17   &#125;</div><div class=\"line\">18 &#125;);</div><div class=\"line\">19 </div><div class=\"line\">20 var ProfileLink = React.createClass(&#123;</div><div class=\"line\">21   render: function() &#123;</div><div class=\"line\">22     return (</div><div class=\"line\">23       &lt;a href=&#123;&apos;http://www.facebook.com/&apos; + this.props.username&#125;&gt;</div><div class=\"line\">24         &#123;this.props.username&#125;</div><div class=\"line\">25       &lt;/a&gt;</div><div class=\"line\">26     );</div><div class=\"line\">27   &#125;</div><div class=\"line\">28 &#125;);</div><div class=\"line\">29 </div><div class=\"line\">30 React.render(</div><div class=\"line\">31   &lt;Avatar username=&quot;pwh&quot; /&gt;,</div><div class=\"line\">32   document.getElementById(&apos;example&apos;)</div><div class=\"line\">33 );</div></pre></td></tr></table></figure>\n"},{"title":"ReactNative学习-什么是iflux?","date":"2017-03-03T12:44:29.000Z","_content":"\n### 什么是iflux ?\n\n*iflux = immutable.js + react.js*\n\n\n[![NPM](https://nodei.co/npm/iflux.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/iflux/)\n\n\n### 什么是React.js ?\n[React.js](http://facebook.github.io/react/)犹如Facebook的文化基因所强调的一样move fast and break things, 在快速前进中打破了很多我们对于web开发的固有认识。\n更厉害的是React把这种创新平移到移动开发(React native)实现了Learn once, Write everywhere.\n\n\n### React的特点。\n\n1. 强调组件化的开发方式（更高的抽象层次，更好的分离关注点）\n\n2. 声明式的开发风格（更好的表现力）\n\n3. 单向的数据流动（简单可预测）\n\n4. 超高性能的渲染60fps不是梦 （掌声在哪里？）\n\n5. 最大的创新源于virtual dom （以及virtual native）\n\n6. 轻量，可以在现有的系统中快速试错\n\n7. 精确的生命周期，更简单的整合第三方的库(jquery)\n\n\n### 关于更多\n\n因为React的定位就是轻量级高效组件式的view library，但是在我们实际的应用开发工程中不仅仅需要处理view的问题，更复杂的是对于状态的控制。\n官方的[flux](https://facebook.github.io/flux/docs/overview.html)架构提供了一个很好的针对React的架构指导，但是代码量很大。\n说到底flux就是在解决一个数据流向以及控制状态变化问题。这点om确实做的非常出色，\n借助于Clojure的数据的特性（1. 数据不可变 2. 持久化数据结构 3.共享数据结构）在不断的追寻下，immutable.js出现在了眼前，如获至宝。\n随着对immutable.js深入挖掘，发现正好契合了React的架构特点，可以使用Immutable很好的管理我们的Store，因为Immutable强调值语义，\n能够更好的追踪状态的变化(cursor)且带来了更好的性能。\n\n\n### 整体思路\n\n* 建议：优先选择connectToStore \n\n```\n+-----------------------+\n|       WebApi          |\n+-----------------------+\n          |  \n         \\|/\n+-----------------------+\n|   Store（immutable）   |<-----+\n+-----------------------+      |\n           | //es5的风格        |\n           | StoreMixin        | msg(EventEmitter)\n          \\|/                  |\n+------------------------+     |\n|     React App          |-----|\n+------------------------+\n|      <Layout>          |\n|        <SearchForm/>   |\n|        <Toolbar/>      |\n|        <DataGrid/>     |\n|       </Layout>        |\n+------------------------+\n```\n\n一个应用只有一个Store，单根数据源，单向数据流动，数据沉淀在顶层。\n且通过PureRenderMix可以获取更好的性能。简直就是为React私人定制一般。\n\n于是，顺其自然的写了iflux去更好的粘合React和immutable。\n\n整体思路：\n\n1. React只承担view应该承担的事情（1. 资料呈现 2. 用户交互） 不处理任何的业务逻辑，就是根据数据去渲染dom即可，这样view可以做的很轻。\n\n2. 应用的全部数据沉淀在一个Store中，当全部数据在顶层时，很多事情都变得简单，因为获取数据变得十分廉价。无论是校验和对数据的转换控制都变得非常简单。\n\n3. React只是取数据渲染，其他的比如状态的变化全部通过事件pubsub通知appstore去更新数据。如果状态不会影响其他组件的级联变化可以放在组件内部消化掉。\n\n4. 所有的ajax封装在webapi模块中，全部promise化。回调回来通过cursor更新store, cursor更新store， store通知React去rerender。\n\n5. 区分View component 和 pure component。\n\n\n\n### 如何使用?\n\n```sh\n\nmkdir hello\ncd hello\nnpm init\nnpm install react immutable iflux --save\nnpm install babel-loader --save-dev\n\n```\n\n```\n➜  iflux-demo  tree -L 3\n.\n├── apps                #we like django's app-style\n│   └── index           #app-name\n│       ├── index.js    #viewcontainer component\n│       ├── component   #collect of dump components\n│       ├── store.js    #immutable store\n│       └── webapi.js   #fetch remote resource\n├── node_modules\n├── package.json\n└── webpack.config.js\n\n5 directories, 4 files\n\n```\n\n### 例子\n\n```javascript\n//webapi.js\n\nexport const fetchGithub = (name) => {\n  return fetch(`http://github.com/${name}`)\n};\n\nexport default {\n  fetchGithub\n};\n\n\n//store.js\nimport { Store, msg } from 'iflux';\nimport { fromJS } from 'immutable';\nimport { fetchGithub } from './webapi';\n\nconst appStore = Store({\n  name: '',\n  githubInfo: {}\n});\n\nexports default appStore;\n\n//when use immutable's cursor to update store\n//react's view will auto re-render\nmsg.on('updateName', (name) => {\n  appStore.cursor().set('name', name);\n});\n\nmsg.on('submit', async () => {\n  const data = await fetchGithub(name);\n  appStore.cursor.set('githubInfo', fromJS(data));\n});\n\n\n//index.js\n\n//es5的样式\nimport React from 'react';\nimport {msg, mixins} from 'iflux';\nimport appStore from './store';\nconst {StoreMixin} = mixins;\n\n\nconst IfluxApp = React.createClass({\n  //自动将Store中的data混入到state\n  mixins: [StoreMixin(appStore)],\n\n  render() {\n    var store = appStore.data();\n\n    return (\n      <div>\n        <form onSubmit={this._submit}>\n            <input name=\"name\" onChange={this._handleChange}/>\n        </form>\n        <div>\n          {store.get('githubInfo')}\n        </div>\n      </div>\n    );\n  },\n\n  _handleChange(e) {\n    msg.emit('updateName', e.target.value);\n  },\n\n  _submit() {\n    msg.emit('getGithubInfo');\n  }\n});\n\n\n//es6的样式\nimport React from 'react';\nimport { msg, connectToStore } from 'iflux';\nimport appStore from './store';\n\nclass IfluxApp extends React.Component {\n  render() {\n    const {store} = this.props;\n\n    return (\n      <div>\n        <form onSubmit={this._submit}>\n            <input name=\"name\" onChange={this._handleChange}/>\n        </form>\n        <div>\n          {store.get('githubInfo')}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connectToStore(appStore)(IfluxApp);\n```\n\n\n","source":"_posts/ReactNative学习-什么是iflux.md","raw":"---\ntitle: ReactNative学习-什么是iflux?\ndate: 2017-03-03 20:44:29\ncategories:\n    - ReactNative\ntags: \n    - ReactNative\n    - React\n    - JavaScript\n---\n\n### 什么是iflux ?\n\n*iflux = immutable.js + react.js*\n\n\n[![NPM](https://nodei.co/npm/iflux.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/iflux/)\n\n\n### 什么是React.js ?\n[React.js](http://facebook.github.io/react/)犹如Facebook的文化基因所强调的一样move fast and break things, 在快速前进中打破了很多我们对于web开发的固有认识。\n更厉害的是React把这种创新平移到移动开发(React native)实现了Learn once, Write everywhere.\n\n\n### React的特点。\n\n1. 强调组件化的开发方式（更高的抽象层次，更好的分离关注点）\n\n2. 声明式的开发风格（更好的表现力）\n\n3. 单向的数据流动（简单可预测）\n\n4. 超高性能的渲染60fps不是梦 （掌声在哪里？）\n\n5. 最大的创新源于virtual dom （以及virtual native）\n\n6. 轻量，可以在现有的系统中快速试错\n\n7. 精确的生命周期，更简单的整合第三方的库(jquery)\n\n\n### 关于更多\n\n因为React的定位就是轻量级高效组件式的view library，但是在我们实际的应用开发工程中不仅仅需要处理view的问题，更复杂的是对于状态的控制。\n官方的[flux](https://facebook.github.io/flux/docs/overview.html)架构提供了一个很好的针对React的架构指导，但是代码量很大。\n说到底flux就是在解决一个数据流向以及控制状态变化问题。这点om确实做的非常出色，\n借助于Clojure的数据的特性（1. 数据不可变 2. 持久化数据结构 3.共享数据结构）在不断的追寻下，immutable.js出现在了眼前，如获至宝。\n随着对immutable.js深入挖掘，发现正好契合了React的架构特点，可以使用Immutable很好的管理我们的Store，因为Immutable强调值语义，\n能够更好的追踪状态的变化(cursor)且带来了更好的性能。\n\n\n### 整体思路\n\n* 建议：优先选择connectToStore \n\n```\n+-----------------------+\n|       WebApi          |\n+-----------------------+\n          |  \n         \\|/\n+-----------------------+\n|   Store（immutable）   |<-----+\n+-----------------------+      |\n           | //es5的风格        |\n           | StoreMixin        | msg(EventEmitter)\n          \\|/                  |\n+------------------------+     |\n|     React App          |-----|\n+------------------------+\n|      <Layout>          |\n|        <SearchForm/>   |\n|        <Toolbar/>      |\n|        <DataGrid/>     |\n|       </Layout>        |\n+------------------------+\n```\n\n一个应用只有一个Store，单根数据源，单向数据流动，数据沉淀在顶层。\n且通过PureRenderMix可以获取更好的性能。简直就是为React私人定制一般。\n\n于是，顺其自然的写了iflux去更好的粘合React和immutable。\n\n整体思路：\n\n1. React只承担view应该承担的事情（1. 资料呈现 2. 用户交互） 不处理任何的业务逻辑，就是根据数据去渲染dom即可，这样view可以做的很轻。\n\n2. 应用的全部数据沉淀在一个Store中，当全部数据在顶层时，很多事情都变得简单，因为获取数据变得十分廉价。无论是校验和对数据的转换控制都变得非常简单。\n\n3. React只是取数据渲染，其他的比如状态的变化全部通过事件pubsub通知appstore去更新数据。如果状态不会影响其他组件的级联变化可以放在组件内部消化掉。\n\n4. 所有的ajax封装在webapi模块中，全部promise化。回调回来通过cursor更新store, cursor更新store， store通知React去rerender。\n\n5. 区分View component 和 pure component。\n\n\n\n### 如何使用?\n\n```sh\n\nmkdir hello\ncd hello\nnpm init\nnpm install react immutable iflux --save\nnpm install babel-loader --save-dev\n\n```\n\n```\n➜  iflux-demo  tree -L 3\n.\n├── apps                #we like django's app-style\n│   └── index           #app-name\n│       ├── index.js    #viewcontainer component\n│       ├── component   #collect of dump components\n│       ├── store.js    #immutable store\n│       └── webapi.js   #fetch remote resource\n├── node_modules\n├── package.json\n└── webpack.config.js\n\n5 directories, 4 files\n\n```\n\n### 例子\n\n```javascript\n//webapi.js\n\nexport const fetchGithub = (name) => {\n  return fetch(`http://github.com/${name}`)\n};\n\nexport default {\n  fetchGithub\n};\n\n\n//store.js\nimport { Store, msg } from 'iflux';\nimport { fromJS } from 'immutable';\nimport { fetchGithub } from './webapi';\n\nconst appStore = Store({\n  name: '',\n  githubInfo: {}\n});\n\nexports default appStore;\n\n//when use immutable's cursor to update store\n//react's view will auto re-render\nmsg.on('updateName', (name) => {\n  appStore.cursor().set('name', name);\n});\n\nmsg.on('submit', async () => {\n  const data = await fetchGithub(name);\n  appStore.cursor.set('githubInfo', fromJS(data));\n});\n\n\n//index.js\n\n//es5的样式\nimport React from 'react';\nimport {msg, mixins} from 'iflux';\nimport appStore from './store';\nconst {StoreMixin} = mixins;\n\n\nconst IfluxApp = React.createClass({\n  //自动将Store中的data混入到state\n  mixins: [StoreMixin(appStore)],\n\n  render() {\n    var store = appStore.data();\n\n    return (\n      <div>\n        <form onSubmit={this._submit}>\n            <input name=\"name\" onChange={this._handleChange}/>\n        </form>\n        <div>\n          {store.get('githubInfo')}\n        </div>\n      </div>\n    );\n  },\n\n  _handleChange(e) {\n    msg.emit('updateName', e.target.value);\n  },\n\n  _submit() {\n    msg.emit('getGithubInfo');\n  }\n});\n\n\n//es6的样式\nimport React from 'react';\nimport { msg, connectToStore } from 'iflux';\nimport appStore from './store';\n\nclass IfluxApp extends React.Component {\n  render() {\n    const {store} = this.props;\n\n    return (\n      <div>\n        <form onSubmit={this._submit}>\n            <input name=\"name\" onChange={this._handleChange}/>\n        </form>\n        <div>\n          {store.get('githubInfo')}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connectToStore(appStore)(IfluxApp);\n```\n\n\n","slug":"ReactNative学习-什么是iflux","published":1,"updated":"2017-03-16T04:56:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0c1v899000kksfynsmvovj4","content":"<h3 id=\"什么是iflux\"><a href=\"#什么是iflux\" class=\"headerlink\" title=\"什么是iflux ?\"></a>什么是iflux ?</h3><p><em>iflux = immutable.js + react.js</em></p>\n<p><a href=\"https://nodei.co/npm/iflux/\" target=\"_blank\" rel=\"external\"><img src=\"https://nodei.co/npm/iflux.png?downloads=true&amp;downloadRank=true&amp;stars=true\" alt=\"NPM\"></a></p>\n<h3 id=\"什么是React-js\"><a href=\"#什么是React-js\" class=\"headerlink\" title=\"什么是React.js ?\"></a>什么是React.js ?</h3><p><a href=\"http://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React.js</a>犹如Facebook的文化基因所强调的一样move fast and break things, 在快速前进中打破了很多我们对于web开发的固有认识。<br>更厉害的是React把这种创新平移到移动开发(React native)实现了Learn once, Write everywhere.</p>\n<h3 id=\"React的特点。\"><a href=\"#React的特点。\" class=\"headerlink\" title=\"React的特点。\"></a>React的特点。</h3><ol>\n<li><p>强调组件化的开发方式（更高的抽象层次，更好的分离关注点）</p>\n</li>\n<li><p>声明式的开发风格（更好的表现力）</p>\n</li>\n<li><p>单向的数据流动（简单可预测）</p>\n</li>\n<li><p>超高性能的渲染60fps不是梦 （掌声在哪里？）</p>\n</li>\n<li><p>最大的创新源于virtual dom （以及virtual native）</p>\n</li>\n<li><p>轻量，可以在现有的系统中快速试错</p>\n</li>\n<li><p>精确的生命周期，更简单的整合第三方的库(jquery)</p>\n</li>\n</ol>\n<h3 id=\"关于更多\"><a href=\"#关于更多\" class=\"headerlink\" title=\"关于更多\"></a>关于更多</h3><p>因为React的定位就是轻量级高效组件式的view library，但是在我们实际的应用开发工程中不仅仅需要处理view的问题，更复杂的是对于状态的控制。<br>官方的<a href=\"https://facebook.github.io/flux/docs/overview.html\" target=\"_blank\" rel=\"external\">flux</a>架构提供了一个很好的针对React的架构指导，但是代码量很大。<br>说到底flux就是在解决一个数据流向以及控制状态变化问题。这点om确实做的非常出色，<br>借助于Clojure的数据的特性（1. 数据不可变 2. 持久化数据结构 3.共享数据结构）在不断的追寻下，immutable.js出现在了眼前，如获至宝。<br>随着对immutable.js深入挖掘，发现正好契合了React的架构特点，可以使用Immutable很好的管理我们的Store，因为Immutable强调值语义，<br>能够更好的追踪状态的变化(cursor)且带来了更好的性能。</p>\n<h3 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h3><ul>\n<li>建议：优先选择connectToStore </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">+-----------------------+</div><div class=\"line\">|       WebApi          |</div><div class=\"line\">+-----------------------+</div><div class=\"line\">          |  </div><div class=\"line\">         \\|/</div><div class=\"line\">+-----------------------+</div><div class=\"line\">|   Store（immutable）   |&lt;-----+</div><div class=\"line\">+-----------------------+      |</div><div class=\"line\">           | //es5的风格        |</div><div class=\"line\">           | StoreMixin        | msg(EventEmitter)</div><div class=\"line\">          \\|/                  |</div><div class=\"line\">+------------------------+     |</div><div class=\"line\">|     React App          |-----|</div><div class=\"line\">+------------------------+</div><div class=\"line\">|      &lt;Layout&gt;          |</div><div class=\"line\">|        &lt;SearchForm/&gt;   |</div><div class=\"line\">|        &lt;Toolbar/&gt;      |</div><div class=\"line\">|        &lt;DataGrid/&gt;     |</div><div class=\"line\">|       &lt;/Layout&gt;        |</div><div class=\"line\">+------------------------+</div></pre></td></tr></table></figure>\n<p>一个应用只有一个Store，单根数据源，单向数据流动，数据沉淀在顶层。<br>且通过PureRenderMix可以获取更好的性能。简直就是为React私人定制一般。</p>\n<p>于是，顺其自然的写了iflux去更好的粘合React和immutable。</p>\n<p>整体思路：</p>\n<ol>\n<li><p>React只承担view应该承担的事情（1. 资料呈现 2. 用户交互） 不处理任何的业务逻辑，就是根据数据去渲染dom即可，这样view可以做的很轻。</p>\n</li>\n<li><p>应用的全部数据沉淀在一个Store中，当全部数据在顶层时，很多事情都变得简单，因为获取数据变得十分廉价。无论是校验和对数据的转换控制都变得非常简单。</p>\n</li>\n<li><p>React只是取数据渲染，其他的比如状态的变化全部通过事件pubsub通知appstore去更新数据。如果状态不会影响其他组件的级联变化可以放在组件内部消化掉。</p>\n</li>\n<li><p>所有的ajax封装在webapi模块中，全部promise化。回调回来通过cursor更新store, cursor更新store， store通知React去rerender。</p>\n</li>\n<li><p>区分View component 和 pure component。</p>\n</li>\n</ol>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用?\"></a>如何使用?</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mkdir hello</div><div class=\"line\"><span class=\"built_in\">cd</span> hello</div><div class=\"line\">npm init</div><div class=\"line\">npm install react immutable iflux --save</div><div class=\"line\">npm install babel-loader --save-dev</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  iflux-demo  tree -L 3</div><div class=\"line\">.</div><div class=\"line\">├── apps                #we like django&apos;s app-style</div><div class=\"line\">│   └── index           #app-name</div><div class=\"line\">│       ├── index.js    #viewcontainer component</div><div class=\"line\">│       ├── component   #collect of dump components</div><div class=\"line\">│       ├── store.js    #immutable store</div><div class=\"line\">│       └── webapi.js   #fetch remote resource</div><div class=\"line\">├── node_modules</div><div class=\"line\">├── package.json</div><div class=\"line\">└── webpack.config.js</div><div class=\"line\"></div><div class=\"line\">5 directories, 4 files</div></pre></td></tr></table></figure>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//webapi.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchGithub = (name) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> fetch(<span class=\"string\">`http://github.com/<span class=\"subst\">$&#123;name&#125;</span>`</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  fetchGithub</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//store.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Store, msg &#125; <span class=\"keyword\">from</span> <span class=\"string\">'iflux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; fromJS &#125; <span class=\"keyword\">from</span> <span class=\"string\">'immutable'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; fetchGithub &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./webapi'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> appStore = Store(&#123;</div><div class=\"line\">  name: <span class=\"string\">''</span>,</div><div class=\"line\">  githubInfo: &#123;&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">exports <span class=\"keyword\">default</span> appStore;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//when use immutable's cursor to update store</span></div><div class=\"line\"><span class=\"comment\">//react's view will auto re-render</span></div><div class=\"line\">msg.on(<span class=\"string\">'updateName'</span>, (name) =&gt; &#123;</div><div class=\"line\">  appStore.cursor().set(<span class=\"string\">'name'</span>, name);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">msg.on(<span class=\"string\">'submit'</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> fetchGithub(name);</div><div class=\"line\">  appStore.cursor.set(<span class=\"string\">'githubInfo'</span>, fromJS(data));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//index.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//es5的样式</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;msg, mixins&#125; <span class=\"keyword\">from</span> <span class=\"string\">'iflux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> appStore <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123;StoreMixin&#125; = mixins;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> IfluxApp = React.createClass(&#123;</div><div class=\"line\">  <span class=\"comment\">//自动将Store中的data混入到state</span></div><div class=\"line\">  mixins: [StoreMixin(appStore)],</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> store = appStore.data();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form onSubmit=&#123;this._submit&#125;&gt;</div><div class=\"line\">            &lt;input name=\"name\" onChange=&#123;this._handleChange&#125;/&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">          &#123;store.get('githubInfo')&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  _handleChange(e) &#123;</div><div class=\"line\">    msg.emit('updateName', e.target.value);</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  _submit() &#123;</div><div class=\"line\">    msg.emit('getGithubInfo');</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//es6的样式</div><div class=\"line\">import React from 'react';</div><div class=\"line\">import &#123; msg, connectToStore &#125; from 'iflux';</div><div class=\"line\">import appStore from './store';</div><div class=\"line\"></div><div class=\"line\">class IfluxApp extends React.Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123;store&#125; = this.props;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form onSubmit=&#123;this._submit&#125;&gt;</div><div class=\"line\">            &lt;input name=\"name\" onChange=&#123;this._handleChange&#125;/&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">          &#123;store.get('githubInfo')&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default connectToStore(appStore)(IfluxApp);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"什么是iflux\"><a href=\"#什么是iflux\" class=\"headerlink\" title=\"什么是iflux ?\"></a>什么是iflux ?</h3><p><em>iflux = immutable.js + react.js</em></p>\n<p><a href=\"https://nodei.co/npm/iflux/\"><img src=\"https://nodei.co/npm/iflux.png?downloads=true&amp;downloadRank=true&amp;stars=true\" alt=\"NPM\"></a></p>\n<h3 id=\"什么是React-js\"><a href=\"#什么是React-js\" class=\"headerlink\" title=\"什么是React.js ?\"></a>什么是React.js ?</h3><p><a href=\"http://facebook.github.io/react/\">React.js</a>犹如Facebook的文化基因所强调的一样move fast and break things, 在快速前进中打破了很多我们对于web开发的固有认识。<br>更厉害的是React把这种创新平移到移动开发(React native)实现了Learn once, Write everywhere.</p>\n<h3 id=\"React的特点。\"><a href=\"#React的特点。\" class=\"headerlink\" title=\"React的特点。\"></a>React的特点。</h3><ol>\n<li><p>强调组件化的开发方式（更高的抽象层次，更好的分离关注点）</p>\n</li>\n<li><p>声明式的开发风格（更好的表现力）</p>\n</li>\n<li><p>单向的数据流动（简单可预测）</p>\n</li>\n<li><p>超高性能的渲染60fps不是梦 （掌声在哪里？）</p>\n</li>\n<li><p>最大的创新源于virtual dom （以及virtual native）</p>\n</li>\n<li><p>轻量，可以在现有的系统中快速试错</p>\n</li>\n<li><p>精确的生命周期，更简单的整合第三方的库(jquery)</p>\n</li>\n</ol>\n<h3 id=\"关于更多\"><a href=\"#关于更多\" class=\"headerlink\" title=\"关于更多\"></a>关于更多</h3><p>因为React的定位就是轻量级高效组件式的view library，但是在我们实际的应用开发工程中不仅仅需要处理view的问题，更复杂的是对于状态的控制。<br>官方的<a href=\"https://facebook.github.io/flux/docs/overview.html\">flux</a>架构提供了一个很好的针对React的架构指导，但是代码量很大。<br>说到底flux就是在解决一个数据流向以及控制状态变化问题。这点om确实做的非常出色，<br>借助于Clojure的数据的特性（1. 数据不可变 2. 持久化数据结构 3.共享数据结构）在不断的追寻下，immutable.js出现在了眼前，如获至宝。<br>随着对immutable.js深入挖掘，发现正好契合了React的架构特点，可以使用Immutable很好的管理我们的Store，因为Immutable强调值语义，<br>能够更好的追踪状态的变化(cursor)且带来了更好的性能。</p>\n<h3 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h3><ul>\n<li>建议：优先选择connectToStore </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">+-----------------------+</div><div class=\"line\">|       WebApi          |</div><div class=\"line\">+-----------------------+</div><div class=\"line\">          |  </div><div class=\"line\">         \\|/</div><div class=\"line\">+-----------------------+</div><div class=\"line\">|   Store（immutable）   |&lt;-----+</div><div class=\"line\">+-----------------------+      |</div><div class=\"line\">           | //es5的风格        |</div><div class=\"line\">           | StoreMixin        | msg(EventEmitter)</div><div class=\"line\">          \\|/                  |</div><div class=\"line\">+------------------------+     |</div><div class=\"line\">|     React App          |-----|</div><div class=\"line\">+------------------------+</div><div class=\"line\">|      &lt;Layout&gt;          |</div><div class=\"line\">|        &lt;SearchForm/&gt;   |</div><div class=\"line\">|        &lt;Toolbar/&gt;      |</div><div class=\"line\">|        &lt;DataGrid/&gt;     |</div><div class=\"line\">|       &lt;/Layout&gt;        |</div><div class=\"line\">+------------------------+</div></pre></td></tr></table></figure>\n<p>一个应用只有一个Store，单根数据源，单向数据流动，数据沉淀在顶层。<br>且通过PureRenderMix可以获取更好的性能。简直就是为React私人定制一般。</p>\n<p>于是，顺其自然的写了iflux去更好的粘合React和immutable。</p>\n<p>整体思路：</p>\n<ol>\n<li><p>React只承担view应该承担的事情（1. 资料呈现 2. 用户交互） 不处理任何的业务逻辑，就是根据数据去渲染dom即可，这样view可以做的很轻。</p>\n</li>\n<li><p>应用的全部数据沉淀在一个Store中，当全部数据在顶层时，很多事情都变得简单，因为获取数据变得十分廉价。无论是校验和对数据的转换控制都变得非常简单。</p>\n</li>\n<li><p>React只是取数据渲染，其他的比如状态的变化全部通过事件pubsub通知appstore去更新数据。如果状态不会影响其他组件的级联变化可以放在组件内部消化掉。</p>\n</li>\n<li><p>所有的ajax封装在webapi模块中，全部promise化。回调回来通过cursor更新store, cursor更新store， store通知React去rerender。</p>\n</li>\n<li><p>区分View component 和 pure component。</p>\n</li>\n</ol>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用?\"></a>如何使用?</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mkdir hello</div><div class=\"line\"><span class=\"built_in\">cd</span> hello</div><div class=\"line\">npm init</div><div class=\"line\">npm install react immutable iflux --save</div><div class=\"line\">npm install babel-loader --save-dev</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  iflux-demo  tree -L 3</div><div class=\"line\">.</div><div class=\"line\">├── apps                #we like django&apos;s app-style</div><div class=\"line\">│   └── index           #app-name</div><div class=\"line\">│       ├── index.js    #viewcontainer component</div><div class=\"line\">│       ├── component   #collect of dump components</div><div class=\"line\">│       ├── store.js    #immutable store</div><div class=\"line\">│       └── webapi.js   #fetch remote resource</div><div class=\"line\">├── node_modules</div><div class=\"line\">├── package.json</div><div class=\"line\">└── webpack.config.js</div><div class=\"line\"></div><div class=\"line\">5 directories, 4 files</div></pre></td></tr></table></figure>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//webapi.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchGithub = (name) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> fetch(<span class=\"string\">`http://github.com/<span class=\"subst\">$&#123;name&#125;</span>`</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  fetchGithub</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//store.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Store, msg &#125; <span class=\"keyword\">from</span> <span class=\"string\">'iflux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; fromJS &#125; <span class=\"keyword\">from</span> <span class=\"string\">'immutable'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; fetchGithub &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./webapi'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> appStore = Store(&#123;</div><div class=\"line\">  name: <span class=\"string\">''</span>,</div><div class=\"line\">  githubInfo: &#123;&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">exports <span class=\"keyword\">default</span> appStore;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//when use immutable's cursor to update store</span></div><div class=\"line\"><span class=\"comment\">//react's view will auto re-render</span></div><div class=\"line\">msg.on(<span class=\"string\">'updateName'</span>, (name) =&gt; &#123;</div><div class=\"line\">  appStore.cursor().set(<span class=\"string\">'name'</span>, name);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">msg.on(<span class=\"string\">'submit'</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> fetchGithub(name);</div><div class=\"line\">  appStore.cursor.set(<span class=\"string\">'githubInfo'</span>, fromJS(data));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//index.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//es5的样式</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;msg, mixins&#125; <span class=\"keyword\">from</span> <span class=\"string\">'iflux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> appStore <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123;StoreMixin&#125; = mixins;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> IfluxApp = React.createClass(&#123;</div><div class=\"line\">  <span class=\"comment\">//自动将Store中的data混入到state</span></div><div class=\"line\">  mixins: [StoreMixin(appStore)],</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> store = appStore.data();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form onSubmit=&#123;this._submit&#125;&gt;</div><div class=\"line\">            &lt;input name=\"name\" onChange=&#123;this._handleChange&#125;/&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">          &#123;store.get('githubInfo')&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  _handleChange(e) &#123;</div><div class=\"line\">    msg.emit('updateName', e.target.value);</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  _submit() &#123;</div><div class=\"line\">    msg.emit('getGithubInfo');</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//es6的样式</div><div class=\"line\">import React from 'react';</div><div class=\"line\">import &#123; msg, connectToStore &#125; from 'iflux';</div><div class=\"line\">import appStore from './store';</div><div class=\"line\"></div><div class=\"line\">class IfluxApp extends React.Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123;store&#125; = this.props;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;form onSubmit=&#123;this._submit&#125;&gt;</div><div class=\"line\">            &lt;input name=\"name\" onChange=&#123;this._handleChange&#125;/&gt;</div><div class=\"line\">        &lt;/form&gt;</div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">          &#123;store.get('githubInfo')&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default connectToStore(appStore)(IfluxApp);</div></pre></td></tr></table></figure>\n"},{"title":"ReactNative学习-React技术栈全家桶","date":"2016-12-24T07:26:03.000Z","_content":"#### React 技术栈系列教程\nhttp://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\n#### React.js 入门教程\nhttp://www.ruanyifeng.com/blog/2015/03/react.html\n\n#### ECMAScript 6 入门\nhttp://es6.ruanyifeng.com/#docs/style\n\n#### ReactNative 中文网\nhttp://reactnative.cn\n\n#### Immutable 详解及 React 中实践\nhttps://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender\n\n#### Flux 架构入门教程\nhttp://www.ruanyifeng.com/blog/2016/01/flux.html\n#### Flux 架构官方英文文档\nhttps://facebook.github.io/flux/docs/overview.html#content\n#### Redux 入门教程（一）：基本用法\nhttp://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\n#### Redux 入门教程（二）：中间件（middleware）与异步操作\nhttp://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html\n#### Redux 入门教程（三）：React-Redux 的用法\nhttp://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html\n#### Redux.js 官方英文文档\nhttp://redux.js.org\n#### Redux.js GitHub中文文档\nhttp://cn.redux.js.org/docs/react-redux/api.html\n#### Flex 布局教程：语法篇\nhttp://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool\n#### 浅谈 React、Flux 与 Redux\nhttp://www.tuicool.com/articles/3AFJNbj\n#### 怎样理顺react，flux，redux这些概念的关系，开发中有必要使用它们吗?\nhttps://www.zhihu.com/question/47686258/answer/107209140\n\n\n## DEMO文章：\n#### 这段时间看了下Redux，写自己对它的感觉。\nhttp://react-china.org/t/redux/2687\n#### 基于 react + react-router + redux + webpack + ES6/7 + less 的完整项目\nhttps://github.com/bailicangdu/react-pxq\n#### 基于webpack + react + react-router + redux + less + flex.css + ES6 的React版cnode社区\nhttp://react-china.org/t/webpack-react-react-router-redux-less-flex-css-es6-react-cnode/6332\n# 概述\n大前端的时代来了，还不要准备好么？\n\n## 做React需要会什么？\nreact的功能其实很单一，主要负责渲染的功能，现有的框架，比如angular是一个大而全的框架，用了angular几乎就不需要用其他工具辅助配合，但是react不一样，他只负责ui渲染，想要做好一个项目，往往需要其他库和工具的配合，比如用redux来管理数据，react-router管理路由，react已经全面拥抱es6，所以es6也得掌握，webpack就算是不会配置也要会用，要想提高性能，需要按需加载，immutable.js也得用上，还有单元测试等。\n\n\n## React 是什么\n用脚本进行DOM操作的代价很昂贵。有个贴切的比喻，把DOM和JavaScript各自想象为一个岛屿，它们之间用收费桥梁连接，js每次访问DOM，都要途径这座桥，并交纳“过桥费”,访问DOM的次数越多，费用也就越高。 因此，推荐的做法是尽量减少过桥的次数，努力待在ECMAScript岛上。因为这个原因react的虚拟dom就显得难能可贵了，它创造了虚拟dom并且将它们储存起来，每当状态发生变化的时候就会创造新的虚拟节点和以前的进行对比，让变化的部分进行渲染。整个过程没有对dom进行获取和操作，只有一个渲染的过程，所以react说是一个ui框架。\n\n\n## React的组件化\n\nreact的一个组件很明显的由dom视图和state数据组成，两个部分泾渭分明。state是数据中心，它的状态决定着视图的状态。这时候发现似乎和我们一直推崇的MVC开发模式有点区别，没了Controller控制器，那用户交互怎么处理，数据变化谁来管理？然而这并不是react所要关心的事情，它只负责ui的渲染。与其他框架监听数据动态改变dom不同，react采用setState来控制视图的更新。setState会自动调用render函数，触发视图的重新渲染，如果仅仅只是state数据的变化而没有调用setState，并不会触发更新。 组件就是拥有独立功能的视图模块，许多小的组件组成一个大的组件，整个页面就是由一个个组件组合而成。它的好处是利于重复利用和维护。\n\n\n## React的 Diff算法\nreact的diff算法用在什么地方呢？当组件更新的时候，react会创建一个新的虚拟dom树并且会和之前储存的dom树进行比较，这个比较多过程就用到了diff算法，所以组件初始化的时候是用不到的。react提出了一种假设，相同的节点具有类似的结构，而不同的节点具有不同的结构。在这种假设之上进行逐层的比较，如果发现对应的节点是不同的，那就直接删除旧的节点以及它所包含的所有子节点然后替换成新的节点。如果是相同的节点，则只进行属性的更改。\n\n对于列表的diff算法稍有不同，因为列表通常具有相同的结构，在对列表节点进行删除，插入，排序的时候，单个节点的整体操作远比一个个对比一个个替换要好得多，所以在创建列表的时候需要设置key值，这样react才能分清谁是谁。当然不写key值也可以，但这样通常会报出警告，通知我们加上key值以提高react的性能。\n\n![](https://github.com/bailicangdu/pxq/blob/master/src/images/diff.png)\n\n\n\n\n## React组件是怎么来的\n\n组件的创造方法为React.createClass() ——创造一个类，react系统内部设计了一套类系统，利用它来创造react组件。但这并不是必须的，我们还可以用es6的class类来创造组件,这也是Facebook官方推荐的写法。\n\n![](https://github.com/bailicangdu/pxq/blob/master/src/images/icon_class.png)\n\n这两种写法实现的功能一样但是原理却是不同，es6的class类可以看作是构造函数的一个语法糖，可以把它当成构造函数来看，extends实现了类之间的继承 —— 定义一个类Main 继承React.Component所有的属性和方法，组件的生命周期函数就是从这来的。constructor是构造器，在实例化对象时调用，super调用了父类的constructor创造了父类的实例对象this，然后用子类的构造函数进行修改。这和es5的原型继承是不同的，原型继承是先创造一个实例化对象this，然后再继承父级的原型方法。了解了这些之后我们在看组件的时候就清楚很多。\n\n当我们使用组件< Main />时，其实是对Main类的实例化——new Main，只不过react对这个过程进行了封装，让它看起来更像是一个标签。\n\n有三点值得注意：1、定义类名字的首字母必须大写 2、因为class变成了关键字，类选择器需要用className来代替。 3、类和模块内部默认使用严格模式，所以不需要用use strict指定运行模式。\n\n\n\n\n## 组件的生命周期\n\n![](https://github.com/bailicangdu/pxq/blob/master/src/images/react-lifecycle.png)\n\n**组件在初始化时会触发5个钩子函数：**\n\n  **1、getDefaultProps()** \n> 设置默认的props，也可以用dufaultProps设置组件的默认属性。\n\n\n  **2、getInitialState()**  \n> 在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props。\n\n\n **3、componentWillMount()** \n> 组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。\n\n\n **4、 render()** \n>  react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。\n\n\n **5、componentDidMount()** \n> 组件渲染之后调用，可以通过this.getDOMNode()获取和操作dom节点，只调用一次。\n\n\n**在更新时也会触发5个钩子函数：**\n\n  **6、componentWillReceivePorps(nextProps)**\n> 组件初始化时不调用，组件接受新的props时调用。\n\n\n  **7、shouldComponentUpdate(nextProps, nextState)** \n> react性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候。不过调用this.forceUpdate会跳过此步骤。\n\n\n  **8、componentWillUpdata(nextProps, nextState)**\n> 组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state\n\n\n  **9、render()**\n> 不多说\n\n\n  **10、componentDidUpdate()**\n> 组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。\n\n\n还有一个卸载钩子函数\n\n  **11、componentWillUnmount()** \n> 组件将要卸载时调用，一些事件监听和定时器需要在此时清除。\n\n\n以上可以看出来react总共有10个周期函数（render重复一次），这个10个函数可以满足我们所有对组件操作的需求，利用的好可以提高开发效率和组件性能。\n\n\n## React-Router路由\n\nRouter就是React的一个组件，它并不会被渲染，只是一个创建内部路由规则的配置对象，根据匹配的路由地址展现相应的组件。Route则对路由地址和组件进行绑定，Route具有嵌套功能，表示路由地址的包涵关系，这和组件之间的嵌套并没有直接联系。Route可以向绑定的组件传递7个属性：children，history，location，params，route，routeParams，routes，每个属性都包涵路由的相关的信息。比较常用的有children（以路由的包涵关系为区分的组件），location（包括地址，参数，地址切换方式，key值，hash值）。react-router提供Link标签，这只是对a标签的封装，值得注意的是，点击链接进行的跳转并不是默认的方式，react-router阻止了a标签的默认行为并用pushState进行hash值的转变。切换页面的过程是在点击Link标签或者后退前进按钮时，会先发生url地址的转变，Router监听到地址的改变根据Route的path属性匹配到对应的组件，将state值改成对应的组件并调用setState触发render函数重新渲染dom。\n\n当页面比较多时，项目就会变得越来越大，尤其对于单页面应用来说，初次渲染的速度就会很慢，这时候就需要按需加载，只有切换到页面的时候才去加载对应的js文件。react配合webpack进行按需加载的方法很简单，Route的component改为getComponent，组件用require.ensure的方式获取，并在webpack中配置chunkFilename。\n\n```javascript\nconst chooseProducts = (location, cb) => {\n    require.ensure([], require => {\n        cb(null, require('../Component/chooseProducts').default)\n    },'chooseProducts')\n}\n\nconst helpCenter = (location, cb) => {\n    require.ensure([], require => {\n        cb(null, require('../Component/helpCenter').default)\n    },'helpCenter')\n}\n\nconst saleRecord = (location, cb) => {\n    require.ensure([], require => {\n        cb(null, require('../Component/saleRecord').default)\n    },'saleRecord')\n}\n\nconst RouteConfig = (\n    <Router history={history}>\n        <Route path=\"/\" component={Roots}>\n            <IndexRoute component={index} />//首页\n            <Route path=\"index\" component={index} />\n            <Route path=\"helpCenter\" getComponent={helpCenter} />//帮助中心\n            <Route path=\"saleRecord\" getComponent={saleRecord} />//销售记录\n            <Redirect from='*' to='/'  />\n        </Route>\n    </Router>\n);\n\n```\n## 组件之间的通信\n\n\nreact推崇的是单向数据流，自上而下进行数据的传递，但是由下而上或者不在一条数据流上的组件之间的通信就会变的复杂。解决通信问题的方法很多，如果只是父子级关系，父级可以将一个回调函数当作属性传递给子级，子级可以直接调用函数从而和父级通信。\n\n组件层级嵌套到比较深，可以使用上下文getChildContext来传递信息，这样在不需要将函数一层层往下传，任何一层的子级都可以通过this.context直接访问。\n\n兄弟关系的组件之间无法直接通信，它们只能利用同一层的上级作为中转站。而如果兄弟组件都是最高层的组件，为了能够让它们进行通信，必须在它们外层再套一层组件，这个外层的组件起着保存数据，传递信息的作用，这其实就是redux所做的事情。\n\n组件之间的信息还可以通过全局事件来传递。不同页面可以通过参数传递数据，下个页面可以用location.param来获取。其实react本身很简单，难的在于如何优雅高效的实现组件之间数据的交流。\n\n## Redux\n\n\n首先，redux并不是必须的，它的作用相当于在顶层组件之上又加了一个组件，作用是进行逻辑运算、储存数据和实现组件尤其是顶层组件的通信。如果组件之间的交流不多，逻辑不复杂，只是单纯的进行视图的渲染，这时候用回调，context就行，没必要用redux，用了反而影响开发速度。但是如果组件交流特别频繁，逻辑很复杂，那redux的优势就特别明显了。我第一次做react项目的时候并没有用redux，所有的逻辑都是在组件内部实现，当时为了实现一个逻辑比较复杂的购物车，洋洋洒洒居然写了800多行代码，回头一看我自己都不知道写的是啥，画面太感人。\n\n先简单说一下redux和react是怎么配合的。react-redux提供了connect和Provider两个好基友，它们一个将组件与redux关联起来，一个将store传给组件。组件通过dispatch发出action，store根据action的type属性调用对应的reducer并传入state和这个action，reducer对state进行处理并返回一个新的state放入store，connect监听到store发生变化，调用setState更新组件，此时组件的props也就跟着变化。\n\n\n\n\n#### 流程是这个样子的：\n\n\n![](https://github.com/bailicangdu/pxq/blob/master/src/images/simple_redux.jpg)\n\n值得注意的是connect，Provider，mapStateToProps,mapDispatchToProps是react-redux提供的，redux本身和react没有半毛钱关系，它只是数据处理中心，没有和react产生任何耦合，是react-redux让它们联系在一起。\n\n\n#### 接下来具体分析一下，redux以及react-redux到底是怎么实现的。\n\n\n#### 先上一张图\n\n![](https://github.com/bailicangdu/pxq/blob/master/src/images/all_redux.png)\n\n明显比第一张要复杂，其实两张图说的是同一件事。从上而下慢慢分析：\n\n### 先说说redux：\n\n#### redux主要由三部分组成：store，reducer，action。\n\n\n**store**是一个对象，它有四个主要的方法：\n\n**1、dispatch:**\n>  用于action的分发——在createStore中可以用middleware中间件对dispatch进行改造，比如当action传入dispatch会立即触发reducer，有些时候我们不希望它立即触发，而是等待异步操作完成之后再触发，这时候用redux-thunk对dispatch进行改造，以前只能传入一个对象，改造完成后可以传入一个函数，在这个函数里我们手动dispatch一个action对象，这个过程是可控的，就实现了异步。\n\n**2、subscribe：**\n> 监听state的变化——这个函数在store调用dispatch时会注册一个listener监听state变化，当我们需要知道state是否变化时可以调用，它返回一个函数，调用这个返回的函数可以注销监听。\nlet unsubscribe = store.subscribe(() => {console.log('state发生了变化')})\n\n**3、getState：**\n> 获取store中的state——当我们用action触发reducer改变了state时，需要再拿到新的state里的数据，毕竟数据才是我们想要的。getState主要在两个地方需要用到，一是在dispatch拿到action后store需要用它来获取state里的数据，并把这个数据传给reducer，这个过程是自动执行的，二是在我们利用subscribe监听到state发生变化后调用它来获取新的state数据，如果做到这一步，说明我们已经成功了。\n\n**4、replaceReducer:** \n> 替换reducer，改变state修改的逻辑。\n\nstore可以通过createStore()方法创建，接受三个参数，经过combineReducers合并的reducer和state的初始状态以及改变dispatch的中间件，后两个参数并不是必须的。store的主要作用是将action和reducer联系起来并改变state。\n\n\n**action:**\n>action是一个对象，其中type属性是必须的，同时可以传入一些数据。action可以用actionCreactor进行创造。dispatch就是把action对象发送出去。\n\n**reducer:**\n>reducer是一个函数，它接受一个state和一个action，根据action的type返回一个新的state。根据业务逻辑可以分为很多个reducer，然后通过combineReducers将它们合并，state树中有很多对象，每个state对象对应一个reducer，state对象的名字可以在合并时定义。\n\n像这个样子：\n```javascript\nconst reducer = combineReducers({\n     a: doSomethingWithA,\n     b: processB,\n     c: c\n})\n```\n**combineReducers:**\n>其实它也是一个reducer，它接受整个state和一个action，然后将整个state拆分发送给对应的reducer进行处理，所有的reducer会收到相同的action，不过它们会根据action的type进行判断，有这个type就进行处理然后返回新的state，没有就返回默认值，然后这些分散的state又会整合在一起返回一个新的state树。\n\n接下来分析一下整体的流程，首先调用store.dispatch将action作为参数传入，同时用getState获取当前的状态树state并注册subscribe的listener监听state变化，再调用combineReducers并将获取的state和action传入。combineReducers会将传入的state和action传给所有reducer，reducer会根据state的key值获取与自己对应的state，并根据action的type返回新的state，触发state树的更新，我们调用subscribe监听到state发生变化后用getState获取新的state数据。\n\nredux的state和react的state两者完全没有关系，除了名字一样。\n\n**上面分析了redux的主要功能，那么react-redux到底做了什么？**\n\n\n## React-Redux\n\n如果只使用redux，那么流程是这样的：\n> component --> dispatch(action) --> reducer --> subscribe --> getState --> component\n\n用了react-redux之后流程是这样的：\n> component --> actionCreator(data) --> reducer --> component\n\nstore的三大功能：dispatch，subscribe，getState都不需要手动来写了。react-redux帮我们做了这些，同时它提供了两个好基友Provider和connect。\n\n**Provider**是一个组件，它接受store作为props，然后通过context往下传，这样react中任何组件都可以通过contex获取store。也就意味着我们可以在任何一个组件里利用dispatch(action)来触发reducer改变state，并用subscribe监听state的变化，然后用getState获取变化后的值。但是并不推荐这样做，它会让数据流变的混乱，过度的耦合也会影响组件的复用，维护起来也更麻烦。\n\n**connect --connect(mapStateToProps, mapDispatchToProps, mergeProps, options)**是一个函数，它接受四个参数并且再返回一个函数--wrapWithConnect，wrapWithConnect接受一个组件作为参数wrapWithConnect(component)，它内部定义一个新组件Connect(容器组件)并将传入的组件(ui组件)作为Connect的子组件然后return出去。\n\n所以它的完整写法是这样的：connect(mapStateToProps, mapDispatchToProps, mergeProps, options)(component)\n\n**mapStateToProps(state, [ownProps])：**\n>mapStateToProps 接受两个参数，store的state和自定义的props，并返回一个新的对象，这个对象会作为props的一部分传入ui组件。我们可以根据组件所需要的数据自定义返回一个对象。ownProps的变化也会触发mapStateToProps\n\n```javascript\nfunction mapStateToProps(state) {\n   return { todos: state.todos };\n}\n```\n\n**mapDispatchToProps(dispatch, [ownProps])：**\n\n> mapDispatchToProps如果是对象，那么会和store绑定作为props的一部分传入ui组件。如果是个函数，它接受两个参数，bindActionCreators会将action和dispatch绑定并返回一个对象，这个对象会和ownProps一起作为props的一部分传入ui组件。所以不论mapDispatchToProps是对象还是函数，它最终都会返回一个对象，如果是函数，这个对象的key值是可以自定义的\n\n```javascript\nfunction mapDispatchToProps(dispatch) {\n   return {\n      todoActions: bindActionCreators(todoActionCreators, dispatch),\n      counterActions: bindActionCreators(counterActionCreators, dispatch)\n   };\n}\n```\n\nmapDispatchToProps返回的对象其属性其实就是一个个actionCreator，因为已经和dispatch绑定，所以当调用actionCreator时会立即发送action，而不用手动dispatch。ownProps的变化也会触发mapDispatchToProps。\n\n**mergeProps(stateProps, dispatchProps, ownProps)：**\n> 将mapStateToProps() 与 mapDispatchToProps()返回的对象和组件自身的props合并成新的props并传入组件。默认返回 Object.assign({}, ownProps, stateProps, dispatchProps) 的结果。\n\n**options：**\n> pure = true 表示Connect容器组件将在shouldComponentUpdate中对store的state和ownProps进行浅对比，判断是否发生变化，优化性能。为false则不对比。\n\n其实connect函数并没有做什么，大部分的逻辑都是在它返回的wrapWithConnect函数内实现的，确切的说是在wrapWithConnect内定义的Connect组件里实现的。\n\n### 下面是一个完整的 react --> redux --> react 流程：\n\n\n一、Provider组件接受redux的store作为props，然后通过context往下传。\n\n二、connect函数在初始化的时候会将mapDispatchToProps对象绑定到store，如果mapDispatchToProps是函数则在Connect组件获得store后，根据传入的store.dispatch和action通过bindActionCreators进行绑定，再将返回的对象绑定到store，connect函数会返回一个wrapWithConnect函数，同时wrapWithConnect会被调用且传入一个ui组件，wrapWithConnect内部使用class Connect extends Component定义了一个Connect组件，传入的ui组件就是Connect的子组件，然后Connect组件会通过context获得store，并通过store.getState获得完整的state对象，将state传入mapStateToProps返回stateProps对象、mapDispatchToProps对象或mapDispatchToProps函数会返回一个dispatchProps对象，stateProps、dispatchProps以及Connect组件的props三者通过Object.assign()，或者mergeProps合并为props传入ui组件。然后在ComponentDidMount中调用store.subscribe，注册了一个回调函数handleChange监听state的变化。\n\n三、此时ui组件就可以在props中找到actionCreator，当我们调用actionCreator时会自动调用dispatch，在dispatch中会调用getState获取整个state，同时注册一个listener监听state的变化，store将获得的state和action传给combineReducers，combineReducers会将state依据state的key值分别传给子reducer，并将action传给全部子reducer，reducer会被依次执行进行action.type的判断，如果有则返回一个新的state，如果没有则返回默认。combineReducers再次将子reducer返回的单个state进行合并成一个新的完整的state。此时state发生了变化。dispatch在state返回新的值之后会调用所有注册的listener函数其中包括handleChange函数，handleChange函数内部首先调用getState获取新的state值并对新旧两个state进行浅对比，如果相同直接return，如果不同则调用mapStateToProps获取stateProps并将新旧两个stateProps进行浅对比，如果相同，直接return结束，不进行后续操作。如果不相同则调用this.setState()触发Connect组件的更新，传入ui组件，触发ui组件的更新，此时ui组件获得新的props，react --> redux --> react 的一次流程结束。\n\n\n**上面的有点复杂，简化版的流程是：**\n\n一、Provider组件接受redux的store作为props，然后通过context往下传。\n\n二、connect函数收到Provider传出的store，然后接受三个参数mapStateToProps，mapDispatchToProps和组件，并将state和actionCreator以props传入组件，这时组件就可以调用actionCreator函数来触发reducer函数返回新的state，connect监听到state变化调用setState更新组件并将新的state传入组件。\n\nconnect可以写的非常简洁，mapStateToProps，mapDispatchToProps只不过是传入的回调函数，connect函数在必要的时候会调用它们，名字不是固定的，甚至可以不写名字。\n\n简化版本：\n```javascript\nconnect(state => state, action)(Component);\n```\n\n## 项目搭建\n\n上面说了react，react-router和redux的知识点。但是怎么样将它们整合起来，搭建一个完整的项目。\n\n1、先引用 react.js，redux，react-router 等基本文件，建议用npm安装，直接在文件中引用。\n\n2、从 react.js，redux，react-router 中引入所需要的对象和方法。\n```javascript\nimport React, {Component, PropTypes} from 'react';\nimport ReactDOM, {render} from 'react-dom';\nimport {Provider, connect} from 'react-redux';\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\nimport { Router, Route, Redirect, IndexRoute, browserHistory, hashHistory } from 'react-router';\n```\n3、根据需求创建顶层ui组件，每个顶层ui组件对应一个页面。\n\n4、创建actionCreators和reducers，并用combineReducers将所有的reducer合并成一个大的reduer。利用createStore创建store并引入combineReducers和applyMiddleware。\n\n5、利用connect将actionCreator，reuder和顶层的ui组件进行关联并返回一个新的组件。\n\n6、利用connect返回的新的组件配合react-router进行路由的部署，返回一个路由组件Router。\n\n7、将Router放入最顶层组件Provider，引入store作为Provider的属性。\n\n8、调用render渲染Provider组件且放入页面的标签中。\n\n可以看到顶层的ui组件其实被套了四层组件，Provider，Router，Route，Connect，这四个组件并不会在视图上改变react，它们只是功能性的。\n\n通常我们在顶层的ui组件打印props时可以看到一堆属性：\n\n![](https://github.com/bailicangdu/pxq/blob/master/src/images/react_props.png)\n\n上图的顶层ui组件属性总共有18个，如果刚刚接触react，可能对这些属性怎么来的感到困惑，其实这些属性来自五个地方：\n\n组件自定义属性1个，actionCreator返回的对象6个，reducer返回的state4个，Connect组件属性0个，以及Router注入的属性7个。\n\n\n\n","source":"_posts/ReactNative学习-React-js全家桶.md","raw":"---\ntitle: ReactNative学习-React技术栈全家桶\ndate: 2016-12-24 15:26:03\ncategories:\n    - ReactNative\ntags: \n  - ReactNative\n  - React\n  - JavaScript\n---\n#### React 技术栈系列教程\nhttp://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\n#### React.js 入门教程\nhttp://www.ruanyifeng.com/blog/2015/03/react.html\n\n#### ECMAScript 6 入门\nhttp://es6.ruanyifeng.com/#docs/style\n\n#### ReactNative 中文网\nhttp://reactnative.cn\n\n#### Immutable 详解及 React 中实践\nhttps://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender\n\n#### Flux 架构入门教程\nhttp://www.ruanyifeng.com/blog/2016/01/flux.html\n#### Flux 架构官方英文文档\nhttps://facebook.github.io/flux/docs/overview.html#content\n#### Redux 入门教程（一）：基本用法\nhttp://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\n#### Redux 入门教程（二）：中间件（middleware）与异步操作\nhttp://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html\n#### Redux 入门教程（三）：React-Redux 的用法\nhttp://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html\n#### Redux.js 官方英文文档\nhttp://redux.js.org\n#### Redux.js GitHub中文文档\nhttp://cn.redux.js.org/docs/react-redux/api.html\n#### Flex 布局教程：语法篇\nhttp://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool\n#### 浅谈 React、Flux 与 Redux\nhttp://www.tuicool.com/articles/3AFJNbj\n#### 怎样理顺react，flux，redux这些概念的关系，开发中有必要使用它们吗?\nhttps://www.zhihu.com/question/47686258/answer/107209140\n\n\n## DEMO文章：\n#### 这段时间看了下Redux，写自己对它的感觉。\nhttp://react-china.org/t/redux/2687\n#### 基于 react + react-router + redux + webpack + ES6/7 + less 的完整项目\nhttps://github.com/bailicangdu/react-pxq\n#### 基于webpack + react + react-router + redux + less + flex.css + ES6 的React版cnode社区\nhttp://react-china.org/t/webpack-react-react-router-redux-less-flex-css-es6-react-cnode/6332\n# 概述\n大前端的时代来了，还不要准备好么？\n\n## 做React需要会什么？\nreact的功能其实很单一，主要负责渲染的功能，现有的框架，比如angular是一个大而全的框架，用了angular几乎就不需要用其他工具辅助配合，但是react不一样，他只负责ui渲染，想要做好一个项目，往往需要其他库和工具的配合，比如用redux来管理数据，react-router管理路由，react已经全面拥抱es6，所以es6也得掌握，webpack就算是不会配置也要会用，要想提高性能，需要按需加载，immutable.js也得用上，还有单元测试等。\n\n\n## React 是什么\n用脚本进行DOM操作的代价很昂贵。有个贴切的比喻，把DOM和JavaScript各自想象为一个岛屿，它们之间用收费桥梁连接，js每次访问DOM，都要途径这座桥，并交纳“过桥费”,访问DOM的次数越多，费用也就越高。 因此，推荐的做法是尽量减少过桥的次数，努力待在ECMAScript岛上。因为这个原因react的虚拟dom就显得难能可贵了，它创造了虚拟dom并且将它们储存起来，每当状态发生变化的时候就会创造新的虚拟节点和以前的进行对比，让变化的部分进行渲染。整个过程没有对dom进行获取和操作，只有一个渲染的过程，所以react说是一个ui框架。\n\n\n## React的组件化\n\nreact的一个组件很明显的由dom视图和state数据组成，两个部分泾渭分明。state是数据中心，它的状态决定着视图的状态。这时候发现似乎和我们一直推崇的MVC开发模式有点区别，没了Controller控制器，那用户交互怎么处理，数据变化谁来管理？然而这并不是react所要关心的事情，它只负责ui的渲染。与其他框架监听数据动态改变dom不同，react采用setState来控制视图的更新。setState会自动调用render函数，触发视图的重新渲染，如果仅仅只是state数据的变化而没有调用setState，并不会触发更新。 组件就是拥有独立功能的视图模块，许多小的组件组成一个大的组件，整个页面就是由一个个组件组合而成。它的好处是利于重复利用和维护。\n\n\n## React的 Diff算法\nreact的diff算法用在什么地方呢？当组件更新的时候，react会创建一个新的虚拟dom树并且会和之前储存的dom树进行比较，这个比较多过程就用到了diff算法，所以组件初始化的时候是用不到的。react提出了一种假设，相同的节点具有类似的结构，而不同的节点具有不同的结构。在这种假设之上进行逐层的比较，如果发现对应的节点是不同的，那就直接删除旧的节点以及它所包含的所有子节点然后替换成新的节点。如果是相同的节点，则只进行属性的更改。\n\n对于列表的diff算法稍有不同，因为列表通常具有相同的结构，在对列表节点进行删除，插入，排序的时候，单个节点的整体操作远比一个个对比一个个替换要好得多，所以在创建列表的时候需要设置key值，这样react才能分清谁是谁。当然不写key值也可以，但这样通常会报出警告，通知我们加上key值以提高react的性能。\n\n![](https://github.com/bailicangdu/pxq/blob/master/src/images/diff.png)\n\n\n\n\n## React组件是怎么来的\n\n组件的创造方法为React.createClass() ——创造一个类，react系统内部设计了一套类系统，利用它来创造react组件。但这并不是必须的，我们还可以用es6的class类来创造组件,这也是Facebook官方推荐的写法。\n\n![](https://github.com/bailicangdu/pxq/blob/master/src/images/icon_class.png)\n\n这两种写法实现的功能一样但是原理却是不同，es6的class类可以看作是构造函数的一个语法糖，可以把它当成构造函数来看，extends实现了类之间的继承 —— 定义一个类Main 继承React.Component所有的属性和方法，组件的生命周期函数就是从这来的。constructor是构造器，在实例化对象时调用，super调用了父类的constructor创造了父类的实例对象this，然后用子类的构造函数进行修改。这和es5的原型继承是不同的，原型继承是先创造一个实例化对象this，然后再继承父级的原型方法。了解了这些之后我们在看组件的时候就清楚很多。\n\n当我们使用组件< Main />时，其实是对Main类的实例化——new Main，只不过react对这个过程进行了封装，让它看起来更像是一个标签。\n\n有三点值得注意：1、定义类名字的首字母必须大写 2、因为class变成了关键字，类选择器需要用className来代替。 3、类和模块内部默认使用严格模式，所以不需要用use strict指定运行模式。\n\n\n\n\n## 组件的生命周期\n\n![](https://github.com/bailicangdu/pxq/blob/master/src/images/react-lifecycle.png)\n\n**组件在初始化时会触发5个钩子函数：**\n\n  **1、getDefaultProps()** \n> 设置默认的props，也可以用dufaultProps设置组件的默认属性。\n\n\n  **2、getInitialState()**  \n> 在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props。\n\n\n **3、componentWillMount()** \n> 组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。\n\n\n **4、 render()** \n>  react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。\n\n\n **5、componentDidMount()** \n> 组件渲染之后调用，可以通过this.getDOMNode()获取和操作dom节点，只调用一次。\n\n\n**在更新时也会触发5个钩子函数：**\n\n  **6、componentWillReceivePorps(nextProps)**\n> 组件初始化时不调用，组件接受新的props时调用。\n\n\n  **7、shouldComponentUpdate(nextProps, nextState)** \n> react性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候。不过调用this.forceUpdate会跳过此步骤。\n\n\n  **8、componentWillUpdata(nextProps, nextState)**\n> 组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state\n\n\n  **9、render()**\n> 不多说\n\n\n  **10、componentDidUpdate()**\n> 组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。\n\n\n还有一个卸载钩子函数\n\n  **11、componentWillUnmount()** \n> 组件将要卸载时调用，一些事件监听和定时器需要在此时清除。\n\n\n以上可以看出来react总共有10个周期函数（render重复一次），这个10个函数可以满足我们所有对组件操作的需求，利用的好可以提高开发效率和组件性能。\n\n\n## React-Router路由\n\nRouter就是React的一个组件，它并不会被渲染，只是一个创建内部路由规则的配置对象，根据匹配的路由地址展现相应的组件。Route则对路由地址和组件进行绑定，Route具有嵌套功能，表示路由地址的包涵关系，这和组件之间的嵌套并没有直接联系。Route可以向绑定的组件传递7个属性：children，history，location，params，route，routeParams，routes，每个属性都包涵路由的相关的信息。比较常用的有children（以路由的包涵关系为区分的组件），location（包括地址，参数，地址切换方式，key值，hash值）。react-router提供Link标签，这只是对a标签的封装，值得注意的是，点击链接进行的跳转并不是默认的方式，react-router阻止了a标签的默认行为并用pushState进行hash值的转变。切换页面的过程是在点击Link标签或者后退前进按钮时，会先发生url地址的转变，Router监听到地址的改变根据Route的path属性匹配到对应的组件，将state值改成对应的组件并调用setState触发render函数重新渲染dom。\n\n当页面比较多时，项目就会变得越来越大，尤其对于单页面应用来说，初次渲染的速度就会很慢，这时候就需要按需加载，只有切换到页面的时候才去加载对应的js文件。react配合webpack进行按需加载的方法很简单，Route的component改为getComponent，组件用require.ensure的方式获取，并在webpack中配置chunkFilename。\n\n```javascript\nconst chooseProducts = (location, cb) => {\n    require.ensure([], require => {\n        cb(null, require('../Component/chooseProducts').default)\n    },'chooseProducts')\n}\n\nconst helpCenter = (location, cb) => {\n    require.ensure([], require => {\n        cb(null, require('../Component/helpCenter').default)\n    },'helpCenter')\n}\n\nconst saleRecord = (location, cb) => {\n    require.ensure([], require => {\n        cb(null, require('../Component/saleRecord').default)\n    },'saleRecord')\n}\n\nconst RouteConfig = (\n    <Router history={history}>\n        <Route path=\"/\" component={Roots}>\n            <IndexRoute component={index} />//首页\n            <Route path=\"index\" component={index} />\n            <Route path=\"helpCenter\" getComponent={helpCenter} />//帮助中心\n            <Route path=\"saleRecord\" getComponent={saleRecord} />//销售记录\n            <Redirect from='*' to='/'  />\n        </Route>\n    </Router>\n);\n\n```\n## 组件之间的通信\n\n\nreact推崇的是单向数据流，自上而下进行数据的传递，但是由下而上或者不在一条数据流上的组件之间的通信就会变的复杂。解决通信问题的方法很多，如果只是父子级关系，父级可以将一个回调函数当作属性传递给子级，子级可以直接调用函数从而和父级通信。\n\n组件层级嵌套到比较深，可以使用上下文getChildContext来传递信息，这样在不需要将函数一层层往下传，任何一层的子级都可以通过this.context直接访问。\n\n兄弟关系的组件之间无法直接通信，它们只能利用同一层的上级作为中转站。而如果兄弟组件都是最高层的组件，为了能够让它们进行通信，必须在它们外层再套一层组件，这个外层的组件起着保存数据，传递信息的作用，这其实就是redux所做的事情。\n\n组件之间的信息还可以通过全局事件来传递。不同页面可以通过参数传递数据，下个页面可以用location.param来获取。其实react本身很简单，难的在于如何优雅高效的实现组件之间数据的交流。\n\n## Redux\n\n\n首先，redux并不是必须的，它的作用相当于在顶层组件之上又加了一个组件，作用是进行逻辑运算、储存数据和实现组件尤其是顶层组件的通信。如果组件之间的交流不多，逻辑不复杂，只是单纯的进行视图的渲染，这时候用回调，context就行，没必要用redux，用了反而影响开发速度。但是如果组件交流特别频繁，逻辑很复杂，那redux的优势就特别明显了。我第一次做react项目的时候并没有用redux，所有的逻辑都是在组件内部实现，当时为了实现一个逻辑比较复杂的购物车，洋洋洒洒居然写了800多行代码，回头一看我自己都不知道写的是啥，画面太感人。\n\n先简单说一下redux和react是怎么配合的。react-redux提供了connect和Provider两个好基友，它们一个将组件与redux关联起来，一个将store传给组件。组件通过dispatch发出action，store根据action的type属性调用对应的reducer并传入state和这个action，reducer对state进行处理并返回一个新的state放入store，connect监听到store发生变化，调用setState更新组件，此时组件的props也就跟着变化。\n\n\n\n\n#### 流程是这个样子的：\n\n\n![](https://github.com/bailicangdu/pxq/blob/master/src/images/simple_redux.jpg)\n\n值得注意的是connect，Provider，mapStateToProps,mapDispatchToProps是react-redux提供的，redux本身和react没有半毛钱关系，它只是数据处理中心，没有和react产生任何耦合，是react-redux让它们联系在一起。\n\n\n#### 接下来具体分析一下，redux以及react-redux到底是怎么实现的。\n\n\n#### 先上一张图\n\n![](https://github.com/bailicangdu/pxq/blob/master/src/images/all_redux.png)\n\n明显比第一张要复杂，其实两张图说的是同一件事。从上而下慢慢分析：\n\n### 先说说redux：\n\n#### redux主要由三部分组成：store，reducer，action。\n\n\n**store**是一个对象，它有四个主要的方法：\n\n**1、dispatch:**\n>  用于action的分发——在createStore中可以用middleware中间件对dispatch进行改造，比如当action传入dispatch会立即触发reducer，有些时候我们不希望它立即触发，而是等待异步操作完成之后再触发，这时候用redux-thunk对dispatch进行改造，以前只能传入一个对象，改造完成后可以传入一个函数，在这个函数里我们手动dispatch一个action对象，这个过程是可控的，就实现了异步。\n\n**2、subscribe：**\n> 监听state的变化——这个函数在store调用dispatch时会注册一个listener监听state变化，当我们需要知道state是否变化时可以调用，它返回一个函数，调用这个返回的函数可以注销监听。\nlet unsubscribe = store.subscribe(() => {console.log('state发生了变化')})\n\n**3、getState：**\n> 获取store中的state——当我们用action触发reducer改变了state时，需要再拿到新的state里的数据，毕竟数据才是我们想要的。getState主要在两个地方需要用到，一是在dispatch拿到action后store需要用它来获取state里的数据，并把这个数据传给reducer，这个过程是自动执行的，二是在我们利用subscribe监听到state发生变化后调用它来获取新的state数据，如果做到这一步，说明我们已经成功了。\n\n**4、replaceReducer:** \n> 替换reducer，改变state修改的逻辑。\n\nstore可以通过createStore()方法创建，接受三个参数，经过combineReducers合并的reducer和state的初始状态以及改变dispatch的中间件，后两个参数并不是必须的。store的主要作用是将action和reducer联系起来并改变state。\n\n\n**action:**\n>action是一个对象，其中type属性是必须的，同时可以传入一些数据。action可以用actionCreactor进行创造。dispatch就是把action对象发送出去。\n\n**reducer:**\n>reducer是一个函数，它接受一个state和一个action，根据action的type返回一个新的state。根据业务逻辑可以分为很多个reducer，然后通过combineReducers将它们合并，state树中有很多对象，每个state对象对应一个reducer，state对象的名字可以在合并时定义。\n\n像这个样子：\n```javascript\nconst reducer = combineReducers({\n     a: doSomethingWithA,\n     b: processB,\n     c: c\n})\n```\n**combineReducers:**\n>其实它也是一个reducer，它接受整个state和一个action，然后将整个state拆分发送给对应的reducer进行处理，所有的reducer会收到相同的action，不过它们会根据action的type进行判断，有这个type就进行处理然后返回新的state，没有就返回默认值，然后这些分散的state又会整合在一起返回一个新的state树。\n\n接下来分析一下整体的流程，首先调用store.dispatch将action作为参数传入，同时用getState获取当前的状态树state并注册subscribe的listener监听state变化，再调用combineReducers并将获取的state和action传入。combineReducers会将传入的state和action传给所有reducer，reducer会根据state的key值获取与自己对应的state，并根据action的type返回新的state，触发state树的更新，我们调用subscribe监听到state发生变化后用getState获取新的state数据。\n\nredux的state和react的state两者完全没有关系，除了名字一样。\n\n**上面分析了redux的主要功能，那么react-redux到底做了什么？**\n\n\n## React-Redux\n\n如果只使用redux，那么流程是这样的：\n> component --> dispatch(action) --> reducer --> subscribe --> getState --> component\n\n用了react-redux之后流程是这样的：\n> component --> actionCreator(data) --> reducer --> component\n\nstore的三大功能：dispatch，subscribe，getState都不需要手动来写了。react-redux帮我们做了这些，同时它提供了两个好基友Provider和connect。\n\n**Provider**是一个组件，它接受store作为props，然后通过context往下传，这样react中任何组件都可以通过contex获取store。也就意味着我们可以在任何一个组件里利用dispatch(action)来触发reducer改变state，并用subscribe监听state的变化，然后用getState获取变化后的值。但是并不推荐这样做，它会让数据流变的混乱，过度的耦合也会影响组件的复用，维护起来也更麻烦。\n\n**connect --connect(mapStateToProps, mapDispatchToProps, mergeProps, options)**是一个函数，它接受四个参数并且再返回一个函数--wrapWithConnect，wrapWithConnect接受一个组件作为参数wrapWithConnect(component)，它内部定义一个新组件Connect(容器组件)并将传入的组件(ui组件)作为Connect的子组件然后return出去。\n\n所以它的完整写法是这样的：connect(mapStateToProps, mapDispatchToProps, mergeProps, options)(component)\n\n**mapStateToProps(state, [ownProps])：**\n>mapStateToProps 接受两个参数，store的state和自定义的props，并返回一个新的对象，这个对象会作为props的一部分传入ui组件。我们可以根据组件所需要的数据自定义返回一个对象。ownProps的变化也会触发mapStateToProps\n\n```javascript\nfunction mapStateToProps(state) {\n   return { todos: state.todos };\n}\n```\n\n**mapDispatchToProps(dispatch, [ownProps])：**\n\n> mapDispatchToProps如果是对象，那么会和store绑定作为props的一部分传入ui组件。如果是个函数，它接受两个参数，bindActionCreators会将action和dispatch绑定并返回一个对象，这个对象会和ownProps一起作为props的一部分传入ui组件。所以不论mapDispatchToProps是对象还是函数，它最终都会返回一个对象，如果是函数，这个对象的key值是可以自定义的\n\n```javascript\nfunction mapDispatchToProps(dispatch) {\n   return {\n      todoActions: bindActionCreators(todoActionCreators, dispatch),\n      counterActions: bindActionCreators(counterActionCreators, dispatch)\n   };\n}\n```\n\nmapDispatchToProps返回的对象其属性其实就是一个个actionCreator，因为已经和dispatch绑定，所以当调用actionCreator时会立即发送action，而不用手动dispatch。ownProps的变化也会触发mapDispatchToProps。\n\n**mergeProps(stateProps, dispatchProps, ownProps)：**\n> 将mapStateToProps() 与 mapDispatchToProps()返回的对象和组件自身的props合并成新的props并传入组件。默认返回 Object.assign({}, ownProps, stateProps, dispatchProps) 的结果。\n\n**options：**\n> pure = true 表示Connect容器组件将在shouldComponentUpdate中对store的state和ownProps进行浅对比，判断是否发生变化，优化性能。为false则不对比。\n\n其实connect函数并没有做什么，大部分的逻辑都是在它返回的wrapWithConnect函数内实现的，确切的说是在wrapWithConnect内定义的Connect组件里实现的。\n\n### 下面是一个完整的 react --> redux --> react 流程：\n\n\n一、Provider组件接受redux的store作为props，然后通过context往下传。\n\n二、connect函数在初始化的时候会将mapDispatchToProps对象绑定到store，如果mapDispatchToProps是函数则在Connect组件获得store后，根据传入的store.dispatch和action通过bindActionCreators进行绑定，再将返回的对象绑定到store，connect函数会返回一个wrapWithConnect函数，同时wrapWithConnect会被调用且传入一个ui组件，wrapWithConnect内部使用class Connect extends Component定义了一个Connect组件，传入的ui组件就是Connect的子组件，然后Connect组件会通过context获得store，并通过store.getState获得完整的state对象，将state传入mapStateToProps返回stateProps对象、mapDispatchToProps对象或mapDispatchToProps函数会返回一个dispatchProps对象，stateProps、dispatchProps以及Connect组件的props三者通过Object.assign()，或者mergeProps合并为props传入ui组件。然后在ComponentDidMount中调用store.subscribe，注册了一个回调函数handleChange监听state的变化。\n\n三、此时ui组件就可以在props中找到actionCreator，当我们调用actionCreator时会自动调用dispatch，在dispatch中会调用getState获取整个state，同时注册一个listener监听state的变化，store将获得的state和action传给combineReducers，combineReducers会将state依据state的key值分别传给子reducer，并将action传给全部子reducer，reducer会被依次执行进行action.type的判断，如果有则返回一个新的state，如果没有则返回默认。combineReducers再次将子reducer返回的单个state进行合并成一个新的完整的state。此时state发生了变化。dispatch在state返回新的值之后会调用所有注册的listener函数其中包括handleChange函数，handleChange函数内部首先调用getState获取新的state值并对新旧两个state进行浅对比，如果相同直接return，如果不同则调用mapStateToProps获取stateProps并将新旧两个stateProps进行浅对比，如果相同，直接return结束，不进行后续操作。如果不相同则调用this.setState()触发Connect组件的更新，传入ui组件，触发ui组件的更新，此时ui组件获得新的props，react --> redux --> react 的一次流程结束。\n\n\n**上面的有点复杂，简化版的流程是：**\n\n一、Provider组件接受redux的store作为props，然后通过context往下传。\n\n二、connect函数收到Provider传出的store，然后接受三个参数mapStateToProps，mapDispatchToProps和组件，并将state和actionCreator以props传入组件，这时组件就可以调用actionCreator函数来触发reducer函数返回新的state，connect监听到state变化调用setState更新组件并将新的state传入组件。\n\nconnect可以写的非常简洁，mapStateToProps，mapDispatchToProps只不过是传入的回调函数，connect函数在必要的时候会调用它们，名字不是固定的，甚至可以不写名字。\n\n简化版本：\n```javascript\nconnect(state => state, action)(Component);\n```\n\n## 项目搭建\n\n上面说了react，react-router和redux的知识点。但是怎么样将它们整合起来，搭建一个完整的项目。\n\n1、先引用 react.js，redux，react-router 等基本文件，建议用npm安装，直接在文件中引用。\n\n2、从 react.js，redux，react-router 中引入所需要的对象和方法。\n```javascript\nimport React, {Component, PropTypes} from 'react';\nimport ReactDOM, {render} from 'react-dom';\nimport {Provider, connect} from 'react-redux';\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\nimport { Router, Route, Redirect, IndexRoute, browserHistory, hashHistory } from 'react-router';\n```\n3、根据需求创建顶层ui组件，每个顶层ui组件对应一个页面。\n\n4、创建actionCreators和reducers，并用combineReducers将所有的reducer合并成一个大的reduer。利用createStore创建store并引入combineReducers和applyMiddleware。\n\n5、利用connect将actionCreator，reuder和顶层的ui组件进行关联并返回一个新的组件。\n\n6、利用connect返回的新的组件配合react-router进行路由的部署，返回一个路由组件Router。\n\n7、将Router放入最顶层组件Provider，引入store作为Provider的属性。\n\n8、调用render渲染Provider组件且放入页面的标签中。\n\n可以看到顶层的ui组件其实被套了四层组件，Provider，Router，Route，Connect，这四个组件并不会在视图上改变react，它们只是功能性的。\n\n通常我们在顶层的ui组件打印props时可以看到一堆属性：\n\n![](https://github.com/bailicangdu/pxq/blob/master/src/images/react_props.png)\n\n上图的顶层ui组件属性总共有18个，如果刚刚接触react，可能对这些属性怎么来的感到困惑，其实这些属性来自五个地方：\n\n组件自定义属性1个，actionCreator返回的对象6个，reducer返回的state4个，Connect组件属性0个，以及Router注入的属性7个。\n\n\n\n","slug":"ReactNative学习-React-js全家桶","published":1,"updated":"2017-03-16T04:57:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0c1v89b000mksfyonew4rue","content":"<h4 id=\"React-技术栈系列教程\"><a href=\"#React-技术栈系列教程\" class=\"headerlink\" title=\"React 技术栈系列教程\"></a>React 技术栈系列教程</h4><p><a href=\"http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html</a></p>\n<h4 id=\"React-js-入门教程\"><a href=\"#React-js-入门教程\" class=\"headerlink\" title=\"React.js 入门教程\"></a>React.js 入门教程</h4><p><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2015/03/react.html</a></p>\n<h4 id=\"ECMAScript-6-入门\"><a href=\"#ECMAScript-6-入门\" class=\"headerlink\" title=\"ECMAScript 6 入门\"></a>ECMAScript 6 入门</h4><p><a href=\"http://es6.ruanyifeng.com/#docs/style\" target=\"_blank\" rel=\"external\">http://es6.ruanyifeng.com/#docs/style</a></p>\n<h4 id=\"ReactNative-中文网\"><a href=\"#ReactNative-中文网\" class=\"headerlink\" title=\"ReactNative 中文网\"></a>ReactNative 中文网</h4><p><a href=\"http://reactnative.cn\" target=\"_blank\" rel=\"external\">http://reactnative.cn</a></p>\n<h4 id=\"Immutable-详解及-React-中实践\"><a href=\"#Immutable-详解及-React-中实践\" class=\"headerlink\" title=\"Immutable 详解及 React 中实践\"></a>Immutable 详解及 React 中实践</h4><p><a href=\"https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender</a></p>\n<h4 id=\"Flux-架构入门教程\"><a href=\"#Flux-架构入门教程\" class=\"headerlink\" title=\"Flux 架构入门教程\"></a>Flux 架构入门教程</h4><p><a href=\"http://www.ruanyifeng.com/blog/2016/01/flux.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2016/01/flux.html</a></p>\n<h4 id=\"Flux-架构官方英文文档\"><a href=\"#Flux-架构官方英文文档\" class=\"headerlink\" title=\"Flux 架构官方英文文档\"></a>Flux 架构官方英文文档</h4><p><a href=\"https://facebook.github.io/flux/docs/overview.html#content\" target=\"_blank\" rel=\"external\">https://facebook.github.io/flux/docs/overview.html#content</a></p>\n<h4 id=\"Redux-入门教程（一）：基本用法\"><a href=\"#Redux-入门教程（一）：基本用法\" class=\"headerlink\" title=\"Redux 入门教程（一）：基本用法\"></a>Redux 入门教程（一）：基本用法</h4><p><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html</a></p>\n<h4 id=\"Redux-入门教程（二）：中间件（middleware）与异步操作\"><a href=\"#Redux-入门教程（二）：中间件（middleware）与异步操作\" class=\"headerlink\" title=\"Redux 入门教程（二）：中间件（middleware）与异步操作\"></a>Redux 入门教程（二）：中间件（middleware）与异步操作</h4><p><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html</a></p>\n<h4 id=\"Redux-入门教程（三）：React-Redux-的用法\"><a href=\"#Redux-入门教程（三）：React-Redux-的用法\" class=\"headerlink\" title=\"Redux 入门教程（三）：React-Redux 的用法\"></a>Redux 入门教程（三）：React-Redux 的用法</h4><p><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html</a></p>\n<h4 id=\"Redux-js-官方英文文档\"><a href=\"#Redux-js-官方英文文档\" class=\"headerlink\" title=\"Redux.js 官方英文文档\"></a>Redux.js 官方英文文档</h4><p><a href=\"http://redux.js.org\" target=\"_blank\" rel=\"external\">http://redux.js.org</a></p>\n<h4 id=\"Redux-js-GitHub中文文档\"><a href=\"#Redux-js-GitHub中文文档\" class=\"headerlink\" title=\"Redux.js GitHub中文文档\"></a>Redux.js GitHub中文文档</h4><p><a href=\"http://cn.redux.js.org/docs/react-redux/api.html\" target=\"_blank\" rel=\"external\">http://cn.redux.js.org/docs/react-redux/api.html</a></p>\n<h4 id=\"Flex-布局教程：语法篇\"><a href=\"#Flex-布局教程：语法篇\" class=\"headerlink\" title=\"Flex 布局教程：语法篇\"></a>Flex 布局教程：语法篇</h4><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool</a></p>\n<h4 id=\"浅谈-React、Flux-与-Redux\"><a href=\"#浅谈-React、Flux-与-Redux\" class=\"headerlink\" title=\"浅谈 React、Flux 与 Redux\"></a>浅谈 React、Flux 与 Redux</h4><p><a href=\"http://www.tuicool.com/articles/3AFJNbj\" target=\"_blank\" rel=\"external\">http://www.tuicool.com/articles/3AFJNbj</a></p>\n<h4 id=\"怎样理顺react，flux，redux这些概念的关系，开发中有必要使用它们吗\"><a href=\"#怎样理顺react，flux，redux这些概念的关系，开发中有必要使用它们吗\" class=\"headerlink\" title=\"怎样理顺react，flux，redux这些概念的关系，开发中有必要使用它们吗?\"></a>怎样理顺react，flux，redux这些概念的关系，开发中有必要使用它们吗?</h4><p><a href=\"https://www.zhihu.com/question/47686258/answer/107209140\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/47686258/answer/107209140</a></p>\n<h2 id=\"DEMO文章：\"><a href=\"#DEMO文章：\" class=\"headerlink\" title=\"DEMO文章：\"></a>DEMO文章：</h2><h4 id=\"这段时间看了下Redux，写自己对它的感觉。\"><a href=\"#这段时间看了下Redux，写自己对它的感觉。\" class=\"headerlink\" title=\"这段时间看了下Redux，写自己对它的感觉。\"></a>这段时间看了下Redux，写自己对它的感觉。</h4><p><a href=\"http://react-china.org/t/redux/2687\" target=\"_blank\" rel=\"external\">http://react-china.org/t/redux/2687</a></p>\n<h4 id=\"基于-react-react-router-redux-webpack-ES6-7-less-的完整项目\"><a href=\"#基于-react-react-router-redux-webpack-ES6-7-less-的完整项目\" class=\"headerlink\" title=\"基于 react + react-router + redux + webpack + ES6/7 + less 的完整项目\"></a>基于 react + react-router + redux + webpack + ES6/7 + less 的完整项目</h4><p><a href=\"https://github.com/bailicangdu/react-pxq\" target=\"_blank\" rel=\"external\">https://github.com/bailicangdu/react-pxq</a></p>\n<h4 id=\"基于webpack-react-react-router-redux-less-flex-css-ES6-的React版cnode社区\"><a href=\"#基于webpack-react-react-router-redux-less-flex-css-ES6-的React版cnode社区\" class=\"headerlink\" title=\"基于webpack + react + react-router + redux + less + flex.css + ES6 的React版cnode社区\"></a>基于webpack + react + react-router + redux + less + flex.css + ES6 的React版cnode社区</h4><p><a href=\"http://react-china.org/t/webpack-react-react-router-redux-less-flex-css-es6-react-cnode/6332\" target=\"_blank\" rel=\"external\">http://react-china.org/t/webpack-react-react-router-redux-less-flex-css-es6-react-cnode/6332</a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>大前端的时代来了，还不要准备好么？</p>\n<h2 id=\"做React需要会什么？\"><a href=\"#做React需要会什么？\" class=\"headerlink\" title=\"做React需要会什么？\"></a>做React需要会什么？</h2><p>react的功能其实很单一，主要负责渲染的功能，现有的框架，比如angular是一个大而全的框架，用了angular几乎就不需要用其他工具辅助配合，但是react不一样，他只负责ui渲染，想要做好一个项目，往往需要其他库和工具的配合，比如用redux来管理数据，react-router管理路由，react已经全面拥抱es6，所以es6也得掌握，webpack就算是不会配置也要会用，要想提高性能，需要按需加载，immutable.js也得用上，还有单元测试等。</p>\n<h2 id=\"React-是什么\"><a href=\"#React-是什么\" class=\"headerlink\" title=\"React 是什么\"></a>React 是什么</h2><p>用脚本进行DOM操作的代价很昂贵。有个贴切的比喻，把DOM和JavaScript各自想象为一个岛屿，它们之间用收费桥梁连接，js每次访问DOM，都要途径这座桥，并交纳“过桥费”,访问DOM的次数越多，费用也就越高。 因此，推荐的做法是尽量减少过桥的次数，努力待在ECMAScript岛上。因为这个原因react的虚拟dom就显得难能可贵了，它创造了虚拟dom并且将它们储存起来，每当状态发生变化的时候就会创造新的虚拟节点和以前的进行对比，让变化的部分进行渲染。整个过程没有对dom进行获取和操作，只有一个渲染的过程，所以react说是一个ui框架。</p>\n<h2 id=\"React的组件化\"><a href=\"#React的组件化\" class=\"headerlink\" title=\"React的组件化\"></a>React的组件化</h2><p>react的一个组件很明显的由dom视图和state数据组成，两个部分泾渭分明。state是数据中心，它的状态决定着视图的状态。这时候发现似乎和我们一直推崇的MVC开发模式有点区别，没了Controller控制器，那用户交互怎么处理，数据变化谁来管理？然而这并不是react所要关心的事情，它只负责ui的渲染。与其他框架监听数据动态改变dom不同，react采用setState来控制视图的更新。setState会自动调用render函数，触发视图的重新渲染，如果仅仅只是state数据的变化而没有调用setState，并不会触发更新。 组件就是拥有独立功能的视图模块，许多小的组件组成一个大的组件，整个页面就是由一个个组件组合而成。它的好处是利于重复利用和维护。</p>\n<h2 id=\"React的-Diff算法\"><a href=\"#React的-Diff算法\" class=\"headerlink\" title=\"React的 Diff算法\"></a>React的 Diff算法</h2><p>react的diff算法用在什么地方呢？当组件更新的时候，react会创建一个新的虚拟dom树并且会和之前储存的dom树进行比较，这个比较多过程就用到了diff算法，所以组件初始化的时候是用不到的。react提出了一种假设，相同的节点具有类似的结构，而不同的节点具有不同的结构。在这种假设之上进行逐层的比较，如果发现对应的节点是不同的，那就直接删除旧的节点以及它所包含的所有子节点然后替换成新的节点。如果是相同的节点，则只进行属性的更改。</p>\n<p>对于列表的diff算法稍有不同，因为列表通常具有相同的结构，在对列表节点进行删除，插入，排序的时候，单个节点的整体操作远比一个个对比一个个替换要好得多，所以在创建列表的时候需要设置key值，这样react才能分清谁是谁。当然不写key值也可以，但这样通常会报出警告，通知我们加上key值以提高react的性能。</p>\n<p><img src=\"https://github.com/bailicangdu/pxq/blob/master/src/images/diff.png\" alt=\"\"></p>\n<h2 id=\"React组件是怎么来的\"><a href=\"#React组件是怎么来的\" class=\"headerlink\" title=\"React组件是怎么来的\"></a>React组件是怎么来的</h2><p>组件的创造方法为React.createClass() ——创造一个类，react系统内部设计了一套类系统，利用它来创造react组件。但这并不是必须的，我们还可以用es6的class类来创造组件,这也是Facebook官方推荐的写法。</p>\n<p><img src=\"https://github.com/bailicangdu/pxq/blob/master/src/images/icon_class.png\" alt=\"\"></p>\n<p>这两种写法实现的功能一样但是原理却是不同，es6的class类可以看作是构造函数的一个语法糖，可以把它当成构造函数来看，extends实现了类之间的继承 —— 定义一个类Main 继承React.Component所有的属性和方法，组件的生命周期函数就是从这来的。constructor是构造器，在实例化对象时调用，super调用了父类的constructor创造了父类的实例对象this，然后用子类的构造函数进行修改。这和es5的原型继承是不同的，原型继承是先创造一个实例化对象this，然后再继承父级的原型方法。了解了这些之后我们在看组件的时候就清楚很多。</p>\n<p>当我们使用组件&lt; Main /&gt;时，其实是对Main类的实例化——new Main，只不过react对这个过程进行了封装，让它看起来更像是一个标签。</p>\n<p>有三点值得注意：1、定义类名字的首字母必须大写 2、因为class变成了关键字，类选择器需要用className来代替。 3、类和模块内部默认使用严格模式，所以不需要用use strict指定运行模式。</p>\n<h2 id=\"组件的生命周期\"><a href=\"#组件的生命周期\" class=\"headerlink\" title=\"组件的生命周期\"></a>组件的生命周期</h2><p><img src=\"https://github.com/bailicangdu/pxq/blob/master/src/images/react-lifecycle.png\" alt=\"\"></p>\n<p><strong>组件在初始化时会触发5个钩子函数：</strong></p>\n<p>  <strong>1、getDefaultProps()</strong> </p>\n<blockquote>\n<p>设置默认的props，也可以用dufaultProps设置组件的默认属性。</p>\n</blockquote>\n<p>  <strong>2、getInitialState()</strong>  </p>\n<blockquote>\n<p>在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props。</p>\n</blockquote>\n<p> <strong>3、componentWillMount()</strong> </p>\n<blockquote>\n<p>组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。</p>\n</blockquote>\n<p> <strong>4、 render()</strong> </p>\n<blockquote>\n<p> react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。</p>\n</blockquote>\n<p> <strong>5、componentDidMount()</strong> </p>\n<blockquote>\n<p>组件渲染之后调用，可以通过this.getDOMNode()获取和操作dom节点，只调用一次。</p>\n</blockquote>\n<p><strong>在更新时也会触发5个钩子函数：</strong></p>\n<p>  <strong>6、componentWillReceivePorps(nextProps)</strong></p>\n<blockquote>\n<p>组件初始化时不调用，组件接受新的props时调用。</p>\n</blockquote>\n<p>  <strong>7、shouldComponentUpdate(nextProps, nextState)</strong> </p>\n<blockquote>\n<p>react性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候。不过调用this.forceUpdate会跳过此步骤。</p>\n</blockquote>\n<p>  <strong>8、componentWillUpdata(nextProps, nextState)</strong></p>\n<blockquote>\n<p>组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state</p>\n</blockquote>\n<p>  <strong>9、render()</strong></p>\n<blockquote>\n<p>不多说</p>\n</blockquote>\n<p>  <strong>10、componentDidUpdate()</strong></p>\n<blockquote>\n<p>组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。</p>\n</blockquote>\n<p>还有一个卸载钩子函数</p>\n<p>  <strong>11、componentWillUnmount()</strong> </p>\n<blockquote>\n<p>组件将要卸载时调用，一些事件监听和定时器需要在此时清除。</p>\n</blockquote>\n<p>以上可以看出来react总共有10个周期函数（render重复一次），这个10个函数可以满足我们所有对组件操作的需求，利用的好可以提高开发效率和组件性能。</p>\n<h2 id=\"React-Router路由\"><a href=\"#React-Router路由\" class=\"headerlink\" title=\"React-Router路由\"></a>React-Router路由</h2><p>Router就是React的一个组件，它并不会被渲染，只是一个创建内部路由规则的配置对象，根据匹配的路由地址展现相应的组件。Route则对路由地址和组件进行绑定，Route具有嵌套功能，表示路由地址的包涵关系，这和组件之间的嵌套并没有直接联系。Route可以向绑定的组件传递7个属性：children，history，location，params，route，routeParams，routes，每个属性都包涵路由的相关的信息。比较常用的有children（以路由的包涵关系为区分的组件），location（包括地址，参数，地址切换方式，key值，hash值）。react-router提供Link标签，这只是对a标签的封装，值得注意的是，点击链接进行的跳转并不是默认的方式，react-router阻止了a标签的默认行为并用pushState进行hash值的转变。切换页面的过程是在点击Link标签或者后退前进按钮时，会先发生url地址的转变，Router监听到地址的改变根据Route的path属性匹配到对应的组件，将state值改成对应的组件并调用setState触发render函数重新渲染dom。</p>\n<p>当页面比较多时，项目就会变得越来越大，尤其对于单页面应用来说，初次渲染的速度就会很慢，这时候就需要按需加载，只有切换到页面的时候才去加载对应的js文件。react配合webpack进行按需加载的方法很简单，Route的component改为getComponent，组件用require.ensure的方式获取，并在webpack中配置chunkFilename。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> chooseProducts = (location, cb) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</div><div class=\"line\">        cb(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'../Component/chooseProducts'</span>).default)</div><div class=\"line\">    &#125;,<span class=\"string\">'chooseProducts'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> helpCenter = (location, cb) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</div><div class=\"line\">        cb(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'../Component/helpCenter'</span>).default)</div><div class=\"line\">    &#125;,<span class=\"string\">'helpCenter'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> saleRecord = (location, cb) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</div><div class=\"line\">        cb(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'../Component/saleRecord'</span>).default)</div><div class=\"line\">    &#125;,<span class=\"string\">'saleRecord'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> RouteConfig = (</div><div class=\"line\">    &lt;Router history=&#123;history&#125;&gt;</div><div class=\"line\">        &lt;Route path=\"/\" component=&#123;Roots&#125;&gt;</div><div class=\"line\">            &lt;IndexRoute component=&#123;index&#125; /&gt;//首页</div><div class=\"line\">            &lt;Route path=\"index\" component=&#123;index&#125; /&gt;</div><div class=\"line\">            &lt;Route path=\"helpCenter\" getComponent=&#123;helpCenter&#125; /&gt;//帮助中心</div><div class=\"line\">            &lt;Route path=\"saleRecord\" getComponent=&#123;saleRecord&#125; /&gt;//销售记录</div><div class=\"line\">            &lt;Redirect from='*' to='/'  /&gt;</div><div class=\"line\">        &lt;/Route&gt;</div><div class=\"line\">    &lt;/Router&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"组件之间的通信\"><a href=\"#组件之间的通信\" class=\"headerlink\" title=\"组件之间的通信\"></a>组件之间的通信</h2><p>react推崇的是单向数据流，自上而下进行数据的传递，但是由下而上或者不在一条数据流上的组件之间的通信就会变的复杂。解决通信问题的方法很多，如果只是父子级关系，父级可以将一个回调函数当作属性传递给子级，子级可以直接调用函数从而和父级通信。</p>\n<p>组件层级嵌套到比较深，可以使用上下文getChildContext来传递信息，这样在不需要将函数一层层往下传，任何一层的子级都可以通过this.context直接访问。</p>\n<p>兄弟关系的组件之间无法直接通信，它们只能利用同一层的上级作为中转站。而如果兄弟组件都是最高层的组件，为了能够让它们进行通信，必须在它们外层再套一层组件，这个外层的组件起着保存数据，传递信息的作用，这其实就是redux所做的事情。</p>\n<p>组件之间的信息还可以通过全局事件来传递。不同页面可以通过参数传递数据，下个页面可以用location.param来获取。其实react本身很简单，难的在于如何优雅高效的实现组件之间数据的交流。</p>\n<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h2><p>首先，redux并不是必须的，它的作用相当于在顶层组件之上又加了一个组件，作用是进行逻辑运算、储存数据和实现组件尤其是顶层组件的通信。如果组件之间的交流不多，逻辑不复杂，只是单纯的进行视图的渲染，这时候用回调，context就行，没必要用redux，用了反而影响开发速度。但是如果组件交流特别频繁，逻辑很复杂，那redux的优势就特别明显了。我第一次做react项目的时候并没有用redux，所有的逻辑都是在组件内部实现，当时为了实现一个逻辑比较复杂的购物车，洋洋洒洒居然写了800多行代码，回头一看我自己都不知道写的是啥，画面太感人。</p>\n<p>先简单说一下redux和react是怎么配合的。react-redux提供了connect和Provider两个好基友，它们一个将组件与redux关联起来，一个将store传给组件。组件通过dispatch发出action，store根据action的type属性调用对应的reducer并传入state和这个action，reducer对state进行处理并返回一个新的state放入store，connect监听到store发生变化，调用setState更新组件，此时组件的props也就跟着变化。</p>\n<h4 id=\"流程是这个样子的：\"><a href=\"#流程是这个样子的：\" class=\"headerlink\" title=\"流程是这个样子的：\"></a>流程是这个样子的：</h4><p><img src=\"https://github.com/bailicangdu/pxq/blob/master/src/images/simple_redux.jpg\" alt=\"\"></p>\n<p>值得注意的是connect，Provider，mapStateToProps,mapDispatchToProps是react-redux提供的，redux本身和react没有半毛钱关系，它只是数据处理中心，没有和react产生任何耦合，是react-redux让它们联系在一起。</p>\n<h4 id=\"接下来具体分析一下，redux以及react-redux到底是怎么实现的。\"><a href=\"#接下来具体分析一下，redux以及react-redux到底是怎么实现的。\" class=\"headerlink\" title=\"接下来具体分析一下，redux以及react-redux到底是怎么实现的。\"></a>接下来具体分析一下，redux以及react-redux到底是怎么实现的。</h4><h4 id=\"先上一张图\"><a href=\"#先上一张图\" class=\"headerlink\" title=\"先上一张图\"></a>先上一张图</h4><p><img src=\"https://github.com/bailicangdu/pxq/blob/master/src/images/all_redux.png\" alt=\"\"></p>\n<p>明显比第一张要复杂，其实两张图说的是同一件事。从上而下慢慢分析：</p>\n<h3 id=\"先说说redux：\"><a href=\"#先说说redux：\" class=\"headerlink\" title=\"先说说redux：\"></a>先说说redux：</h3><h4 id=\"redux主要由三部分组成：store，reducer，action。\"><a href=\"#redux主要由三部分组成：store，reducer，action。\" class=\"headerlink\" title=\"redux主要由三部分组成：store，reducer，action。\"></a>redux主要由三部分组成：store，reducer，action。</h4><p><strong>store</strong>是一个对象，它有四个主要的方法：</p>\n<p><strong>1、dispatch:</strong></p>\n<blockquote>\n<p> 用于action的分发——在createStore中可以用middleware中间件对dispatch进行改造，比如当action传入dispatch会立即触发reducer，有些时候我们不希望它立即触发，而是等待异步操作完成之后再触发，这时候用redux-thunk对dispatch进行改造，以前只能传入一个对象，改造完成后可以传入一个函数，在这个函数里我们手动dispatch一个action对象，这个过程是可控的，就实现了异步。</p>\n</blockquote>\n<p><strong>2、subscribe：</strong></p>\n<blockquote>\n<p>监听state的变化——这个函数在store调用dispatch时会注册一个listener监听state变化，当我们需要知道state是否变化时可以调用，它返回一个函数，调用这个返回的函数可以注销监听。<br>let unsubscribe = store.subscribe(() =&gt; {console.log(‘state发生了变化’)})</p>\n</blockquote>\n<p><strong>3、getState：</strong></p>\n<blockquote>\n<p>获取store中的state——当我们用action触发reducer改变了state时，需要再拿到新的state里的数据，毕竟数据才是我们想要的。getState主要在两个地方需要用到，一是在dispatch拿到action后store需要用它来获取state里的数据，并把这个数据传给reducer，这个过程是自动执行的，二是在我们利用subscribe监听到state发生变化后调用它来获取新的state数据，如果做到这一步，说明我们已经成功了。</p>\n</blockquote>\n<p><strong>4、replaceReducer:</strong> </p>\n<blockquote>\n<p>替换reducer，改变state修改的逻辑。</p>\n</blockquote>\n<p>store可以通过createStore()方法创建，接受三个参数，经过combineReducers合并的reducer和state的初始状态以及改变dispatch的中间件，后两个参数并不是必须的。store的主要作用是将action和reducer联系起来并改变state。</p>\n<p><strong>action:</strong></p>\n<blockquote>\n<p>action是一个对象，其中type属性是必须的，同时可以传入一些数据。action可以用actionCreactor进行创造。dispatch就是把action对象发送出去。</p>\n</blockquote>\n<p><strong>reducer:</strong></p>\n<blockquote>\n<p>reducer是一个函数，它接受一个state和一个action，根据action的type返回一个新的state。根据业务逻辑可以分为很多个reducer，然后通过combineReducers将它们合并，state树中有很多对象，每个state对象对应一个reducer，state对象的名字可以在合并时定义。</p>\n</blockquote>\n<p>像这个样子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> reducer = combineReducers(&#123;</div><div class=\"line\">     a: doSomethingWithA,</div><div class=\"line\">     b: processB,</div><div class=\"line\">     c: c</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><strong>combineReducers:</strong></p>\n<blockquote>\n<p>其实它也是一个reducer，它接受整个state和一个action，然后将整个state拆分发送给对应的reducer进行处理，所有的reducer会收到相同的action，不过它们会根据action的type进行判断，有这个type就进行处理然后返回新的state，没有就返回默认值，然后这些分散的state又会整合在一起返回一个新的state树。</p>\n</blockquote>\n<p>接下来分析一下整体的流程，首先调用store.dispatch将action作为参数传入，同时用getState获取当前的状态树state并注册subscribe的listener监听state变化，再调用combineReducers并将获取的state和action传入。combineReducers会将传入的state和action传给所有reducer，reducer会根据state的key值获取与自己对应的state，并根据action的type返回新的state，触发state树的更新，我们调用subscribe监听到state发生变化后用getState获取新的state数据。</p>\n<p>redux的state和react的state两者完全没有关系，除了名字一样。</p>\n<p><strong>上面分析了redux的主要功能，那么react-redux到底做了什么？</strong></p>\n<h2 id=\"React-Redux\"><a href=\"#React-Redux\" class=\"headerlink\" title=\"React-Redux\"></a>React-Redux</h2><p>如果只使用redux，那么流程是这样的：</p>\n<blockquote>\n<p>component –&gt; dispatch(action) –&gt; reducer –&gt; subscribe –&gt; getState –&gt; component</p>\n</blockquote>\n<p>用了react-redux之后流程是这样的：</p>\n<blockquote>\n<p>component –&gt; actionCreator(data) –&gt; reducer –&gt; component</p>\n</blockquote>\n<p>store的三大功能：dispatch，subscribe，getState都不需要手动来写了。react-redux帮我们做了这些，同时它提供了两个好基友Provider和connect。</p>\n<p><strong>Provider</strong>是一个组件，它接受store作为props，然后通过context往下传，这样react中任何组件都可以通过contex获取store。也就意味着我们可以在任何一个组件里利用dispatch(action)来触发reducer改变state，并用subscribe监听state的变化，然后用getState获取变化后的值。但是并不推荐这样做，它会让数据流变的混乱，过度的耦合也会影响组件的复用，维护起来也更麻烦。</p>\n<p><strong>connect –connect(mapStateToProps, mapDispatchToProps, mergeProps, options)</strong>是一个函数，它接受四个参数并且再返回一个函数–wrapWithConnect，wrapWithConnect接受一个组件作为参数wrapWithConnect(component)，它内部定义一个新组件Connect(容器组件)并将传入的组件(ui组件)作为Connect的子组件然后return出去。</p>\n<p>所以它的完整写法是这样的：connect(mapStateToProps, mapDispatchToProps, mergeProps, options)(component)</p>\n<p><strong>mapStateToProps(state, [ownProps])：</strong></p>\n<blockquote>\n<p>mapStateToProps 接受两个参数，store的state和自定义的props，并返回一个新的对象，这个对象会作为props的一部分传入ui组件。我们可以根据组件所需要的数据自定义返回一个对象。ownProps的变化也会触发mapStateToProps</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapStateToProps</span>(<span class=\"params\">state</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> &#123; todos: state.todos &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>mapDispatchToProps(dispatch, [ownProps])：</strong></p>\n<blockquote>\n<p>mapDispatchToProps如果是对象，那么会和store绑定作为props的一部分传入ui组件。如果是个函数，它接受两个参数，bindActionCreators会将action和dispatch绑定并返回一个对象，这个对象会和ownProps一起作为props的一部分传入ui组件。所以不论mapDispatchToProps是对象还是函数，它最终都会返回一个对象，如果是函数，这个对象的key值是可以自定义的</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      todoActions: bindActionCreators(todoActionCreators, dispatch),</div><div class=\"line\">      counterActions: bindActionCreators(counterActionCreators, dispatch)</div><div class=\"line\">   &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>mapDispatchToProps返回的对象其属性其实就是一个个actionCreator，因为已经和dispatch绑定，所以当调用actionCreator时会立即发送action，而不用手动dispatch。ownProps的变化也会触发mapDispatchToProps。</p>\n<p><strong>mergeProps(stateProps, dispatchProps, ownProps)：</strong></p>\n<blockquote>\n<p>将mapStateToProps() 与 mapDispatchToProps()返回的对象和组件自身的props合并成新的props并传入组件。默认返回 Object.assign({}, ownProps, stateProps, dispatchProps) 的结果。</p>\n</blockquote>\n<p><strong>options：</strong></p>\n<blockquote>\n<p>pure = true 表示Connect容器组件将在shouldComponentUpdate中对store的state和ownProps进行浅对比，判断是否发生变化，优化性能。为false则不对比。</p>\n</blockquote>\n<p>其实connect函数并没有做什么，大部分的逻辑都是在它返回的wrapWithConnect函数内实现的，确切的说是在wrapWithConnect内定义的Connect组件里实现的。</p>\n<h3 id=\"下面是一个完整的-react-–-gt-redux-–-gt-react-流程：\"><a href=\"#下面是一个完整的-react-–-gt-redux-–-gt-react-流程：\" class=\"headerlink\" title=\"下面是一个完整的 react –&gt; redux –&gt; react 流程：\"></a>下面是一个完整的 react –&gt; redux –&gt; react 流程：</h3><p>一、Provider组件接受redux的store作为props，然后通过context往下传。</p>\n<p>二、connect函数在初始化的时候会将mapDispatchToProps对象绑定到store，如果mapDispatchToProps是函数则在Connect组件获得store后，根据传入的store.dispatch和action通过bindActionCreators进行绑定，再将返回的对象绑定到store，connect函数会返回一个wrapWithConnect函数，同时wrapWithConnect会被调用且传入一个ui组件，wrapWithConnect内部使用class Connect extends Component定义了一个Connect组件，传入的ui组件就是Connect的子组件，然后Connect组件会通过context获得store，并通过store.getState获得完整的state对象，将state传入mapStateToProps返回stateProps对象、mapDispatchToProps对象或mapDispatchToProps函数会返回一个dispatchProps对象，stateProps、dispatchProps以及Connect组件的props三者通过Object.assign()，或者mergeProps合并为props传入ui组件。然后在ComponentDidMount中调用store.subscribe，注册了一个回调函数handleChange监听state的变化。</p>\n<p>三、此时ui组件就可以在props中找到actionCreator，当我们调用actionCreator时会自动调用dispatch，在dispatch中会调用getState获取整个state，同时注册一个listener监听state的变化，store将获得的state和action传给combineReducers，combineReducers会将state依据state的key值分别传给子reducer，并将action传给全部子reducer，reducer会被依次执行进行action.type的判断，如果有则返回一个新的state，如果没有则返回默认。combineReducers再次将子reducer返回的单个state进行合并成一个新的完整的state。此时state发生了变化。dispatch在state返回新的值之后会调用所有注册的listener函数其中包括handleChange函数，handleChange函数内部首先调用getState获取新的state值并对新旧两个state进行浅对比，如果相同直接return，如果不同则调用mapStateToProps获取stateProps并将新旧两个stateProps进行浅对比，如果相同，直接return结束，不进行后续操作。如果不相同则调用this.setState()触发Connect组件的更新，传入ui组件，触发ui组件的更新，此时ui组件获得新的props，react –&gt; redux –&gt; react 的一次流程结束。</p>\n<p><strong>上面的有点复杂，简化版的流程是：</strong></p>\n<p>一、Provider组件接受redux的store作为props，然后通过context往下传。</p>\n<p>二、connect函数收到Provider传出的store，然后接受三个参数mapStateToProps，mapDispatchToProps和组件，并将state和actionCreator以props传入组件，这时组件就可以调用actionCreator函数来触发reducer函数返回新的state，connect监听到state变化调用setState更新组件并将新的state传入组件。</p>\n<p>connect可以写的非常简洁，mapStateToProps，mapDispatchToProps只不过是传入的回调函数，connect函数在必要的时候会调用它们，名字不是固定的，甚至可以不写名字。</p>\n<p>简化版本：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">connect(state =&gt; state, action)(Component);</div></pre></td></tr></table></figure></p>\n<h2 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h2><p>上面说了react，react-router和redux的知识点。但是怎么样将它们整合起来，搭建一个完整的项目。</p>\n<p>1、先引用 react.js，redux，react-router 等基本文件，建议用npm安装，直接在文件中引用。</p>\n<p>2、从 react.js，redux，react-router 中引入所需要的对象和方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component, PropTypes&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM, &#123;render&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Provider, connect&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;createStore, combineReducers, applyMiddleware&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, Redirect, IndexRoute, browserHistory, hashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</div></pre></td></tr></table></figure></p>\n<p>3、根据需求创建顶层ui组件，每个顶层ui组件对应一个页面。</p>\n<p>4、创建actionCreators和reducers，并用combineReducers将所有的reducer合并成一个大的reduer。利用createStore创建store并引入combineReducers和applyMiddleware。</p>\n<p>5、利用connect将actionCreator，reuder和顶层的ui组件进行关联并返回一个新的组件。</p>\n<p>6、利用connect返回的新的组件配合react-router进行路由的部署，返回一个路由组件Router。</p>\n<p>7、将Router放入最顶层组件Provider，引入store作为Provider的属性。</p>\n<p>8、调用render渲染Provider组件且放入页面的标签中。</p>\n<p>可以看到顶层的ui组件其实被套了四层组件，Provider，Router，Route，Connect，这四个组件并不会在视图上改变react，它们只是功能性的。</p>\n<p>通常我们在顶层的ui组件打印props时可以看到一堆属性：</p>\n<p><img src=\"https://github.com/bailicangdu/pxq/blob/master/src/images/react_props.png\" alt=\"\"></p>\n<p>上图的顶层ui组件属性总共有18个，如果刚刚接触react，可能对这些属性怎么来的感到困惑，其实这些属性来自五个地方：</p>\n<p>组件自定义属性1个，actionCreator返回的对象6个，reducer返回的state4个，Connect组件属性0个，以及Router注入的属性7个。</p>\n","excerpt":"","more":"<h4 id=\"React-技术栈系列教程\"><a href=\"#React-技术栈系列教程\" class=\"headerlink\" title=\"React 技术栈系列教程\"></a>React 技术栈系列教程</h4><p><a href=\"http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\">http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html</a></p>\n<h4 id=\"React-js-入门教程\"><a href=\"#React-js-入门教程\" class=\"headerlink\" title=\"React.js 入门教程\"></a>React.js 入门教程</h4><p><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\">http://www.ruanyifeng.com/blog/2015/03/react.html</a></p>\n<h4 id=\"ECMAScript-6-入门\"><a href=\"#ECMAScript-6-入门\" class=\"headerlink\" title=\"ECMAScript 6 入门\"></a>ECMAScript 6 入门</h4><p><a href=\"http://es6.ruanyifeng.com/#docs/style\">http://es6.ruanyifeng.com/#docs/style</a></p>\n<h4 id=\"ReactNative-中文网\"><a href=\"#ReactNative-中文网\" class=\"headerlink\" title=\"ReactNative 中文网\"></a>ReactNative 中文网</h4><p><a href=\"http://reactnative.cn\">http://reactnative.cn</a></p>\n<h4 id=\"Immutable-详解及-React-中实践\"><a href=\"#Immutable-详解及-React-中实践\" class=\"headerlink\" title=\"Immutable 详解及 React 中实践\"></a>Immutable 详解及 React 中实践</h4><p><a href=\"https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender\">https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender</a></p>\n<h4 id=\"Flux-架构入门教程\"><a href=\"#Flux-架构入门教程\" class=\"headerlink\" title=\"Flux 架构入门教程\"></a>Flux 架构入门教程</h4><p><a href=\"http://www.ruanyifeng.com/blog/2016/01/flux.html\">http://www.ruanyifeng.com/blog/2016/01/flux.html</a></p>\n<h4 id=\"Flux-架构官方英文文档\"><a href=\"#Flux-架构官方英文文档\" class=\"headerlink\" title=\"Flux 架构官方英文文档\"></a>Flux 架构官方英文文档</h4><p><a href=\"https://facebook.github.io/flux/docs/overview.html#content\">https://facebook.github.io/flux/docs/overview.html#content</a></p>\n<h4 id=\"Redux-入门教程（一）：基本用法\"><a href=\"#Redux-入门教程（一）：基本用法\" class=\"headerlink\" title=\"Redux 入门教程（一）：基本用法\"></a>Redux 入门教程（一）：基本用法</h4><p><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html</a></p>\n<h4 id=\"Redux-入门教程（二）：中间件（middleware）与异步操作\"><a href=\"#Redux-入门教程（二）：中间件（middleware）与异步操作\" class=\"headerlink\" title=\"Redux 入门教程（二）：中间件（middleware）与异步操作\"></a>Redux 入门教程（二）：中间件（middleware）与异步操作</h4><p><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html\">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html</a></p>\n<h4 id=\"Redux-入门教程（三）：React-Redux-的用法\"><a href=\"#Redux-入门教程（三）：React-Redux-的用法\" class=\"headerlink\" title=\"Redux 入门教程（三）：React-Redux 的用法\"></a>Redux 入门教程（三）：React-Redux 的用法</h4><p><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html\">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html</a></p>\n<h4 id=\"Redux-js-官方英文文档\"><a href=\"#Redux-js-官方英文文档\" class=\"headerlink\" title=\"Redux.js 官方英文文档\"></a>Redux.js 官方英文文档</h4><p><a href=\"http://redux.js.org\">http://redux.js.org</a></p>\n<h4 id=\"Redux-js-GitHub中文文档\"><a href=\"#Redux-js-GitHub中文文档\" class=\"headerlink\" title=\"Redux.js GitHub中文文档\"></a>Redux.js GitHub中文文档</h4><p><a href=\"http://cn.redux.js.org/docs/react-redux/api.html\">http://cn.redux.js.org/docs/react-redux/api.html</a></p>\n<h4 id=\"Flex-布局教程：语法篇\"><a href=\"#Flex-布局教程：语法篇\" class=\"headerlink\" title=\"Flex 布局教程：语法篇\"></a>Flex 布局教程：语法篇</h4><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool</a></p>\n<h4 id=\"浅谈-React、Flux-与-Redux\"><a href=\"#浅谈-React、Flux-与-Redux\" class=\"headerlink\" title=\"浅谈 React、Flux 与 Redux\"></a>浅谈 React、Flux 与 Redux</h4><p><a href=\"http://www.tuicool.com/articles/3AFJNbj\">http://www.tuicool.com/articles/3AFJNbj</a></p>\n<h4 id=\"怎样理顺react，flux，redux这些概念的关系，开发中有必要使用它们吗\"><a href=\"#怎样理顺react，flux，redux这些概念的关系，开发中有必要使用它们吗\" class=\"headerlink\" title=\"怎样理顺react，flux，redux这些概念的关系，开发中有必要使用它们吗?\"></a>怎样理顺react，flux，redux这些概念的关系，开发中有必要使用它们吗?</h4><p><a href=\"https://www.zhihu.com/question/47686258/answer/107209140\">https://www.zhihu.com/question/47686258/answer/107209140</a></p>\n<h2 id=\"DEMO文章：\"><a href=\"#DEMO文章：\" class=\"headerlink\" title=\"DEMO文章：\"></a>DEMO文章：</h2><h4 id=\"这段时间看了下Redux，写自己对它的感觉。\"><a href=\"#这段时间看了下Redux，写自己对它的感觉。\" class=\"headerlink\" title=\"这段时间看了下Redux，写自己对它的感觉。\"></a>这段时间看了下Redux，写自己对它的感觉。</h4><p><a href=\"http://react-china.org/t/redux/2687\">http://react-china.org/t/redux/2687</a></p>\n<h4 id=\"基于-react-react-router-redux-webpack-ES6-7-less-的完整项目\"><a href=\"#基于-react-react-router-redux-webpack-ES6-7-less-的完整项目\" class=\"headerlink\" title=\"基于 react + react-router + redux + webpack + ES6/7 + less 的完整项目\"></a>基于 react + react-router + redux + webpack + ES6/7 + less 的完整项目</h4><p><a href=\"https://github.com/bailicangdu/react-pxq\">https://github.com/bailicangdu/react-pxq</a></p>\n<h4 id=\"基于webpack-react-react-router-redux-less-flex-css-ES6-的React版cnode社区\"><a href=\"#基于webpack-react-react-router-redux-less-flex-css-ES6-的React版cnode社区\" class=\"headerlink\" title=\"基于webpack + react + react-router + redux + less + flex.css + ES6 的React版cnode社区\"></a>基于webpack + react + react-router + redux + less + flex.css + ES6 的React版cnode社区</h4><p><a href=\"http://react-china.org/t/webpack-react-react-router-redux-less-flex-css-es6-react-cnode/6332\">http://react-china.org/t/webpack-react-react-router-redux-less-flex-css-es6-react-cnode/6332</a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>大前端的时代来了，还不要准备好么？</p>\n<h2 id=\"做React需要会什么？\"><a href=\"#做React需要会什么？\" class=\"headerlink\" title=\"做React需要会什么？\"></a>做React需要会什么？</h2><p>react的功能其实很单一，主要负责渲染的功能，现有的框架，比如angular是一个大而全的框架，用了angular几乎就不需要用其他工具辅助配合，但是react不一样，他只负责ui渲染，想要做好一个项目，往往需要其他库和工具的配合，比如用redux来管理数据，react-router管理路由，react已经全面拥抱es6，所以es6也得掌握，webpack就算是不会配置也要会用，要想提高性能，需要按需加载，immutable.js也得用上，还有单元测试等。</p>\n<h2 id=\"React-是什么\"><a href=\"#React-是什么\" class=\"headerlink\" title=\"React 是什么\"></a>React 是什么</h2><p>用脚本进行DOM操作的代价很昂贵。有个贴切的比喻，把DOM和JavaScript各自想象为一个岛屿，它们之间用收费桥梁连接，js每次访问DOM，都要途径这座桥，并交纳“过桥费”,访问DOM的次数越多，费用也就越高。 因此，推荐的做法是尽量减少过桥的次数，努力待在ECMAScript岛上。因为这个原因react的虚拟dom就显得难能可贵了，它创造了虚拟dom并且将它们储存起来，每当状态发生变化的时候就会创造新的虚拟节点和以前的进行对比，让变化的部分进行渲染。整个过程没有对dom进行获取和操作，只有一个渲染的过程，所以react说是一个ui框架。</p>\n<h2 id=\"React的组件化\"><a href=\"#React的组件化\" class=\"headerlink\" title=\"React的组件化\"></a>React的组件化</h2><p>react的一个组件很明显的由dom视图和state数据组成，两个部分泾渭分明。state是数据中心，它的状态决定着视图的状态。这时候发现似乎和我们一直推崇的MVC开发模式有点区别，没了Controller控制器，那用户交互怎么处理，数据变化谁来管理？然而这并不是react所要关心的事情，它只负责ui的渲染。与其他框架监听数据动态改变dom不同，react采用setState来控制视图的更新。setState会自动调用render函数，触发视图的重新渲染，如果仅仅只是state数据的变化而没有调用setState，并不会触发更新。 组件就是拥有独立功能的视图模块，许多小的组件组成一个大的组件，整个页面就是由一个个组件组合而成。它的好处是利于重复利用和维护。</p>\n<h2 id=\"React的-Diff算法\"><a href=\"#React的-Diff算法\" class=\"headerlink\" title=\"React的 Diff算法\"></a>React的 Diff算法</h2><p>react的diff算法用在什么地方呢？当组件更新的时候，react会创建一个新的虚拟dom树并且会和之前储存的dom树进行比较，这个比较多过程就用到了diff算法，所以组件初始化的时候是用不到的。react提出了一种假设，相同的节点具有类似的结构，而不同的节点具有不同的结构。在这种假设之上进行逐层的比较，如果发现对应的节点是不同的，那就直接删除旧的节点以及它所包含的所有子节点然后替换成新的节点。如果是相同的节点，则只进行属性的更改。</p>\n<p>对于列表的diff算法稍有不同，因为列表通常具有相同的结构，在对列表节点进行删除，插入，排序的时候，单个节点的整体操作远比一个个对比一个个替换要好得多，所以在创建列表的时候需要设置key值，这样react才能分清谁是谁。当然不写key值也可以，但这样通常会报出警告，通知我们加上key值以提高react的性能。</p>\n<p><img src=\"https://github.com/bailicangdu/pxq/blob/master/src/images/diff.png\" alt=\"\"></p>\n<h2 id=\"React组件是怎么来的\"><a href=\"#React组件是怎么来的\" class=\"headerlink\" title=\"React组件是怎么来的\"></a>React组件是怎么来的</h2><p>组件的创造方法为React.createClass() ——创造一个类，react系统内部设计了一套类系统，利用它来创造react组件。但这并不是必须的，我们还可以用es6的class类来创造组件,这也是Facebook官方推荐的写法。</p>\n<p><img src=\"https://github.com/bailicangdu/pxq/blob/master/src/images/icon_class.png\" alt=\"\"></p>\n<p>这两种写法实现的功能一样但是原理却是不同，es6的class类可以看作是构造函数的一个语法糖，可以把它当成构造函数来看，extends实现了类之间的继承 —— 定义一个类Main 继承React.Component所有的属性和方法，组件的生命周期函数就是从这来的。constructor是构造器，在实例化对象时调用，super调用了父类的constructor创造了父类的实例对象this，然后用子类的构造函数进行修改。这和es5的原型继承是不同的，原型继承是先创造一个实例化对象this，然后再继承父级的原型方法。了解了这些之后我们在看组件的时候就清楚很多。</p>\n<p>当我们使用组件&lt; Main /&gt;时，其实是对Main类的实例化——new Main，只不过react对这个过程进行了封装，让它看起来更像是一个标签。</p>\n<p>有三点值得注意：1、定义类名字的首字母必须大写 2、因为class变成了关键字，类选择器需要用className来代替。 3、类和模块内部默认使用严格模式，所以不需要用use strict指定运行模式。</p>\n<h2 id=\"组件的生命周期\"><a href=\"#组件的生命周期\" class=\"headerlink\" title=\"组件的生命周期\"></a>组件的生命周期</h2><p><img src=\"https://github.com/bailicangdu/pxq/blob/master/src/images/react-lifecycle.png\" alt=\"\"></p>\n<p><strong>组件在初始化时会触发5个钩子函数：</strong></p>\n<p>  <strong>1、getDefaultProps()</strong> </p>\n<blockquote>\n<p>设置默认的props，也可以用dufaultProps设置组件的默认属性。</p>\n</blockquote>\n<p>  <strong>2、getInitialState()</strong>  </p>\n<blockquote>\n<p>在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props。</p>\n</blockquote>\n<p> <strong>3、componentWillMount()</strong> </p>\n<blockquote>\n<p>组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。</p>\n</blockquote>\n<p> <strong>4、 render()</strong> </p>\n<blockquote>\n<p> react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。</p>\n</blockquote>\n<p> <strong>5、componentDidMount()</strong> </p>\n<blockquote>\n<p>组件渲染之后调用，可以通过this.getDOMNode()获取和操作dom节点，只调用一次。</p>\n</blockquote>\n<p><strong>在更新时也会触发5个钩子函数：</strong></p>\n<p>  <strong>6、componentWillReceivePorps(nextProps)</strong></p>\n<blockquote>\n<p>组件初始化时不调用，组件接受新的props时调用。</p>\n</blockquote>\n<p>  <strong>7、shouldComponentUpdate(nextProps, nextState)</strong> </p>\n<blockquote>\n<p>react性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候。不过调用this.forceUpdate会跳过此步骤。</p>\n</blockquote>\n<p>  <strong>8、componentWillUpdata(nextProps, nextState)</strong></p>\n<blockquote>\n<p>组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state</p>\n</blockquote>\n<p>  <strong>9、render()</strong></p>\n<blockquote>\n<p>不多说</p>\n</blockquote>\n<p>  <strong>10、componentDidUpdate()</strong></p>\n<blockquote>\n<p>组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。</p>\n</blockquote>\n<p>还有一个卸载钩子函数</p>\n<p>  <strong>11、componentWillUnmount()</strong> </p>\n<blockquote>\n<p>组件将要卸载时调用，一些事件监听和定时器需要在此时清除。</p>\n</blockquote>\n<p>以上可以看出来react总共有10个周期函数（render重复一次），这个10个函数可以满足我们所有对组件操作的需求，利用的好可以提高开发效率和组件性能。</p>\n<h2 id=\"React-Router路由\"><a href=\"#React-Router路由\" class=\"headerlink\" title=\"React-Router路由\"></a>React-Router路由</h2><p>Router就是React的一个组件，它并不会被渲染，只是一个创建内部路由规则的配置对象，根据匹配的路由地址展现相应的组件。Route则对路由地址和组件进行绑定，Route具有嵌套功能，表示路由地址的包涵关系，这和组件之间的嵌套并没有直接联系。Route可以向绑定的组件传递7个属性：children，history，location，params，route，routeParams，routes，每个属性都包涵路由的相关的信息。比较常用的有children（以路由的包涵关系为区分的组件），location（包括地址，参数，地址切换方式，key值，hash值）。react-router提供Link标签，这只是对a标签的封装，值得注意的是，点击链接进行的跳转并不是默认的方式，react-router阻止了a标签的默认行为并用pushState进行hash值的转变。切换页面的过程是在点击Link标签或者后退前进按钮时，会先发生url地址的转变，Router监听到地址的改变根据Route的path属性匹配到对应的组件，将state值改成对应的组件并调用setState触发render函数重新渲染dom。</p>\n<p>当页面比较多时，项目就会变得越来越大，尤其对于单页面应用来说，初次渲染的速度就会很慢，这时候就需要按需加载，只有切换到页面的时候才去加载对应的js文件。react配合webpack进行按需加载的方法很简单，Route的component改为getComponent，组件用require.ensure的方式获取，并在webpack中配置chunkFilename。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> chooseProducts = (location, cb) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</div><div class=\"line\">        cb(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'../Component/chooseProducts'</span>).default)</div><div class=\"line\">    &#125;,<span class=\"string\">'chooseProducts'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> helpCenter = (location, cb) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</div><div class=\"line\">        cb(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'../Component/helpCenter'</span>).default)</div><div class=\"line\">    &#125;,<span class=\"string\">'helpCenter'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> saleRecord = (location, cb) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">require</span>.ensure([], <span class=\"built_in\">require</span> =&gt; &#123;</div><div class=\"line\">        cb(<span class=\"literal\">null</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'../Component/saleRecord'</span>).default)</div><div class=\"line\">    &#125;,<span class=\"string\">'saleRecord'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> RouteConfig = (</div><div class=\"line\">    &lt;Router history=&#123;history&#125;&gt;</div><div class=\"line\">        &lt;Route path=\"/\" component=&#123;Roots&#125;&gt;</div><div class=\"line\">            &lt;IndexRoute component=&#123;index&#125; /&gt;//首页</div><div class=\"line\">            &lt;Route path=\"index\" component=&#123;index&#125; /&gt;</div><div class=\"line\">            &lt;Route path=\"helpCenter\" getComponent=&#123;helpCenter&#125; /&gt;//帮助中心</div><div class=\"line\">            &lt;Route path=\"saleRecord\" getComponent=&#123;saleRecord&#125; /&gt;//销售记录</div><div class=\"line\">            &lt;Redirect from='*' to='/'  /&gt;</div><div class=\"line\">        &lt;/Route&gt;</div><div class=\"line\">    &lt;/Router&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"组件之间的通信\"><a href=\"#组件之间的通信\" class=\"headerlink\" title=\"组件之间的通信\"></a>组件之间的通信</h2><p>react推崇的是单向数据流，自上而下进行数据的传递，但是由下而上或者不在一条数据流上的组件之间的通信就会变的复杂。解决通信问题的方法很多，如果只是父子级关系，父级可以将一个回调函数当作属性传递给子级，子级可以直接调用函数从而和父级通信。</p>\n<p>组件层级嵌套到比较深，可以使用上下文getChildContext来传递信息，这样在不需要将函数一层层往下传，任何一层的子级都可以通过this.context直接访问。</p>\n<p>兄弟关系的组件之间无法直接通信，它们只能利用同一层的上级作为中转站。而如果兄弟组件都是最高层的组件，为了能够让它们进行通信，必须在它们外层再套一层组件，这个外层的组件起着保存数据，传递信息的作用，这其实就是redux所做的事情。</p>\n<p>组件之间的信息还可以通过全局事件来传递。不同页面可以通过参数传递数据，下个页面可以用location.param来获取。其实react本身很简单，难的在于如何优雅高效的实现组件之间数据的交流。</p>\n<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h2><p>首先，redux并不是必须的，它的作用相当于在顶层组件之上又加了一个组件，作用是进行逻辑运算、储存数据和实现组件尤其是顶层组件的通信。如果组件之间的交流不多，逻辑不复杂，只是单纯的进行视图的渲染，这时候用回调，context就行，没必要用redux，用了反而影响开发速度。但是如果组件交流特别频繁，逻辑很复杂，那redux的优势就特别明显了。我第一次做react项目的时候并没有用redux，所有的逻辑都是在组件内部实现，当时为了实现一个逻辑比较复杂的购物车，洋洋洒洒居然写了800多行代码，回头一看我自己都不知道写的是啥，画面太感人。</p>\n<p>先简单说一下redux和react是怎么配合的。react-redux提供了connect和Provider两个好基友，它们一个将组件与redux关联起来，一个将store传给组件。组件通过dispatch发出action，store根据action的type属性调用对应的reducer并传入state和这个action，reducer对state进行处理并返回一个新的state放入store，connect监听到store发生变化，调用setState更新组件，此时组件的props也就跟着变化。</p>\n<h4 id=\"流程是这个样子的：\"><a href=\"#流程是这个样子的：\" class=\"headerlink\" title=\"流程是这个样子的：\"></a>流程是这个样子的：</h4><p><img src=\"https://github.com/bailicangdu/pxq/blob/master/src/images/simple_redux.jpg\" alt=\"\"></p>\n<p>值得注意的是connect，Provider，mapStateToProps,mapDispatchToProps是react-redux提供的，redux本身和react没有半毛钱关系，它只是数据处理中心，没有和react产生任何耦合，是react-redux让它们联系在一起。</p>\n<h4 id=\"接下来具体分析一下，redux以及react-redux到底是怎么实现的。\"><a href=\"#接下来具体分析一下，redux以及react-redux到底是怎么实现的。\" class=\"headerlink\" title=\"接下来具体分析一下，redux以及react-redux到底是怎么实现的。\"></a>接下来具体分析一下，redux以及react-redux到底是怎么实现的。</h4><h4 id=\"先上一张图\"><a href=\"#先上一张图\" class=\"headerlink\" title=\"先上一张图\"></a>先上一张图</h4><p><img src=\"https://github.com/bailicangdu/pxq/blob/master/src/images/all_redux.png\" alt=\"\"></p>\n<p>明显比第一张要复杂，其实两张图说的是同一件事。从上而下慢慢分析：</p>\n<h3 id=\"先说说redux：\"><a href=\"#先说说redux：\" class=\"headerlink\" title=\"先说说redux：\"></a>先说说redux：</h3><h4 id=\"redux主要由三部分组成：store，reducer，action。\"><a href=\"#redux主要由三部分组成：store，reducer，action。\" class=\"headerlink\" title=\"redux主要由三部分组成：store，reducer，action。\"></a>redux主要由三部分组成：store，reducer，action。</h4><p><strong>store</strong>是一个对象，它有四个主要的方法：</p>\n<p><strong>1、dispatch:</strong></p>\n<blockquote>\n<p> 用于action的分发——在createStore中可以用middleware中间件对dispatch进行改造，比如当action传入dispatch会立即触发reducer，有些时候我们不希望它立即触发，而是等待异步操作完成之后再触发，这时候用redux-thunk对dispatch进行改造，以前只能传入一个对象，改造完成后可以传入一个函数，在这个函数里我们手动dispatch一个action对象，这个过程是可控的，就实现了异步。</p>\n</blockquote>\n<p><strong>2、subscribe：</strong></p>\n<blockquote>\n<p>监听state的变化——这个函数在store调用dispatch时会注册一个listener监听state变化，当我们需要知道state是否变化时可以调用，它返回一个函数，调用这个返回的函数可以注销监听。<br>let unsubscribe = store.subscribe(() =&gt; {console.log(‘state发生了变化’)})</p>\n</blockquote>\n<p><strong>3、getState：</strong></p>\n<blockquote>\n<p>获取store中的state——当我们用action触发reducer改变了state时，需要再拿到新的state里的数据，毕竟数据才是我们想要的。getState主要在两个地方需要用到，一是在dispatch拿到action后store需要用它来获取state里的数据，并把这个数据传给reducer，这个过程是自动执行的，二是在我们利用subscribe监听到state发生变化后调用它来获取新的state数据，如果做到这一步，说明我们已经成功了。</p>\n</blockquote>\n<p><strong>4、replaceReducer:</strong> </p>\n<blockquote>\n<p>替换reducer，改变state修改的逻辑。</p>\n</blockquote>\n<p>store可以通过createStore()方法创建，接受三个参数，经过combineReducers合并的reducer和state的初始状态以及改变dispatch的中间件，后两个参数并不是必须的。store的主要作用是将action和reducer联系起来并改变state。</p>\n<p><strong>action:</strong></p>\n<blockquote>\n<p>action是一个对象，其中type属性是必须的，同时可以传入一些数据。action可以用actionCreactor进行创造。dispatch就是把action对象发送出去。</p>\n</blockquote>\n<p><strong>reducer:</strong></p>\n<blockquote>\n<p>reducer是一个函数，它接受一个state和一个action，根据action的type返回一个新的state。根据业务逻辑可以分为很多个reducer，然后通过combineReducers将它们合并，state树中有很多对象，每个state对象对应一个reducer，state对象的名字可以在合并时定义。</p>\n</blockquote>\n<p>像这个样子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> reducer = combineReducers(&#123;</div><div class=\"line\">     a: doSomethingWithA,</div><div class=\"line\">     b: processB,</div><div class=\"line\">     c: c</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><strong>combineReducers:</strong></p>\n<blockquote>\n<p>其实它也是一个reducer，它接受整个state和一个action，然后将整个state拆分发送给对应的reducer进行处理，所有的reducer会收到相同的action，不过它们会根据action的type进行判断，有这个type就进行处理然后返回新的state，没有就返回默认值，然后这些分散的state又会整合在一起返回一个新的state树。</p>\n</blockquote>\n<p>接下来分析一下整体的流程，首先调用store.dispatch将action作为参数传入，同时用getState获取当前的状态树state并注册subscribe的listener监听state变化，再调用combineReducers并将获取的state和action传入。combineReducers会将传入的state和action传给所有reducer，reducer会根据state的key值获取与自己对应的state，并根据action的type返回新的state，触发state树的更新，我们调用subscribe监听到state发生变化后用getState获取新的state数据。</p>\n<p>redux的state和react的state两者完全没有关系，除了名字一样。</p>\n<p><strong>上面分析了redux的主要功能，那么react-redux到底做了什么？</strong></p>\n<h2 id=\"React-Redux\"><a href=\"#React-Redux\" class=\"headerlink\" title=\"React-Redux\"></a>React-Redux</h2><p>如果只使用redux，那么流程是这样的：</p>\n<blockquote>\n<p>component –&gt; dispatch(action) –&gt; reducer –&gt; subscribe –&gt; getState –&gt; component</p>\n</blockquote>\n<p>用了react-redux之后流程是这样的：</p>\n<blockquote>\n<p>component –&gt; actionCreator(data) –&gt; reducer –&gt; component</p>\n</blockquote>\n<p>store的三大功能：dispatch，subscribe，getState都不需要手动来写了。react-redux帮我们做了这些，同时它提供了两个好基友Provider和connect。</p>\n<p><strong>Provider</strong>是一个组件，它接受store作为props，然后通过context往下传，这样react中任何组件都可以通过contex获取store。也就意味着我们可以在任何一个组件里利用dispatch(action)来触发reducer改变state，并用subscribe监听state的变化，然后用getState获取变化后的值。但是并不推荐这样做，它会让数据流变的混乱，过度的耦合也会影响组件的复用，维护起来也更麻烦。</p>\n<p><strong>connect –connect(mapStateToProps, mapDispatchToProps, mergeProps, options)</strong>是一个函数，它接受四个参数并且再返回一个函数–wrapWithConnect，wrapWithConnect接受一个组件作为参数wrapWithConnect(component)，它内部定义一个新组件Connect(容器组件)并将传入的组件(ui组件)作为Connect的子组件然后return出去。</p>\n<p>所以它的完整写法是这样的：connect(mapStateToProps, mapDispatchToProps, mergeProps, options)(component)</p>\n<p><strong>mapStateToProps(state, [ownProps])：</strong></p>\n<blockquote>\n<p>mapStateToProps 接受两个参数，store的state和自定义的props，并返回一个新的对象，这个对象会作为props的一部分传入ui组件。我们可以根据组件所需要的数据自定义返回一个对象。ownProps的变化也会触发mapStateToProps</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapStateToProps</span>(<span class=\"params\">state</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> &#123; todos: state.todos &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>mapDispatchToProps(dispatch, [ownProps])：</strong></p>\n<blockquote>\n<p>mapDispatchToProps如果是对象，那么会和store绑定作为props的一部分传入ui组件。如果是个函数，它接受两个参数，bindActionCreators会将action和dispatch绑定并返回一个对象，这个对象会和ownProps一起作为props的一部分传入ui组件。所以不论mapDispatchToProps是对象还是函数，它最终都会返回一个对象，如果是函数，这个对象的key值是可以自定义的</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapDispatchToProps</span>(<span class=\"params\">dispatch</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      todoActions: bindActionCreators(todoActionCreators, dispatch),</div><div class=\"line\">      counterActions: bindActionCreators(counterActionCreators, dispatch)</div><div class=\"line\">   &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>mapDispatchToProps返回的对象其属性其实就是一个个actionCreator，因为已经和dispatch绑定，所以当调用actionCreator时会立即发送action，而不用手动dispatch。ownProps的变化也会触发mapDispatchToProps。</p>\n<p><strong>mergeProps(stateProps, dispatchProps, ownProps)：</strong></p>\n<blockquote>\n<p>将mapStateToProps() 与 mapDispatchToProps()返回的对象和组件自身的props合并成新的props并传入组件。默认返回 Object.assign({}, ownProps, stateProps, dispatchProps) 的结果。</p>\n</blockquote>\n<p><strong>options：</strong></p>\n<blockquote>\n<p>pure = true 表示Connect容器组件将在shouldComponentUpdate中对store的state和ownProps进行浅对比，判断是否发生变化，优化性能。为false则不对比。</p>\n</blockquote>\n<p>其实connect函数并没有做什么，大部分的逻辑都是在它返回的wrapWithConnect函数内实现的，确切的说是在wrapWithConnect内定义的Connect组件里实现的。</p>\n<h3 id=\"下面是一个完整的-react-–-gt-redux-–-gt-react-流程：\"><a href=\"#下面是一个完整的-react-–-gt-redux-–-gt-react-流程：\" class=\"headerlink\" title=\"下面是一个完整的 react –&gt; redux –&gt; react 流程：\"></a>下面是一个完整的 react –&gt; redux –&gt; react 流程：</h3><p>一、Provider组件接受redux的store作为props，然后通过context往下传。</p>\n<p>二、connect函数在初始化的时候会将mapDispatchToProps对象绑定到store，如果mapDispatchToProps是函数则在Connect组件获得store后，根据传入的store.dispatch和action通过bindActionCreators进行绑定，再将返回的对象绑定到store，connect函数会返回一个wrapWithConnect函数，同时wrapWithConnect会被调用且传入一个ui组件，wrapWithConnect内部使用class Connect extends Component定义了一个Connect组件，传入的ui组件就是Connect的子组件，然后Connect组件会通过context获得store，并通过store.getState获得完整的state对象，将state传入mapStateToProps返回stateProps对象、mapDispatchToProps对象或mapDispatchToProps函数会返回一个dispatchProps对象，stateProps、dispatchProps以及Connect组件的props三者通过Object.assign()，或者mergeProps合并为props传入ui组件。然后在ComponentDidMount中调用store.subscribe，注册了一个回调函数handleChange监听state的变化。</p>\n<p>三、此时ui组件就可以在props中找到actionCreator，当我们调用actionCreator时会自动调用dispatch，在dispatch中会调用getState获取整个state，同时注册一个listener监听state的变化，store将获得的state和action传给combineReducers，combineReducers会将state依据state的key值分别传给子reducer，并将action传给全部子reducer，reducer会被依次执行进行action.type的判断，如果有则返回一个新的state，如果没有则返回默认。combineReducers再次将子reducer返回的单个state进行合并成一个新的完整的state。此时state发生了变化。dispatch在state返回新的值之后会调用所有注册的listener函数其中包括handleChange函数，handleChange函数内部首先调用getState获取新的state值并对新旧两个state进行浅对比，如果相同直接return，如果不同则调用mapStateToProps获取stateProps并将新旧两个stateProps进行浅对比，如果相同，直接return结束，不进行后续操作。如果不相同则调用this.setState()触发Connect组件的更新，传入ui组件，触发ui组件的更新，此时ui组件获得新的props，react –&gt; redux –&gt; react 的一次流程结束。</p>\n<p><strong>上面的有点复杂，简化版的流程是：</strong></p>\n<p>一、Provider组件接受redux的store作为props，然后通过context往下传。</p>\n<p>二、connect函数收到Provider传出的store，然后接受三个参数mapStateToProps，mapDispatchToProps和组件，并将state和actionCreator以props传入组件，这时组件就可以调用actionCreator函数来触发reducer函数返回新的state，connect监听到state变化调用setState更新组件并将新的state传入组件。</p>\n<p>connect可以写的非常简洁，mapStateToProps，mapDispatchToProps只不过是传入的回调函数，connect函数在必要的时候会调用它们，名字不是固定的，甚至可以不写名字。</p>\n<p>简化版本：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">connect(state =&gt; state, action)(Component);</div></pre></td></tr></table></figure></p>\n<h2 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h2><p>上面说了react，react-router和redux的知识点。但是怎么样将它们整合起来，搭建一个完整的项目。</p>\n<p>1、先引用 react.js，redux，react-router 等基本文件，建议用npm安装，直接在文件中引用。</p>\n<p>2、从 react.js，redux，react-router 中引入所需要的对象和方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component, PropTypes&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM, &#123;render&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Provider, connect&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;createStore, combineReducers, applyMiddleware&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Route, Redirect, IndexRoute, browserHistory, hashHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</div></pre></td></tr></table></figure></p>\n<p>3、根据需求创建顶层ui组件，每个顶层ui组件对应一个页面。</p>\n<p>4、创建actionCreators和reducers，并用combineReducers将所有的reducer合并成一个大的reduer。利用createStore创建store并引入combineReducers和applyMiddleware。</p>\n<p>5、利用connect将actionCreator，reuder和顶层的ui组件进行关联并返回一个新的组件。</p>\n<p>6、利用connect返回的新的组件配合react-router进行路由的部署，返回一个路由组件Router。</p>\n<p>7、将Router放入最顶层组件Provider，引入store作为Provider的属性。</p>\n<p>8、调用render渲染Provider组件且放入页面的标签中。</p>\n<p>可以看到顶层的ui组件其实被套了四层组件，Provider，Router，Route，Connect，这四个组件并不会在视图上改变react，它们只是功能性的。</p>\n<p>通常我们在顶层的ui组件打印props时可以看到一堆属性：</p>\n<p><img src=\"https://github.com/bailicangdu/pxq/blob/master/src/images/react_props.png\" alt=\"\"></p>\n<p>上图的顶层ui组件属性总共有18个，如果刚刚接触react，可能对这些属性怎么来的感到困惑，其实这些属性来自五个地方：</p>\n<p>组件自定义属性1个，actionCreator返回的对象6个，reducer返回的state4个，Connect组件属性0个，以及Router注入的属性7个。</p>\n"},{"title":"Swift学习-Swift3.0已出坑，适配iOS10,项目迁移Swift3.0问题总结。","date":"2016-10-14T16:23:31.000Z","_content":"# 前言\n>Swift项目,为适配iOS10,无奈只能更新Xcode 8 ,可是发现一入3.0深似海,从此幸福是路人.于是边摸索边修改,在节前的完成代码迁移.节后在完成手头工作后,整理思路,把Swift3.0迁移的心得分享大家.\n废话不多说分享下心得:\n\n## 1、代码篇:(一定要做好备份!!!)\n---\n\n#### 1>升级Xcode8正式版(8A218a).\n\n![Xcode 8 ](http://upload-images.jianshu.io/upload_images/1666327-98d84a6ab3a12740.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 2>使用系统自带的桥接工具.(原装的就是好,直接打开2.2项目也会提醒->步骤:3)\n\n###### Edit > Convert > To Current Swift Syntax..\n\n![桥接选项](http://upload-images.jianshu.io/upload_images/1666327-fec7c1aada9529b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 3>不用说就是为3.0来的,选择Swift3.\n\n![Swift3.0](http://upload-images.jianshu.io/upload_images/1666327-84d13f5bf197baa0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 4>上面的框架就不用选了,只选择`.app`的.(这个是检测代码,不然你会哭的)\n\n![.app](http://upload-images.jianshu.io/upload_images/1666327-4e3fc24ecf949ac7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 5>检测完后.\n\n在左边的选择页中选择好要转移的代码,左边的代码是Swift3.0代码,右侧代码时swift2.2代码->点`Save`.\n![6.png](http://upload-images.jianshu.io/upload_images/1666327-bea954aa25e31670.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 2、第三方框架篇:(使用的cocoapods管理的第三方框架)\n\n---\n\n#### 1>发现框架报错.(不要怕,按照错误一样一样来)\n##### * 问题1:--.第三方框架版本问题,\"Use Legacy Swift Language Version\"\n\n“Use Legacy Swift Language Version” (SWIFT_VERSION) is required to be configured correctly for targets which use Swift. Use the [Edit > Convert > To Current Swift Syntax…] menu to choose a Swift version or use the Build Settings editor to configure the build setting directly.\n![第三方框架版本问题](http://upload-images.jianshu.io/upload_images/1666327-3146e35e3b1dff2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n在pod的配置文件里面的Use Legacy Swift Language Version选择`YES`错误就消除了\n`Pods`->`TARGETS->指定框架` -> `Build Settings` -> `Use Legacy Swift Language Version`\n![pod的配置](http://upload-images.jianshu.io/upload_images/1666327-ced879460f44ea3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### * 问题2:--.lipo:can't open input file:xxx(No such file or directory)\n\n![lipo:](http://upload-images.jianshu.io/upload_images/1666327-bb07e2570e751087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`PROJRCT`-> `Build Settings` -> `Build Active Architecture only`->`YES`\n\n![lipo](http://upload-images.jianshu.io/upload_images/1666327-9bc9b5e892190e90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n其他问题后续收集再整理...\n\n#### 2>发现框架过时,需要更新框架.\n\n由于3.0的更新,Swift各个主流框架都已经及时的推出了新的版本,例如:Alamofire 4.0.0 , SnapKit 3.0.0 , Kingfisher 3.1.0 , SwiftyJSON 也已经更新了专供Swift3的分支.\n所以,要更新框架以供使用.\n\n![更新主流第三方框架](http://upload-images.jianshu.io/upload_images/1666327-d67e896f28e9c548.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\npod 'SnapKit', '~> 3.0.0'\npod 'SwiftyJSON', :git => 'https://github.com/acegreen/SwiftyJSON.git', :branch => 'swift3'\npod 'Alamofire','~> 4.0.0'\npod 'Kingfisher','~> 3.1.0'\n```\n\n可能会出现以下问题:\n###### * SnapKit框架问题:\n\n![SnapKit](http://upload-images.jianshu.io/upload_images/1666327-b66d211f0bbcc0f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n看到200多个框架错误后凌乱了.都是3.0语法了,为什么还会报错,不在框架,在自己安装的cocoapods环境有关系.\n\n解决方案:\n需要更新最新环境到`cocoapods 1.1.0.rc.2`\n\n```\nsudo gem install cocoapods --pre\n```\n可以参照SnapKit的官方issues:\nhttps://github.com/SnapKit/SnapKit/issues/300\n如果没有安装 cocoapods可以参照之前写的博客.\n[安装 cocoapods 1.1.0心得体会:](http://www.jianshu.com/p/b98b8ac7d22d)\n\n###### * Alamofire框架问题:\n\n![Alamofire](http://upload-images.jianshu.io/upload_images/1666327-14c391721f02140b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nAlamofire/Source/ServerTrustPolicy.swift:243:41: Use of unresolved identifier 'kSecTrustResultInvalid'\n\nAlamofire的官方issues:\nhttps://github.com/Alamofire/Alamofire/issues/1541\n\n解决方案:\n上面也提到了,更新最新的Alamofire框架.\n\n```\npod 'Alamofire','~> 4.0.0'\n```\n\n可能还遇到的问题:\n\n```\n[!] Unable to satisfy the following requirements:\n\n- `Alamofire (~> 4.0.0)` required by `Podfile`\n\nSpecs satisfying the `Alamofire (~> 4.0.0)` dependency were found, but they required a higher minimum deployment target.\n```\n解决方法:\nAlamofire 4.0.0 最低要求系统版本9.0,已经将系统升高到9.0还是无法安装.\n目前的没有找到有效的解决方法,只有一个方案就是重新立项先集成框架,在把转接完的代码迁移到新的项目中去.\n\n---\n10月24日,更新解决方法.\n之前提示Alamofire 4.0.0, Podfile报错.\n需要在Podfile文件中指定最低系统9.0项目版本.`platform :ios,'9.0'`\nAlamofire的官方issues:\nhttps://github.com/Alamofire/Alamofire/issues/1639\n![指定9.0](http://upload-images.jianshu.io/upload_images/1666327-2638ba907c545a40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n\n###### * 可能还会有其他框架问题,目前还没有遇到.欢迎讨论.\n\n## 3.其他问题总结:\n---\n\n###### * 关于重建工程来迁移到Swift3.0解决方案.\n\n前面也提到了,发现有个别问题无法解决,一直解决也是没有成效,于是使用目前来说最简洁的方法就重新建立工程.\n\n先把新建的工程集成好最新支持Swift3.0的第三方框架,测试程序可不可以跑通后,再把之前转换完的代码一个分类一个分类迁移到新的工程里面.\n\n至于手工拖入的第三方依赖库,应用跳转,按照之前集成好的照搬.或者重新集成.\n\n###### * Swift3.0语法的学习.\n\n1.官方已经给出文档以及转变说明.\nApple Swift 3.0官方文档:[The Swift Programming Language (Swift 3)](https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309)\n\n![Apple Swift 3.0官方文档](http://upload-images.jianshu.io/upload_images/1666327-0b6b3aaf1d67bed3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2.Apple  Swift 3.0官方演变:[apple/swift-evolution/releases/swift-3_0.md](https://github.com/apple/swift-evolution/blob/master/releases/swift-3_0.md)\n\n![Swift 3.0官方演变](http://upload-images.jianshu.io/upload_images/1666327-0e3bcf5083b6d4e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n其主要是废除了一些API,简化代码的书写,例如取出OC中的NS类前缀,C语言的风格,等等.\n\n3.国外raywenderlich的Swift 3.0迁移介绍:\nhttps://www.raywenderlich.com/135655/whats-new-swift-3\n\n![raywenderlich的Swift 3.0](http://upload-images.jianshu.io/upload_images/1666327-0cb70ac2167f7a10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n######  * 后续持续补充.\n\n## 后记\n* 对Swift3的书写方式还需要进一步的加强,虽然和之前的写法有着轻微的改动,使整体变的更加的简洁、严谨,但是稍不注意还是出现莫名其妙的报错.\n* 展望Swift4,让暴风雨来的更猛烈些吧.\n* 欢迎讨论、批评、指正.\n\n","source":"_posts/Swift学习-Swift3-0已出坑，适配iOS10-项目迁移Swift3-0问题总结。.md","raw":"---\ntitle: 'Swift学习-Swift3.0已出坑，适配iOS10,项目迁移Swift3.0问题总结。'\ndate: 2016-10-15 00:23:31\ncategories:\n    - iOS\ntags: \n    - Swift\n---\n# 前言\n>Swift项目,为适配iOS10,无奈只能更新Xcode 8 ,可是发现一入3.0深似海,从此幸福是路人.于是边摸索边修改,在节前的完成代码迁移.节后在完成手头工作后,整理思路,把Swift3.0迁移的心得分享大家.\n废话不多说分享下心得:\n\n## 1、代码篇:(一定要做好备份!!!)\n---\n\n#### 1>升级Xcode8正式版(8A218a).\n\n![Xcode 8 ](http://upload-images.jianshu.io/upload_images/1666327-98d84a6ab3a12740.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 2>使用系统自带的桥接工具.(原装的就是好,直接打开2.2项目也会提醒->步骤:3)\n\n###### Edit > Convert > To Current Swift Syntax..\n\n![桥接选项](http://upload-images.jianshu.io/upload_images/1666327-fec7c1aada9529b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 3>不用说就是为3.0来的,选择Swift3.\n\n![Swift3.0](http://upload-images.jianshu.io/upload_images/1666327-84d13f5bf197baa0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 4>上面的框架就不用选了,只选择`.app`的.(这个是检测代码,不然你会哭的)\n\n![.app](http://upload-images.jianshu.io/upload_images/1666327-4e3fc24ecf949ac7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 5>检测完后.\n\n在左边的选择页中选择好要转移的代码,左边的代码是Swift3.0代码,右侧代码时swift2.2代码->点`Save`.\n![6.png](http://upload-images.jianshu.io/upload_images/1666327-bea954aa25e31670.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 2、第三方框架篇:(使用的cocoapods管理的第三方框架)\n\n---\n\n#### 1>发现框架报错.(不要怕,按照错误一样一样来)\n##### * 问题1:--.第三方框架版本问题,\"Use Legacy Swift Language Version\"\n\n“Use Legacy Swift Language Version” (SWIFT_VERSION) is required to be configured correctly for targets which use Swift. Use the [Edit > Convert > To Current Swift Syntax…] menu to choose a Swift version or use the Build Settings editor to configure the build setting directly.\n![第三方框架版本问题](http://upload-images.jianshu.io/upload_images/1666327-3146e35e3b1dff2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n在pod的配置文件里面的Use Legacy Swift Language Version选择`YES`错误就消除了\n`Pods`->`TARGETS->指定框架` -> `Build Settings` -> `Use Legacy Swift Language Version`\n![pod的配置](http://upload-images.jianshu.io/upload_images/1666327-ced879460f44ea3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### * 问题2:--.lipo:can't open input file:xxx(No such file or directory)\n\n![lipo:](http://upload-images.jianshu.io/upload_images/1666327-bb07e2570e751087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`PROJRCT`-> `Build Settings` -> `Build Active Architecture only`->`YES`\n\n![lipo](http://upload-images.jianshu.io/upload_images/1666327-9bc9b5e892190e90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n其他问题后续收集再整理...\n\n#### 2>发现框架过时,需要更新框架.\n\n由于3.0的更新,Swift各个主流框架都已经及时的推出了新的版本,例如:Alamofire 4.0.0 , SnapKit 3.0.0 , Kingfisher 3.1.0 , SwiftyJSON 也已经更新了专供Swift3的分支.\n所以,要更新框架以供使用.\n\n![更新主流第三方框架](http://upload-images.jianshu.io/upload_images/1666327-d67e896f28e9c548.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\npod 'SnapKit', '~> 3.0.0'\npod 'SwiftyJSON', :git => 'https://github.com/acegreen/SwiftyJSON.git', :branch => 'swift3'\npod 'Alamofire','~> 4.0.0'\npod 'Kingfisher','~> 3.1.0'\n```\n\n可能会出现以下问题:\n###### * SnapKit框架问题:\n\n![SnapKit](http://upload-images.jianshu.io/upload_images/1666327-b66d211f0bbcc0f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n看到200多个框架错误后凌乱了.都是3.0语法了,为什么还会报错,不在框架,在自己安装的cocoapods环境有关系.\n\n解决方案:\n需要更新最新环境到`cocoapods 1.1.0.rc.2`\n\n```\nsudo gem install cocoapods --pre\n```\n可以参照SnapKit的官方issues:\nhttps://github.com/SnapKit/SnapKit/issues/300\n如果没有安装 cocoapods可以参照之前写的博客.\n[安装 cocoapods 1.1.0心得体会:](http://www.jianshu.com/p/b98b8ac7d22d)\n\n###### * Alamofire框架问题:\n\n![Alamofire](http://upload-images.jianshu.io/upload_images/1666327-14c391721f02140b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nAlamofire/Source/ServerTrustPolicy.swift:243:41: Use of unresolved identifier 'kSecTrustResultInvalid'\n\nAlamofire的官方issues:\nhttps://github.com/Alamofire/Alamofire/issues/1541\n\n解决方案:\n上面也提到了,更新最新的Alamofire框架.\n\n```\npod 'Alamofire','~> 4.0.0'\n```\n\n可能还遇到的问题:\n\n```\n[!] Unable to satisfy the following requirements:\n\n- `Alamofire (~> 4.0.0)` required by `Podfile`\n\nSpecs satisfying the `Alamofire (~> 4.0.0)` dependency were found, but they required a higher minimum deployment target.\n```\n解决方法:\nAlamofire 4.0.0 最低要求系统版本9.0,已经将系统升高到9.0还是无法安装.\n目前的没有找到有效的解决方法,只有一个方案就是重新立项先集成框架,在把转接完的代码迁移到新的项目中去.\n\n---\n10月24日,更新解决方法.\n之前提示Alamofire 4.0.0, Podfile报错.\n需要在Podfile文件中指定最低系统9.0项目版本.`platform :ios,'9.0'`\nAlamofire的官方issues:\nhttps://github.com/Alamofire/Alamofire/issues/1639\n![指定9.0](http://upload-images.jianshu.io/upload_images/1666327-2638ba907c545a40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n\n###### * 可能还会有其他框架问题,目前还没有遇到.欢迎讨论.\n\n## 3.其他问题总结:\n---\n\n###### * 关于重建工程来迁移到Swift3.0解决方案.\n\n前面也提到了,发现有个别问题无法解决,一直解决也是没有成效,于是使用目前来说最简洁的方法就重新建立工程.\n\n先把新建的工程集成好最新支持Swift3.0的第三方框架,测试程序可不可以跑通后,再把之前转换完的代码一个分类一个分类迁移到新的工程里面.\n\n至于手工拖入的第三方依赖库,应用跳转,按照之前集成好的照搬.或者重新集成.\n\n###### * Swift3.0语法的学习.\n\n1.官方已经给出文档以及转变说明.\nApple Swift 3.0官方文档:[The Swift Programming Language (Swift 3)](https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309)\n\n![Apple Swift 3.0官方文档](http://upload-images.jianshu.io/upload_images/1666327-0b6b3aaf1d67bed3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2.Apple  Swift 3.0官方演变:[apple/swift-evolution/releases/swift-3_0.md](https://github.com/apple/swift-evolution/blob/master/releases/swift-3_0.md)\n\n![Swift 3.0官方演变](http://upload-images.jianshu.io/upload_images/1666327-0e3bcf5083b6d4e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n其主要是废除了一些API,简化代码的书写,例如取出OC中的NS类前缀,C语言的风格,等等.\n\n3.国外raywenderlich的Swift 3.0迁移介绍:\nhttps://www.raywenderlich.com/135655/whats-new-swift-3\n\n![raywenderlich的Swift 3.0](http://upload-images.jianshu.io/upload_images/1666327-0cb70ac2167f7a10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n######  * 后续持续补充.\n\n## 后记\n* 对Swift3的书写方式还需要进一步的加强,虽然和之前的写法有着轻微的改动,使整体变的更加的简洁、严谨,但是稍不注意还是出现莫名其妙的报错.\n* 展望Swift4,让暴风雨来的更猛烈些吧.\n* 欢迎讨论、批评、指正.\n\n","slug":"Swift学习-Swift3-0已出坑，适配iOS10-项目迁移Swift3-0问题总结。","published":1,"updated":"2017-03-16T04:58:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0c1v89i000qksfylnweo852","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>Swift项目,为适配iOS10,无奈只能更新Xcode 8 ,可是发现一入3.0深似海,从此幸福是路人.于是边摸索边修改,在节前的完成代码迁移.节后在完成手头工作后,整理思路,把Swift3.0迁移的心得分享大家.<br>废话不多说分享下心得:</p>\n</blockquote>\n<h2 id=\"1、代码篇-一定要做好备份\"><a href=\"#1、代码篇-一定要做好备份\" class=\"headerlink\" title=\"1、代码篇:(一定要做好备份!!!)\"></a>1、代码篇:(一定要做好备份!!!)</h2><hr>\n<h4 id=\"1-gt-升级Xcode8正式版-8A218a\"><a href=\"#1-gt-升级Xcode8正式版-8A218a\" class=\"headerlink\" title=\"1&gt;升级Xcode8正式版(8A218a).\"></a>1&gt;升级Xcode8正式版(8A218a).</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-98d84a6ab3a12740.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Xcode 8 \"></p>\n<h4 id=\"2-gt-使用系统自带的桥接工具-原装的就是好-直接打开2-2项目也会提醒-gt-步骤-3\"><a href=\"#2-gt-使用系统自带的桥接工具-原装的就是好-直接打开2-2项目也会提醒-gt-步骤-3\" class=\"headerlink\" title=\"2&gt;使用系统自带的桥接工具.(原装的就是好,直接打开2.2项目也会提醒-&gt;步骤:3)\"></a>2&gt;使用系统自带的桥接工具.(原装的就是好,直接打开2.2项目也会提醒-&gt;步骤:3)</h4><h6 id=\"Edit-gt-Convert-gt-To-Current-Swift-Syntax\"><a href=\"#Edit-gt-Convert-gt-To-Current-Swift-Syntax\" class=\"headerlink\" title=\"Edit &gt; Convert &gt; To Current Swift Syntax..\"></a>Edit &gt; Convert &gt; To Current Swift Syntax..</h6><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-fec7c1aada9529b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"桥接选项\"></p>\n<h4 id=\"3-gt-不用说就是为3-0来的-选择Swift3\"><a href=\"#3-gt-不用说就是为3-0来的-选择Swift3\" class=\"headerlink\" title=\"3&gt;不用说就是为3.0来的,选择Swift3.\"></a>3&gt;不用说就是为3.0来的,选择Swift3.</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-84d13f5bf197baa0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Swift3.0\"></p>\n<h4 id=\"4-gt-上面的框架就不用选了-只选择-app的-这个是检测代码-不然你会哭的\"><a href=\"#4-gt-上面的框架就不用选了-只选择-app的-这个是检测代码-不然你会哭的\" class=\"headerlink\" title=\"4&gt;上面的框架就不用选了,只选择.app的.(这个是检测代码,不然你会哭的)\"></a>4&gt;上面的框架就不用选了,只选择<code>.app</code>的.(这个是检测代码,不然你会哭的)</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-4e3fc24ecf949ac7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\".app\"></p>\n<h4 id=\"5-gt-检测完后\"><a href=\"#5-gt-检测完后\" class=\"headerlink\" title=\"5&gt;检测完后.\"></a>5&gt;检测完后.</h4><p>在左边的选择页中选择好要转移的代码,左边的代码是Swift3.0代码,右侧代码时swift2.2代码-&gt;点<code>Save</code>.<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-bea954aa25e31670.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"6.png\"></p>\n<h2 id=\"2、第三方框架篇-使用的cocoapods管理的第三方框架\"><a href=\"#2、第三方框架篇-使用的cocoapods管理的第三方框架\" class=\"headerlink\" title=\"2、第三方框架篇:(使用的cocoapods管理的第三方框架)\"></a>2、第三方框架篇:(使用的cocoapods管理的第三方框架)</h2><hr>\n<h4 id=\"1-gt-发现框架报错-不要怕-按照错误一样一样来\"><a href=\"#1-gt-发现框架报错-不要怕-按照错误一样一样来\" class=\"headerlink\" title=\"1&gt;发现框架报错.(不要怕,按照错误一样一样来)\"></a>1&gt;发现框架报错.(不要怕,按照错误一样一样来)</h4><h5 id=\"问题1-–-第三方框架版本问题-”Use-Legacy-Swift-Language-Version”\"><a href=\"#问题1-–-第三方框架版本问题-”Use-Legacy-Swift-Language-Version”\" class=\"headerlink\" title=\"* 问题1:–.第三方框架版本问题,”Use Legacy Swift Language Version”\"></a>* 问题1:–.第三方框架版本问题,”Use Legacy Swift Language Version”</h5><p>“Use Legacy Swift Language Version” (SWIFT_VERSION) is required to be configured correctly for targets which use Swift. Use the [Edit &gt; Convert &gt; To Current Swift Syntax…] menu to choose a Swift version or use the Build Settings editor to configure the build setting directly.<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-3146e35e3b1dff2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"第三方框架版本问题\"><br>在pod的配置文件里面的Use Legacy Swift Language Version选择<code>YES</code>错误就消除了<br><code>Pods</code>-&gt;<code>TARGETS-&gt;指定框架</code> -&gt; <code>Build Settings</code> -&gt; <code>Use Legacy Swift Language Version</code><br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-ced879460f44ea3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"pod的配置\"></p>\n<h5 id=\"问题2-–-lipo-can’t-open-input-file-xxx-No-such-file-or-directory\"><a href=\"#问题2-–-lipo-can’t-open-input-file-xxx-No-such-file-or-directory\" class=\"headerlink\" title=\"* 问题2:–.lipo:can’t open input file:xxx(No such file or directory)\"></a>* 问题2:–.lipo:can’t open input file:xxx(No such file or directory)</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-bb07e2570e751087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"lipo:\"></p>\n<p><code>PROJRCT</code>-&gt; <code>Build Settings</code> -&gt; <code>Build Active Architecture only</code>-&gt;<code>YES</code></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-9bc9b5e892190e90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"lipo\"><br>其他问题后续收集再整理…</p>\n<h4 id=\"2-gt-发现框架过时-需要更新框架\"><a href=\"#2-gt-发现框架过时-需要更新框架\" class=\"headerlink\" title=\"2&gt;发现框架过时,需要更新框架.\"></a>2&gt;发现框架过时,需要更新框架.</h4><p>由于3.0的更新,Swift各个主流框架都已经及时的推出了新的版本,例如:Alamofire 4.0.0 , SnapKit 3.0.0 , Kingfisher 3.1.0 , SwiftyJSON 也已经更新了专供Swift3的分支.<br>所以,要更新框架以供使用.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-d67e896f28e9c548.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"更新主流第三方框架\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod &apos;SnapKit&apos;, &apos;~&gt; 3.0.0&apos;</div><div class=\"line\">pod &apos;SwiftyJSON&apos;, :git =&gt; &apos;https://github.com/acegreen/SwiftyJSON.git&apos;, :branch =&gt; &apos;swift3&apos;</div><div class=\"line\">pod &apos;Alamofire&apos;,&apos;~&gt; 4.0.0&apos;</div><div class=\"line\">pod &apos;Kingfisher&apos;,&apos;~&gt; 3.1.0&apos;</div></pre></td></tr></table></figure>\n<p>可能会出现以下问题:</p>\n<h6 id=\"SnapKit框架问题\"><a href=\"#SnapKit框架问题\" class=\"headerlink\" title=\"* SnapKit框架问题:\"></a>* SnapKit框架问题:</h6><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-b66d211f0bbcc0f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"SnapKit\"></p>\n<p>看到200多个框架错误后凌乱了.都是3.0语法了,为什么还会报错,不在框架,在自己安装的cocoapods环境有关系.</p>\n<p>解决方案:<br>需要更新最新环境到<code>cocoapods 1.1.0.rc.2</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods --pre</div></pre></td></tr></table></figure>\n<p>可以参照SnapKit的官方issues:<br><a href=\"https://github.com/SnapKit/SnapKit/issues/300\" target=\"_blank\" rel=\"external\">https://github.com/SnapKit/SnapKit/issues/300</a><br>如果没有安装 cocoapods可以参照之前写的博客.<br><a href=\"http://www.jianshu.com/p/b98b8ac7d22d\" target=\"_blank\" rel=\"external\">安装 cocoapods 1.1.0心得体会:</a></p>\n<h6 id=\"Alamofire框架问题\"><a href=\"#Alamofire框架问题\" class=\"headerlink\" title=\"* Alamofire框架问题:\"></a>* Alamofire框架问题:</h6><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-14c391721f02140b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alamofire\"></p>\n<p>Alamofire/Source/ServerTrustPolicy.swift:243:41: Use of unresolved identifier ‘kSecTrustResultInvalid’</p>\n<p>Alamofire的官方issues:<br><a href=\"https://github.com/Alamofire/Alamofire/issues/1541\" target=\"_blank\" rel=\"external\">https://github.com/Alamofire/Alamofire/issues/1541</a></p>\n<p>解决方案:<br>上面也提到了,更新最新的Alamofire框架.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod &apos;Alamofire&apos;,&apos;~&gt; 4.0.0&apos;</div></pre></td></tr></table></figure>\n<p>可能还遇到的问题:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[!] Unable to satisfy the following requirements:</div><div class=\"line\"></div><div class=\"line\">- `Alamofire (~&gt; 4.0.0)` required by `Podfile`</div><div class=\"line\"></div><div class=\"line\">Specs satisfying the `Alamofire (~&gt; 4.0.0)` dependency were found, but they required a higher minimum deployment target.</div></pre></td></tr></table></figure>\n<p>解决方法:<br>Alamofire 4.0.0 最低要求系统版本9.0,已经将系统升高到9.0还是无法安装.<br>目前的没有找到有效的解决方法,只有一个方案就是重新立项先集成框架,在把转接完的代码迁移到新的项目中去.</p>\n<hr>\n<p>10月24日,更新解决方法.<br>之前提示Alamofire 4.0.0, Podfile报错.<br>需要在Podfile文件中指定最低系统9.0项目版本.<code>platform :ios,&#39;9.0&#39;</code><br>Alamofire的官方issues:<br><a href=\"https://github.com/Alamofire/Alamofire/issues/1639\" target=\"_blank\" rel=\"external\">https://github.com/Alamofire/Alamofire/issues/1639</a><br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-2638ba907c545a40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"指定9.0\"></p>\n<hr>\n<h6 id=\"可能还会有其他框架问题-目前还没有遇到-欢迎讨论\"><a href=\"#可能还会有其他框架问题-目前还没有遇到-欢迎讨论\" class=\"headerlink\" title=\"* 可能还会有其他框架问题,目前还没有遇到.欢迎讨论.\"></a>* 可能还会有其他框架问题,目前还没有遇到.欢迎讨论.</h6><h2 id=\"3-其他问题总结\"><a href=\"#3-其他问题总结\" class=\"headerlink\" title=\"3.其他问题总结:\"></a>3.其他问题总结:</h2><hr>\n<h6 id=\"关于重建工程来迁移到Swift3-0解决方案\"><a href=\"#关于重建工程来迁移到Swift3-0解决方案\" class=\"headerlink\" title=\"* 关于重建工程来迁移到Swift3.0解决方案.\"></a>* 关于重建工程来迁移到Swift3.0解决方案.</h6><p>前面也提到了,发现有个别问题无法解决,一直解决也是没有成效,于是使用目前来说最简洁的方法就重新建立工程.</p>\n<p>先把新建的工程集成好最新支持Swift3.0的第三方框架,测试程序可不可以跑通后,再把之前转换完的代码一个分类一个分类迁移到新的工程里面.</p>\n<p>至于手工拖入的第三方依赖库,应用跳转,按照之前集成好的照搬.或者重新集成.</p>\n<h6 id=\"Swift3-0语法的学习\"><a href=\"#Swift3-0语法的学习\" class=\"headerlink\" title=\"* Swift3.0语法的学习.\"></a>* Swift3.0语法的学习.</h6><p>1.官方已经给出文档以及转变说明.<br>Apple Swift 3.0官方文档:<a href=\"https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309\" target=\"_blank\" rel=\"external\">The Swift Programming Language (Swift 3)</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-0b6b3aaf1d67bed3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Apple Swift 3.0官方文档\"></p>\n<p>2.Apple  Swift 3.0官方演变:<a href=\"https://github.com/apple/swift-evolution/blob/master/releases/swift-3_0.md\" target=\"_blank\" rel=\"external\">apple/swift-evolution/releases/swift-3_0.md</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-0e3bcf5083b6d4e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Swift 3.0官方演变\"><br>其主要是废除了一些API,简化代码的书写,例如取出OC中的NS类前缀,C语言的风格,等等.</p>\n<p>3.国外raywenderlich的Swift 3.0迁移介绍:<br><a href=\"https://www.raywenderlich.com/135655/whats-new-swift-3\" target=\"_blank\" rel=\"external\">https://www.raywenderlich.com/135655/whats-new-swift-3</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-0cb70ac2167f7a10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"raywenderlich的Swift 3.0\"></p>\n<h6 id=\"后续持续补充\"><a href=\"#后续持续补充\" class=\"headerlink\" title=\"* 后续持续补充.\"></a>* 后续持续补充.</h6><h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><ul>\n<li>对Swift3的书写方式还需要进一步的加强,虽然和之前的写法有着轻微的改动,使整体变的更加的简洁、严谨,但是稍不注意还是出现莫名其妙的报错.</li>\n<li>展望Swift4,让暴风雨来的更猛烈些吧.</li>\n<li>欢迎讨论、批评、指正.</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>Swift项目,为适配iOS10,无奈只能更新Xcode 8 ,可是发现一入3.0深似海,从此幸福是路人.于是边摸索边修改,在节前的完成代码迁移.节后在完成手头工作后,整理思路,把Swift3.0迁移的心得分享大家.<br>废话不多说分享下心得:</p>\n</blockquote>\n<h2 id=\"1、代码篇-一定要做好备份\"><a href=\"#1、代码篇-一定要做好备份\" class=\"headerlink\" title=\"1、代码篇:(一定要做好备份!!!)\"></a>1、代码篇:(一定要做好备份!!!)</h2><hr>\n<h4 id=\"1-gt-升级Xcode8正式版-8A218a\"><a href=\"#1-gt-升级Xcode8正式版-8A218a\" class=\"headerlink\" title=\"1&gt;升级Xcode8正式版(8A218a).\"></a>1&gt;升级Xcode8正式版(8A218a).</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-98d84a6ab3a12740.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Xcode 8 \"></p>\n<h4 id=\"2-gt-使用系统自带的桥接工具-原装的就是好-直接打开2-2项目也会提醒-gt-步骤-3\"><a href=\"#2-gt-使用系统自带的桥接工具-原装的就是好-直接打开2-2项目也会提醒-gt-步骤-3\" class=\"headerlink\" title=\"2&gt;使用系统自带的桥接工具.(原装的就是好,直接打开2.2项目也会提醒-&gt;步骤:3)\"></a>2&gt;使用系统自带的桥接工具.(原装的就是好,直接打开2.2项目也会提醒-&gt;步骤:3)</h4><h6 id=\"Edit-gt-Convert-gt-To-Current-Swift-Syntax\"><a href=\"#Edit-gt-Convert-gt-To-Current-Swift-Syntax\" class=\"headerlink\" title=\"Edit &gt; Convert &gt; To Current Swift Syntax..\"></a>Edit &gt; Convert &gt; To Current Swift Syntax..</h6><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-fec7c1aada9529b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"桥接选项\"></p>\n<h4 id=\"3-gt-不用说就是为3-0来的-选择Swift3\"><a href=\"#3-gt-不用说就是为3-0来的-选择Swift3\" class=\"headerlink\" title=\"3&gt;不用说就是为3.0来的,选择Swift3.\"></a>3&gt;不用说就是为3.0来的,选择Swift3.</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-84d13f5bf197baa0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Swift3.0\"></p>\n<h4 id=\"4-gt-上面的框架就不用选了-只选择-app的-这个是检测代码-不然你会哭的\"><a href=\"#4-gt-上面的框架就不用选了-只选择-app的-这个是检测代码-不然你会哭的\" class=\"headerlink\" title=\"4&gt;上面的框架就不用选了,只选择.app的.(这个是检测代码,不然你会哭的)\"></a>4&gt;上面的框架就不用选了,只选择<code>.app</code>的.(这个是检测代码,不然你会哭的)</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-4e3fc24ecf949ac7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\".app\"></p>\n<h4 id=\"5-gt-检测完后\"><a href=\"#5-gt-检测完后\" class=\"headerlink\" title=\"5&gt;检测完后.\"></a>5&gt;检测完后.</h4><p>在左边的选择页中选择好要转移的代码,左边的代码是Swift3.0代码,右侧代码时swift2.2代码-&gt;点<code>Save</code>.<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-bea954aa25e31670.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"6.png\"></p>\n<h2 id=\"2、第三方框架篇-使用的cocoapods管理的第三方框架\"><a href=\"#2、第三方框架篇-使用的cocoapods管理的第三方框架\" class=\"headerlink\" title=\"2、第三方框架篇:(使用的cocoapods管理的第三方框架)\"></a>2、第三方框架篇:(使用的cocoapods管理的第三方框架)</h2><hr>\n<h4 id=\"1-gt-发现框架报错-不要怕-按照错误一样一样来\"><a href=\"#1-gt-发现框架报错-不要怕-按照错误一样一样来\" class=\"headerlink\" title=\"1&gt;发现框架报错.(不要怕,按照错误一样一样来)\"></a>1&gt;发现框架报错.(不要怕,按照错误一样一样来)</h4><h5 id=\"问题1-–-第三方框架版本问题-”Use-Legacy-Swift-Language-Version”\"><a href=\"#问题1-–-第三方框架版本问题-”Use-Legacy-Swift-Language-Version”\" class=\"headerlink\" title=\"* 问题1:–.第三方框架版本问题,”Use Legacy Swift Language Version”\"></a>* 问题1:–.第三方框架版本问题,”Use Legacy Swift Language Version”</h5><p>“Use Legacy Swift Language Version” (SWIFT_VERSION) is required to be configured correctly for targets which use Swift. Use the [Edit &gt; Convert &gt; To Current Swift Syntax…] menu to choose a Swift version or use the Build Settings editor to configure the build setting directly.<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-3146e35e3b1dff2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"第三方框架版本问题\"><br>在pod的配置文件里面的Use Legacy Swift Language Version选择<code>YES</code>错误就消除了<br><code>Pods</code>-&gt;<code>TARGETS-&gt;指定框架</code> -&gt; <code>Build Settings</code> -&gt; <code>Use Legacy Swift Language Version</code><br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-ced879460f44ea3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"pod的配置\"></p>\n<h5 id=\"问题2-–-lipo-can’t-open-input-file-xxx-No-such-file-or-directory\"><a href=\"#问题2-–-lipo-can’t-open-input-file-xxx-No-such-file-or-directory\" class=\"headerlink\" title=\"* 问题2:–.lipo:can’t open input file:xxx(No such file or directory)\"></a>* 问题2:–.lipo:can’t open input file:xxx(No such file or directory)</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-bb07e2570e751087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"lipo:\"></p>\n<p><code>PROJRCT</code>-&gt; <code>Build Settings</code> -&gt; <code>Build Active Architecture only</code>-&gt;<code>YES</code></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-9bc9b5e892190e90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"lipo\"><br>其他问题后续收集再整理…</p>\n<h4 id=\"2-gt-发现框架过时-需要更新框架\"><a href=\"#2-gt-发现框架过时-需要更新框架\" class=\"headerlink\" title=\"2&gt;发现框架过时,需要更新框架.\"></a>2&gt;发现框架过时,需要更新框架.</h4><p>由于3.0的更新,Swift各个主流框架都已经及时的推出了新的版本,例如:Alamofire 4.0.0 , SnapKit 3.0.0 , Kingfisher 3.1.0 , SwiftyJSON 也已经更新了专供Swift3的分支.<br>所以,要更新框架以供使用.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-d67e896f28e9c548.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"更新主流第三方框架\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod &apos;SnapKit&apos;, &apos;~&gt; 3.0.0&apos;</div><div class=\"line\">pod &apos;SwiftyJSON&apos;, :git =&gt; &apos;https://github.com/acegreen/SwiftyJSON.git&apos;, :branch =&gt; &apos;swift3&apos;</div><div class=\"line\">pod &apos;Alamofire&apos;,&apos;~&gt; 4.0.0&apos;</div><div class=\"line\">pod &apos;Kingfisher&apos;,&apos;~&gt; 3.1.0&apos;</div></pre></td></tr></table></figure>\n<p>可能会出现以下问题:</p>\n<h6 id=\"SnapKit框架问题\"><a href=\"#SnapKit框架问题\" class=\"headerlink\" title=\"* SnapKit框架问题:\"></a>* SnapKit框架问题:</h6><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-b66d211f0bbcc0f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"SnapKit\"></p>\n<p>看到200多个框架错误后凌乱了.都是3.0语法了,为什么还会报错,不在框架,在自己安装的cocoapods环境有关系.</p>\n<p>解决方案:<br>需要更新最新环境到<code>cocoapods 1.1.0.rc.2</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods --pre</div></pre></td></tr></table></figure>\n<p>可以参照SnapKit的官方issues:<br><a href=\"https://github.com/SnapKit/SnapKit/issues/300\">https://github.com/SnapKit/SnapKit/issues/300</a><br>如果没有安装 cocoapods可以参照之前写的博客.<br><a href=\"http://www.jianshu.com/p/b98b8ac7d22d\">安装 cocoapods 1.1.0心得体会:</a></p>\n<h6 id=\"Alamofire框架问题\"><a href=\"#Alamofire框架问题\" class=\"headerlink\" title=\"* Alamofire框架问题:\"></a>* Alamofire框架问题:</h6><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-14c391721f02140b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alamofire\"></p>\n<p>Alamofire/Source/ServerTrustPolicy.swift:243:41: Use of unresolved identifier ‘kSecTrustResultInvalid’</p>\n<p>Alamofire的官方issues:<br><a href=\"https://github.com/Alamofire/Alamofire/issues/1541\">https://github.com/Alamofire/Alamofire/issues/1541</a></p>\n<p>解决方案:<br>上面也提到了,更新最新的Alamofire框架.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod &apos;Alamofire&apos;,&apos;~&gt; 4.0.0&apos;</div></pre></td></tr></table></figure>\n<p>可能还遇到的问题:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[!] Unable to satisfy the following requirements:</div><div class=\"line\"></div><div class=\"line\">- `Alamofire (~&gt; 4.0.0)` required by `Podfile`</div><div class=\"line\"></div><div class=\"line\">Specs satisfying the `Alamofire (~&gt; 4.0.0)` dependency were found, but they required a higher minimum deployment target.</div></pre></td></tr></table></figure>\n<p>解决方法:<br>Alamofire 4.0.0 最低要求系统版本9.0,已经将系统升高到9.0还是无法安装.<br>目前的没有找到有效的解决方法,只有一个方案就是重新立项先集成框架,在把转接完的代码迁移到新的项目中去.</p>\n<hr>\n<p>10月24日,更新解决方法.<br>之前提示Alamofire 4.0.0, Podfile报错.<br>需要在Podfile文件中指定最低系统9.0项目版本.<code>platform :ios,&#39;9.0&#39;</code><br>Alamofire的官方issues:<br><a href=\"https://github.com/Alamofire/Alamofire/issues/1639\">https://github.com/Alamofire/Alamofire/issues/1639</a><br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-2638ba907c545a40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"指定9.0\"></p>\n<hr>\n<h6 id=\"可能还会有其他框架问题-目前还没有遇到-欢迎讨论\"><a href=\"#可能还会有其他框架问题-目前还没有遇到-欢迎讨论\" class=\"headerlink\" title=\"* 可能还会有其他框架问题,目前还没有遇到.欢迎讨论.\"></a>* 可能还会有其他框架问题,目前还没有遇到.欢迎讨论.</h6><h2 id=\"3-其他问题总结\"><a href=\"#3-其他问题总结\" class=\"headerlink\" title=\"3.其他问题总结:\"></a>3.其他问题总结:</h2><hr>\n<h6 id=\"关于重建工程来迁移到Swift3-0解决方案\"><a href=\"#关于重建工程来迁移到Swift3-0解决方案\" class=\"headerlink\" title=\"* 关于重建工程来迁移到Swift3.0解决方案.\"></a>* 关于重建工程来迁移到Swift3.0解决方案.</h6><p>前面也提到了,发现有个别问题无法解决,一直解决也是没有成效,于是使用目前来说最简洁的方法就重新建立工程.</p>\n<p>先把新建的工程集成好最新支持Swift3.0的第三方框架,测试程序可不可以跑通后,再把之前转换完的代码一个分类一个分类迁移到新的工程里面.</p>\n<p>至于手工拖入的第三方依赖库,应用跳转,按照之前集成好的照搬.或者重新集成.</p>\n<h6 id=\"Swift3-0语法的学习\"><a href=\"#Swift3-0语法的学习\" class=\"headerlink\" title=\"* Swift3.0语法的学习.\"></a>* Swift3.0语法的学习.</h6><p>1.官方已经给出文档以及转变说明.<br>Apple Swift 3.0官方文档:<a href=\"https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309\">The Swift Programming Language (Swift 3)</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-0b6b3aaf1d67bed3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Apple Swift 3.0官方文档\"></p>\n<p>2.Apple  Swift 3.0官方演变:<a href=\"https://github.com/apple/swift-evolution/blob/master/releases/swift-3_0.md\">apple/swift-evolution/releases/swift-3_0.md</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-0e3bcf5083b6d4e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Swift 3.0官方演变\"><br>其主要是废除了一些API,简化代码的书写,例如取出OC中的NS类前缀,C语言的风格,等等.</p>\n<p>3.国外raywenderlich的Swift 3.0迁移介绍:<br><a href=\"https://www.raywenderlich.com/135655/whats-new-swift-3\">https://www.raywenderlich.com/135655/whats-new-swift-3</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-0cb70ac2167f7a10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"raywenderlich的Swift 3.0\"></p>\n<h6 id=\"后续持续补充\"><a href=\"#后续持续补充\" class=\"headerlink\" title=\"* 后续持续补充.\"></a>* 后续持续补充.</h6><h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><ul>\n<li>对Swift3的书写方式还需要进一步的加强,虽然和之前的写法有着轻微的改动,使整体变的更加的简洁、严谨,但是稍不注意还是出现莫名其妙的报错.</li>\n<li>展望Swift4,让暴风雨来的更猛烈些吧.</li>\n<li>欢迎讨论、批评、指正.</li>\n</ul>\n"},{"title":"WKWebView替换UIWebView","date":"2016-07-01T10:42:07.000Z","_content":"##  前言\n>目前,WKWebView只在iOS8后才能用,但是大多数App需要支持iOS7以上的版本，所以兼容性方案就是,iOS7下用UIWebView，iOS8后WKWebView.\n\n## 一、\n\n","source":"_posts/WKWebView替换UIWebView.md","raw":"---\ntitle: WKWebView替换UIWebView\ndate: 2016-07-01 18:42:07\ncategories:\n    - iOS\ntags: iOS\n\n---\n##  前言\n>目前,WKWebView只在iOS8后才能用,但是大多数App需要支持iOS7以上的版本，所以兼容性方案就是,iOS7下用UIWebView，iOS8后WKWebView.\n\n## 一、\n\n","slug":"WKWebView替换UIWebView","published":1,"updated":"2017-03-16T04:57:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0c1v89k000rksfyr2w3dp62","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>目前,WKWebView只在iOS8后才能用,但是大多数App需要支持iOS7以上的版本，所以兼容性方案就是,iOS7下用UIWebView，iOS8后WKWebView.</p>\n</blockquote>\n<h2 id=\"一、\"><a href=\"#一、\" class=\"headerlink\" title=\"一、\"></a>一、</h2>","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>目前,WKWebView只在iOS8后才能用,但是大多数App需要支持iOS7以上的版本，所以兼容性方案就是,iOS7下用UIWebView，iOS8后WKWebView.</p>\n</blockquote>\n<h2 id=\"一、\"><a href=\"#一、\" class=\"headerlink\" title=\"一、\"></a>一、</h2>"},{"title":"免费开发者证书真机调试App ID失效问题:\"Unable to add App ID because the '10' App ID limit in '7' days has been exceeded.\"解决方案总结。","date":"2016-04-29T10:43:55.000Z","_content":"# 前言\n>今天(4月29日),笔者在做免费开发者证书真机调试的时候.发现如下问题:\n\n## 问题:\n### Unable to add App ID because the '10' App ID limit in '7' days has been exceeded.\n![Unable to add App ID because the '10' App ID limit in '7' days has been exceeded.](http://upload-images.jianshu.io/upload_images/1666327-2dffb91f2aff0452.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n翻译如下:\n\n![](http://upload-images.jianshu.io/upload_images/1666327-73b4cbda03a89376.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![翻译结果](http://upload-images.jianshu.io/upload_images/1666327-05ca85237d7e1ab3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 寻求解决问题过程:\n第一次遇到,于是开始百度,发现百度没有这个问题.进行简要搜索时发现:\n\n![Baidu搜索界面](http://upload-images.jianshu.io/upload_images/1666327-7b00acaa5f2f699c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n也是今天发布的寻找答案的,于是只能借助更强大的搜索:\n\n![Google搜索界面](http://upload-images.jianshu.io/upload_images/1666327-156f98324f2ff99a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n在stack overflow中发现也有出现此问题:\n\n![stack overflow](http://upload-images.jianshu.io/upload_images/1666327-873f95aed0d62dbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n链接如下:http://stackoverflow.com/questions/36923849/unable-to-add-app-id-because-the-10-app-id-limit-in-7-days-has-been-exceeded\n发现这个问题是4月28日晚上18点提交的,具体美国时间比中国晚一天,也就是说也是今天才发现的这个问题,看到解决方案. \n然后再开始跟苹果技术支持邮件联系得出如下答案:\n![Apple](http://upload-images.jianshu.io/upload_images/1666327-fcbd3399aa6ec871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n于是得出结论.\n\n## 问题原因:\n这是苹果对`Bundle Identifier`进行了封锁.\n\n推测:苹果于今天修改了规格,限制了开发者使用免证书的真机调试次数.\n\n根据客服回电的答案得出,一个App ID,免证书真机调试只能进行10次,具体时间没有说明.\n\n但是根据字面翻译意思在7天内只能创建10个项目文件(最主要的是`Bundle Identifier`名称),关于7天之外是否还能继续创建项目工程,笔者会持续更新.\n\n---\n5月5日测试,还是一直提示这个错误,持续猜想一个Apple ID,免证书真机调试只能进行10次.\n\n---\n5月10日测试,测试成功,7日内免证书真机调试10次可行.\n\n---\n5月12日测试,免证书真机调试生成描述文件后,`View Details`里面显示生成的`Bundle Identifier`更改成7天后过期,也就是说明一个Apple ID7天内可以只能生成10个`Bundle Identifier`.\n\n这是苹果限制了`Bundle Identifier`的循环问题,减少了`Bundle Identifier`有效期时间,防止大量`Bundle Identifier`的堆积.\n\n这样就可以及时去查看`Bundle Identifier`,等待`Bundle Identifier`到期后进行真机调试.\n\n下图为显示`Bundle Identifier`的有效期(5月13日集中生成):\n\n![最近集中生成的Bundle Identifier](http://upload-images.jianshu.io/upload_images/1666327-e44f5a50b16f8251.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n## 解决方案:\n 1.更换成开发者账号的App ID.(呵呵,你懂得.)\n 2.暂时解决方案,更换`Bundle Identifie`r,把此前真机调试项目工程的`Bundle Identifier`更换成现在的项目工程的`Bundle Identifier`,(亲测可用!!)\n 3.重新创建项目工程的时候直接写成以前的真机测试通过的项目名字.(亲测可用!!)\n  解决方案会持续更新.....\n\n---\n###### 友情提示: \n免费真机调试描述文件(`.mobileprovision`),有效期为90天,也就是说超过时间`Bundle Identifier`就不能用了.\n```\n5月12日更新 .mobileprovision 有效期为更改7天.\n```\n###### 解决办法:\n1.$99刀的开发者Apple ID.\n2.重新申请Apple ID,只申请1个描述文件(`.mobileprovision`),一直使用90天后再进行更换.(更换时间改为7天)\n\n---\n## 意外情况:\n#### 一 .  更换Bundle Identifier还是没有解决: (亲测可用!!)\n当出现更换这里的`Bundle Identifier`还是没有用的时候\n![1](http://upload-images.jianshu.io/upload_images/1666327-dbee77d2ab0dadaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n请更换项目工程里面的`Bundle Identifier`:\n\n1.右键项目工程文件:显示包内容(`Show Package Contents`)\n![显示包内容(Show Package Contents)](http://upload-images.jianshu.io/upload_images/1666327-0797492fcde1c7c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2.打开第一个文件: `project.pbxproj`\n![project.pbxproj](http://upload-images.jianshu.io/upload_images/1666327-187e8fae9c1114a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3.搜索: `PRODUCT_BUNDLE_IDENTIFIER` 进行替换 \n![PRODUCT_BUNDLE_IDENTIFIER](http://upload-images.jianshu.io/upload_images/1666327-a161f5ca8a7510b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n4.发现有2个`PRODUCT_BUNDLE_IDENTIFIER` ,替换后面的 >>\".----\"<<,更换成以前自己可以真机调试`Bundle Identifier`\n![更换后面\".----\"](http://upload-images.jianshu.io/upload_images/1666327-d741ebcf100bf7d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这样也是可以的.\n#### 二 .  忘记之前创建的Bundle Identifier\n1.可以在偏好设置里面选择证书详情视图查找,`Preferences`->`Accounts`->`View Details`\n\n![选择View Details](http://upload-images.jianshu.io/upload_images/1666327-e924878c202a049b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2.根据排序,选择最近创建的`Bundle Identifier`\n![查看最近的Bundle Identifier](http://upload-images.jianshu.io/upload_images/1666327-216d62c9b1f05ea2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","source":"_posts/免费开发者证书真机调试App ID失效问题解决方案总结.md","raw":"---\ntitle: 免费开发者证书真机调试App ID失效问题:\"Unable to add App ID because the '10' App ID limit in '7' days has been exceeded.\"解决方案总结。\ndate: 2016-04-29 18:43:55\ncategories:\n    - Xcode\ntags: \n    - 随笔\n    - Xcode\n---\n# 前言\n>今天(4月29日),笔者在做免费开发者证书真机调试的时候.发现如下问题:\n\n## 问题:\n### Unable to add App ID because the '10' App ID limit in '7' days has been exceeded.\n![Unable to add App ID because the '10' App ID limit in '7' days has been exceeded.](http://upload-images.jianshu.io/upload_images/1666327-2dffb91f2aff0452.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n翻译如下:\n\n![](http://upload-images.jianshu.io/upload_images/1666327-73b4cbda03a89376.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![翻译结果](http://upload-images.jianshu.io/upload_images/1666327-05ca85237d7e1ab3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n## 寻求解决问题过程:\n第一次遇到,于是开始百度,发现百度没有这个问题.进行简要搜索时发现:\n\n![Baidu搜索界面](http://upload-images.jianshu.io/upload_images/1666327-7b00acaa5f2f699c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n也是今天发布的寻找答案的,于是只能借助更强大的搜索:\n\n![Google搜索界面](http://upload-images.jianshu.io/upload_images/1666327-156f98324f2ff99a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n在stack overflow中发现也有出现此问题:\n\n![stack overflow](http://upload-images.jianshu.io/upload_images/1666327-873f95aed0d62dbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n链接如下:http://stackoverflow.com/questions/36923849/unable-to-add-app-id-because-the-10-app-id-limit-in-7-days-has-been-exceeded\n发现这个问题是4月28日晚上18点提交的,具体美国时间比中国晚一天,也就是说也是今天才发现的这个问题,看到解决方案. \n然后再开始跟苹果技术支持邮件联系得出如下答案:\n![Apple](http://upload-images.jianshu.io/upload_images/1666327-fcbd3399aa6ec871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n于是得出结论.\n\n## 问题原因:\n这是苹果对`Bundle Identifier`进行了封锁.\n\n推测:苹果于今天修改了规格,限制了开发者使用免证书的真机调试次数.\n\n根据客服回电的答案得出,一个App ID,免证书真机调试只能进行10次,具体时间没有说明.\n\n但是根据字面翻译意思在7天内只能创建10个项目文件(最主要的是`Bundle Identifier`名称),关于7天之外是否还能继续创建项目工程,笔者会持续更新.\n\n---\n5月5日测试,还是一直提示这个错误,持续猜想一个Apple ID,免证书真机调试只能进行10次.\n\n---\n5月10日测试,测试成功,7日内免证书真机调试10次可行.\n\n---\n5月12日测试,免证书真机调试生成描述文件后,`View Details`里面显示生成的`Bundle Identifier`更改成7天后过期,也就是说明一个Apple ID7天内可以只能生成10个`Bundle Identifier`.\n\n这是苹果限制了`Bundle Identifier`的循环问题,减少了`Bundle Identifier`有效期时间,防止大量`Bundle Identifier`的堆积.\n\n这样就可以及时去查看`Bundle Identifier`,等待`Bundle Identifier`到期后进行真机调试.\n\n下图为显示`Bundle Identifier`的有效期(5月13日集中生成):\n\n![最近集中生成的Bundle Identifier](http://upload-images.jianshu.io/upload_images/1666327-e44f5a50b16f8251.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n---\n## 解决方案:\n 1.更换成开发者账号的App ID.(呵呵,你懂得.)\n 2.暂时解决方案,更换`Bundle Identifie`r,把此前真机调试项目工程的`Bundle Identifier`更换成现在的项目工程的`Bundle Identifier`,(亲测可用!!)\n 3.重新创建项目工程的时候直接写成以前的真机测试通过的项目名字.(亲测可用!!)\n  解决方案会持续更新.....\n\n---\n###### 友情提示: \n免费真机调试描述文件(`.mobileprovision`),有效期为90天,也就是说超过时间`Bundle Identifier`就不能用了.\n```\n5月12日更新 .mobileprovision 有效期为更改7天.\n```\n###### 解决办法:\n1.$99刀的开发者Apple ID.\n2.重新申请Apple ID,只申请1个描述文件(`.mobileprovision`),一直使用90天后再进行更换.(更换时间改为7天)\n\n---\n## 意外情况:\n#### 一 .  更换Bundle Identifier还是没有解决: (亲测可用!!)\n当出现更换这里的`Bundle Identifier`还是没有用的时候\n![1](http://upload-images.jianshu.io/upload_images/1666327-dbee77d2ab0dadaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n请更换项目工程里面的`Bundle Identifier`:\n\n1.右键项目工程文件:显示包内容(`Show Package Contents`)\n![显示包内容(Show Package Contents)](http://upload-images.jianshu.io/upload_images/1666327-0797492fcde1c7c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2.打开第一个文件: `project.pbxproj`\n![project.pbxproj](http://upload-images.jianshu.io/upload_images/1666327-187e8fae9c1114a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3.搜索: `PRODUCT_BUNDLE_IDENTIFIER` 进行替换 \n![PRODUCT_BUNDLE_IDENTIFIER](http://upload-images.jianshu.io/upload_images/1666327-a161f5ca8a7510b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n4.发现有2个`PRODUCT_BUNDLE_IDENTIFIER` ,替换后面的 >>\".----\"<<,更换成以前自己可以真机调试`Bundle Identifier`\n![更换后面\".----\"](http://upload-images.jianshu.io/upload_images/1666327-d741ebcf100bf7d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这样也是可以的.\n#### 二 .  忘记之前创建的Bundle Identifier\n1.可以在偏好设置里面选择证书详情视图查找,`Preferences`->`Accounts`->`View Details`\n\n![选择View Details](http://upload-images.jianshu.io/upload_images/1666327-e924878c202a049b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n2.根据排序,选择最近创建的`Bundle Identifier`\n![查看最近的Bundle Identifier](http://upload-images.jianshu.io/upload_images/1666327-216d62c9b1f05ea2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","slug":"免费开发者证书真机调试App ID失效问题解决方案总结","published":1,"updated":"2017-03-16T04:55:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0c1v89p000vksfyk17c457b","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>今天(4月29日),笔者在做免费开发者证书真机调试的时候.发现如下问题:</p>\n</blockquote>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题:\"></a>问题:</h2><h3 id=\"Unable-to-add-App-ID-because-the-‘10’-App-ID-limit-in-‘7’-days-has-been-exceeded\"><a href=\"#Unable-to-add-App-ID-because-the-‘10’-App-ID-limit-in-‘7’-days-has-been-exceeded\" class=\"headerlink\" title=\"Unable to add App ID because the ‘10’ App ID limit in ‘7’ days has been exceeded.\"></a>Unable to add App ID because the ‘10’ App ID limit in ‘7’ days has been exceeded.</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-2dffb91f2aff0452.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Unable to add App ID because the &#39;10&#39; App ID limit in &#39;7&#39; days has been exceeded.\"><br>翻译如下:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-73b4cbda03a89376.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-05ca85237d7e1ab3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"翻译结果\"></p>\n<h2 id=\"寻求解决问题过程\"><a href=\"#寻求解决问题过程\" class=\"headerlink\" title=\"寻求解决问题过程:\"></a>寻求解决问题过程:</h2><p>第一次遇到,于是开始百度,发现百度没有这个问题.进行简要搜索时发现:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-7b00acaa5f2f699c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Baidu搜索界面\"></p>\n<p>也是今天发布的寻找答案的,于是只能借助更强大的搜索:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-156f98324f2ff99a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Google搜索界面\"><br>在stack overflow中发现也有出现此问题:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-873f95aed0d62dbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"stack overflow\"><br>链接如下:<a href=\"http://stackoverflow.com/questions/36923849/unable-to-add-app-id-because-the-10-app-id-limit-in-7-days-has-been-exceeded\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/36923849/unable-to-add-app-id-because-the-10-app-id-limit-in-7-days-has-been-exceeded</a><br>发现这个问题是4月28日晚上18点提交的,具体美国时间比中国晚一天,也就是说也是今天才发现的这个问题,看到解决方案.<br>然后再开始跟苹果技术支持邮件联系得出如下答案:<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-fcbd3399aa6ec871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Apple\"><br>于是得出结论.</p>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因:\"></a>问题原因:</h2><p>这是苹果对<code>Bundle Identifier</code>进行了封锁.</p>\n<p>推测:苹果于今天修改了规格,限制了开发者使用免证书的真机调试次数.</p>\n<p>根据客服回电的答案得出,一个App ID,免证书真机调试只能进行10次,具体时间没有说明.</p>\n<p>但是根据字面翻译意思在7天内只能创建10个项目文件(最主要的是<code>Bundle Identifier</code>名称),关于7天之外是否还能继续创建项目工程,笔者会持续更新.</p>\n<hr>\n<p>5月5日测试,还是一直提示这个错误,持续猜想一个Apple ID,免证书真机调试只能进行10次.</p>\n<hr>\n<p>5月10日测试,测试成功,7日内免证书真机调试10次可行.</p>\n<hr>\n<p>5月12日测试,免证书真机调试生成描述文件后,<code>View Details</code>里面显示生成的<code>Bundle Identifier</code>更改成7天后过期,也就是说明一个Apple ID7天内可以只能生成10个<code>Bundle Identifier</code>.</p>\n<p>这是苹果限制了<code>Bundle Identifier</code>的循环问题,减少了<code>Bundle Identifier</code>有效期时间,防止大量<code>Bundle Identifier</code>的堆积.</p>\n<p>这样就可以及时去查看<code>Bundle Identifier</code>,等待<code>Bundle Identifier</code>到期后进行真机调试.</p>\n<p>下图为显示<code>Bundle Identifier</code>的有效期(5月13日集中生成):</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-e44f5a50b16f8251.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"最近集中生成的Bundle Identifier\"></p>\n<hr>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案:\"></a>解决方案:</h2><p> 1.更换成开发者账号的App ID.(呵呵,你懂得.)<br> 2.暂时解决方案,更换<code>Bundle Identifie</code>r,把此前真机调试项目工程的<code>Bundle Identifier</code>更换成现在的项目工程的<code>Bundle Identifier</code>,(亲测可用!!)<br> 3.重新创建项目工程的时候直接写成以前的真机测试通过的项目名字.(亲测可用!!)<br>  解决方案会持续更新…..</p>\n<hr>\n<h6 id=\"友情提示\"><a href=\"#友情提示\" class=\"headerlink\" title=\"友情提示:\"></a>友情提示:</h6><p>免费真机调试描述文件(<code>.mobileprovision</code>),有效期为90天,也就是说超过时间<code>Bundle Identifier</code>就不能用了.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">5月12日更新 .mobileprovision 有效期为更改7天.</div></pre></td></tr></table></figure></p>\n<h6 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法:\"></a>解决办法:</h6><p>1.$99刀的开发者Apple ID.<br>2.重新申请Apple ID,只申请1个描述文件(<code>.mobileprovision</code>),一直使用90天后再进行更换.(更换时间改为7天)</p>\n<hr>\n<h2 id=\"意外情况\"><a href=\"#意外情况\" class=\"headerlink\" title=\"意外情况:\"></a>意外情况:</h2><h4 id=\"一-更换Bundle-Identifier还是没有解决-亲测可用\"><a href=\"#一-更换Bundle-Identifier还是没有解决-亲测可用\" class=\"headerlink\" title=\"一 .  更换Bundle Identifier还是没有解决: (亲测可用!!)\"></a>一 .  更换Bundle Identifier还是没有解决: (亲测可用!!)</h4><p>当出现更换这里的<code>Bundle Identifier</code>还是没有用的时候<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-dbee77d2ab0dadaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1\"></p>\n<p>请更换项目工程里面的<code>Bundle Identifier</code>:</p>\n<p>1.右键项目工程文件:显示包内容(<code>Show Package Contents</code>)<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-0797492fcde1c7c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"显示包内容(Show Package Contents)\"></p>\n<p>2.打开第一个文件: <code>project.pbxproj</code><br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-187e8fae9c1114a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"project.pbxproj\"></p>\n<p>3.搜索: <code>PRODUCT_BUNDLE_IDENTIFIER</code> 进行替换<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-a161f5ca8a7510b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"PRODUCT_BUNDLE_IDENTIFIER\"><br>4.发现有2个<code>PRODUCT_BUNDLE_IDENTIFIER</code> ,替换后面的 &gt;&gt;”.—-“&lt;&lt;,更换成以前自己可以真机调试<code>Bundle Identifier</code><br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-d741ebcf100bf7d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"更换后面&quot;.----&quot;\"><br>这样也是可以的.</p>\n<h4 id=\"二-忘记之前创建的Bundle-Identifier\"><a href=\"#二-忘记之前创建的Bundle-Identifier\" class=\"headerlink\" title=\"二 .  忘记之前创建的Bundle Identifier\"></a>二 .  忘记之前创建的Bundle Identifier</h4><p>1.可以在偏好设置里面选择证书详情视图查找,<code>Preferences</code>-&gt;<code>Accounts</code>-&gt;<code>View Details</code></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-e924878c202a049b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择View Details\"></p>\n<p>2.根据排序,选择最近创建的<code>Bundle Identifier</code><br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-216d62c9b1f05ea2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看最近的Bundle Identifier\"></p>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>今天(4月29日),笔者在做免费开发者证书真机调试的时候.发现如下问题:</p>\n</blockquote>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题:\"></a>问题:</h2><h3 id=\"Unable-to-add-App-ID-because-the-‘10’-App-ID-limit-in-‘7’-days-has-been-exceeded\"><a href=\"#Unable-to-add-App-ID-because-the-‘10’-App-ID-limit-in-‘7’-days-has-been-exceeded\" class=\"headerlink\" title=\"Unable to add App ID because the ‘10’ App ID limit in ‘7’ days has been exceeded.\"></a>Unable to add App ID because the ‘10’ App ID limit in ‘7’ days has been exceeded.</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-2dffb91f2aff0452.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Unable to add App ID because the &#39;10&#39; App ID limit in &#39;7&#39; days has been exceeded.\"><br>翻译如下:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-73b4cbda03a89376.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-05ca85237d7e1ab3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"翻译结果\"></p>\n<h2 id=\"寻求解决问题过程\"><a href=\"#寻求解决问题过程\" class=\"headerlink\" title=\"寻求解决问题过程:\"></a>寻求解决问题过程:</h2><p>第一次遇到,于是开始百度,发现百度没有这个问题.进行简要搜索时发现:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-7b00acaa5f2f699c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Baidu搜索界面\"></p>\n<p>也是今天发布的寻找答案的,于是只能借助更强大的搜索:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-156f98324f2ff99a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Google搜索界面\"><br>在stack overflow中发现也有出现此问题:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-873f95aed0d62dbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"stack overflow\"><br>链接如下:<a href=\"http://stackoverflow.com/questions/36923849/unable-to-add-app-id-because-the-10-app-id-limit-in-7-days-has-been-exceeded\">http://stackoverflow.com/questions/36923849/unable-to-add-app-id-because-the-10-app-id-limit-in-7-days-has-been-exceeded</a><br>发现这个问题是4月28日晚上18点提交的,具体美国时间比中国晚一天,也就是说也是今天才发现的这个问题,看到解决方案.<br>然后再开始跟苹果技术支持邮件联系得出如下答案:<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-fcbd3399aa6ec871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Apple\"><br>于是得出结论.</p>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因:\"></a>问题原因:</h2><p>这是苹果对<code>Bundle Identifier</code>进行了封锁.</p>\n<p>推测:苹果于今天修改了规格,限制了开发者使用免证书的真机调试次数.</p>\n<p>根据客服回电的答案得出,一个App ID,免证书真机调试只能进行10次,具体时间没有说明.</p>\n<p>但是根据字面翻译意思在7天内只能创建10个项目文件(最主要的是<code>Bundle Identifier</code>名称),关于7天之外是否还能继续创建项目工程,笔者会持续更新.</p>\n<hr>\n<p>5月5日测试,还是一直提示这个错误,持续猜想一个Apple ID,免证书真机调试只能进行10次.</p>\n<hr>\n<p>5月10日测试,测试成功,7日内免证书真机调试10次可行.</p>\n<hr>\n<p>5月12日测试,免证书真机调试生成描述文件后,<code>View Details</code>里面显示生成的<code>Bundle Identifier</code>更改成7天后过期,也就是说明一个Apple ID7天内可以只能生成10个<code>Bundle Identifier</code>.</p>\n<p>这是苹果限制了<code>Bundle Identifier</code>的循环问题,减少了<code>Bundle Identifier</code>有效期时间,防止大量<code>Bundle Identifier</code>的堆积.</p>\n<p>这样就可以及时去查看<code>Bundle Identifier</code>,等待<code>Bundle Identifier</code>到期后进行真机调试.</p>\n<p>下图为显示<code>Bundle Identifier</code>的有效期(5月13日集中生成):</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-e44f5a50b16f8251.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"最近集中生成的Bundle Identifier\"></p>\n<hr>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案:\"></a>解决方案:</h2><p> 1.更换成开发者账号的App ID.(呵呵,你懂得.)<br> 2.暂时解决方案,更换<code>Bundle Identifie</code>r,把此前真机调试项目工程的<code>Bundle Identifier</code>更换成现在的项目工程的<code>Bundle Identifier</code>,(亲测可用!!)<br> 3.重新创建项目工程的时候直接写成以前的真机测试通过的项目名字.(亲测可用!!)<br>  解决方案会持续更新…..</p>\n<hr>\n<h6 id=\"友情提示\"><a href=\"#友情提示\" class=\"headerlink\" title=\"友情提示:\"></a>友情提示:</h6><p>免费真机调试描述文件(<code>.mobileprovision</code>),有效期为90天,也就是说超过时间<code>Bundle Identifier</code>就不能用了.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">5月12日更新 .mobileprovision 有效期为更改7天.</div></pre></td></tr></table></figure></p>\n<h6 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法:\"></a>解决办法:</h6><p>1.$99刀的开发者Apple ID.<br>2.重新申请Apple ID,只申请1个描述文件(<code>.mobileprovision</code>),一直使用90天后再进行更换.(更换时间改为7天)</p>\n<hr>\n<h2 id=\"意外情况\"><a href=\"#意外情况\" class=\"headerlink\" title=\"意外情况:\"></a>意外情况:</h2><h4 id=\"一-更换Bundle-Identifier还是没有解决-亲测可用\"><a href=\"#一-更换Bundle-Identifier还是没有解决-亲测可用\" class=\"headerlink\" title=\"一 .  更换Bundle Identifier还是没有解决: (亲测可用!!)\"></a>一 .  更换Bundle Identifier还是没有解决: (亲测可用!!)</h4><p>当出现更换这里的<code>Bundle Identifier</code>还是没有用的时候<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-dbee77d2ab0dadaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1\"></p>\n<p>请更换项目工程里面的<code>Bundle Identifier</code>:</p>\n<p>1.右键项目工程文件:显示包内容(<code>Show Package Contents</code>)<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-0797492fcde1c7c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"显示包内容(Show Package Contents)\"></p>\n<p>2.打开第一个文件: <code>project.pbxproj</code><br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-187e8fae9c1114a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"project.pbxproj\"></p>\n<p>3.搜索: <code>PRODUCT_BUNDLE_IDENTIFIER</code> 进行替换<br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-a161f5ca8a7510b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"PRODUCT_BUNDLE_IDENTIFIER\"><br>4.发现有2个<code>PRODUCT_BUNDLE_IDENTIFIER</code> ,替换后面的 &gt;&gt;”.—-“&lt;&lt;,更换成以前自己可以真机调试<code>Bundle Identifier</code><br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-d741ebcf100bf7d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"更换后面&quot;.----&quot;\"><br>这样也是可以的.</p>\n<h4 id=\"二-忘记之前创建的Bundle-Identifier\"><a href=\"#二-忘记之前创建的Bundle-Identifier\" class=\"headerlink\" title=\"二 .  忘记之前创建的Bundle Identifier\"></a>二 .  忘记之前创建的Bundle Identifier</h4><p>1.可以在偏好设置里面选择证书详情视图查找,<code>Preferences</code>-&gt;<code>Accounts</code>-&gt;<code>View Details</code></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1666327-e924878c202a049b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"选择View Details\"></p>\n<p>2.根据排序,选择最近创建的<code>Bundle Identifier</code><br><img src=\"http://upload-images.jianshu.io/upload_images/1666327-216d62c9b1f05ea2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"查看最近的Bundle Identifier\"></p>\n"},{"title":"发布博客","date":"2016-05-08T11:23:31.000Z","_content":"### 0.打开hexo地址\n```\ncd /Users/..../hexo \n```\n\n### 1.写博客\n\n```\nhexo new \"My New Post\"\n```\n\n更新信息: [Writing](https://hexo.io/docs/writing.html)\n\n### 2.启动服务器\n\n```\nhexo server\n```\n\n更新信息: [Server](https://hexo.io/docs/server.html)\n\n### 3.生成静态文件\n\n```\nhexo generate\n```\n\n更新信息: [Generating](https://hexo.io/docs/generating.html)\n\n### 4.同步\n\n```\nhexo deploy\n```\n\n更新信息: [Deployment](https://hexo.io/docs/deployment.html)\n\n\n","source":"_posts/发布博客.md","raw":"---\ntitle: 发布博客\ndate: 2016-05-08 19:23:31\ncategories:\n    - Hexo\ntags:\n    - Hexo\n    - Mac\n---\n### 0.打开hexo地址\n```\ncd /Users/..../hexo \n```\n\n### 1.写博客\n\n```\nhexo new \"My New Post\"\n```\n\n更新信息: [Writing](https://hexo.io/docs/writing.html)\n\n### 2.启动服务器\n\n```\nhexo server\n```\n\n更新信息: [Server](https://hexo.io/docs/server.html)\n\n### 3.生成静态文件\n\n```\nhexo generate\n```\n\n更新信息: [Generating](https://hexo.io/docs/generating.html)\n\n### 4.同步\n\n```\nhexo deploy\n```\n\n更新信息: [Deployment](https://hexo.io/docs/deployment.html)\n\n\n","slug":"发布博客","published":1,"updated":"2017-03-16T05:00:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0c1v89r000xksfyw5639hkx","content":"<h3 id=\"0-打开hexo地址\"><a href=\"#0-打开hexo地址\" class=\"headerlink\" title=\"0.打开hexo地址\"></a>0.打开hexo地址</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /Users/..../hexo</div></pre></td></tr></table></figure>\n<h3 id=\"1-写博客\"><a href=\"#1-写博客\" class=\"headerlink\" title=\"1.写博客\"></a>1.写博客</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;My New Post&quot;</div></pre></td></tr></table></figure>\n<p>更新信息: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"2-启动服务器\"><a href=\"#2-启动服务器\" class=\"headerlink\" title=\"2.启动服务器\"></a>2.启动服务器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<p>更新信息: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"3-生成静态文件\"><a href=\"#3-生成静态文件\" class=\"headerlink\" title=\"3.生成静态文件\"></a>3.生成静态文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<p>更新信息: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"4-同步\"><a href=\"#4-同步\" class=\"headerlink\" title=\"4.同步\"></a>4.同步</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<p>更新信息: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<h3 id=\"0-打开hexo地址\"><a href=\"#0-打开hexo地址\" class=\"headerlink\" title=\"0.打开hexo地址\"></a>0.打开hexo地址</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /Users/..../hexo</div></pre></td></tr></table></figure>\n<h3 id=\"1-写博客\"><a href=\"#1-写博客\" class=\"headerlink\" title=\"1.写博客\"></a>1.写博客</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;My New Post&quot;</div></pre></td></tr></table></figure>\n<p>更新信息: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"2-启动服务器\"><a href=\"#2-启动服务器\" class=\"headerlink\" title=\"2.启动服务器\"></a>2.启动服务器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<p>更新信息: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"3-生成静态文件\"><a href=\"#3-生成静态文件\" class=\"headerlink\" title=\"3.生成静态文件\"></a>3.生成静态文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<p>更新信息: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"4-同步\"><a href=\"#4-同步\" class=\"headerlink\" title=\"4.同步\"></a>4.同步</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<p>更新信息: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0c1v8890001ksfy3xdi5uqh","category_id":"cj0c1v88q0005ksfyr2g3ubhm","_id":"cj0c1v896000eksfy1ssfbijg"},{"post_id":"cj0c1v891000bksfy4kgoeznc","category_id":"cj0c1v88q0005ksfyr2g3ubhm","_id":"cj0c1v898000iksfyeoxl6r9p"},{"post_id":"cj0c1v88g0003ksfyjy6xbknu","category_id":"cj0c1v892000cksfyu6mbi15q","_id":"cj0c1v89c000nksfyd8krcq9g"},{"post_id":"cj0c1v88s0007ksfy91s6yzpq","category_id":"cj0c1v898000hksfy07qr6ud7","_id":"cj0c1v89p000sksfy8j21ipdq"},{"post_id":"cj0c1v88x0009ksfyxhibmagu","category_id":"cj0c1v89d000pksfym2y42kk0","_id":"cj0c1v89s000zksfysqz4qkr8"},{"post_id":"cj0c1v89r000xksfyw5639hkx","category_id":"cj0c1v898000hksfy07qr6ud7","_id":"cj0c1v89w0015ksfyfixivwfy"},{"post_id":"cj0c1v893000dksfylq2bbqdi","category_id":"cj0c1v89p000uksfytib0tqti","_id":"cj0c1v89y0018ksfyjmlhuybt"},{"post_id":"cj0c1v896000fksfycmh6rtli","category_id":"cj0c1v89p000uksfytib0tqti","_id":"cj0c1v8a0001aksfy0ih18m7h"},{"post_id":"cj0c1v899000kksfynsmvovj4","category_id":"cj0c1v89p000uksfytib0tqti","_id":"cj0c1v8a3001dksfyqkgfixlp"},{"post_id":"cj0c1v89b000mksfyonew4rue","category_id":"cj0c1v89p000uksfytib0tqti","_id":"cj0c1v8a6001hksfyjhmy1ru1"},{"post_id":"cj0c1v89i000qksfylnweo852","category_id":"cj0c1v8a3001eksfy0g09vzww","_id":"cj0c1v8a8001nksfycnook7h6"},{"post_id":"cj0c1v89k000rksfyr2w3dp62","category_id":"cj0c1v8a3001eksfy0g09vzww","_id":"cj0c1v8ab001rksfy35nny8s3"},{"post_id":"cj0c1v89p000vksfyk17c457b","category_id":"cj0c1v8a9001oksfys80isnu4","_id":"cj0c1v8ad001tksfy9muuj0df"}],"PostTag":[{"post_id":"cj0c1v8890001ksfy3xdi5uqh","tag_id":"cj0c1v88l0004ksfy38tbp82t","_id":"cj0c1v899000jksfy1gzyiq8x"},{"post_id":"cj0c1v8890001ksfy3xdi5uqh","tag_id":"cj0c1v891000aksfydzye9z7t","_id":"cj0c1v89b000lksfy0g3j4l70"},{"post_id":"cj0c1v88g0003ksfyjy6xbknu","tag_id":"cj0c1v897000gksfyde7pep92","_id":"cj0c1v89q000wksfyerjw0upf"},{"post_id":"cj0c1v88g0003ksfyjy6xbknu","tag_id":"cj0c1v88l0004ksfy38tbp82t","_id":"cj0c1v89s000yksfyp4ywnttl"},{"post_id":"cj0c1v89r000xksfyw5639hkx","tag_id":"cj0c1v89p000tksfy34b16al3","_id":"cj0c1v89w0012ksfyheqo0bwv"},{"post_id":"cj0c1v89r000xksfyw5639hkx","tag_id":"cj0c1v88l0004ksfy38tbp82t","_id":"cj0c1v89w0013ksfyv3up7zh5"},{"post_id":"cj0c1v88s0007ksfy91s6yzpq","tag_id":"cj0c1v89p000tksfy34b16al3","_id":"cj0c1v89y0017ksfy7v88l4uz"},{"post_id":"cj0c1v88s0007ksfy91s6yzpq","tag_id":"cj0c1v88l0004ksfy38tbp82t","_id":"cj0c1v8a00019ksfytwqavme3"},{"post_id":"cj0c1v88x0009ksfyxhibmagu","tag_id":"cj0c1v89w0014ksfyrhrf8zfj","_id":"cj0c1v8a5001gksfyujyq7ijp"},{"post_id":"cj0c1v88x0009ksfyxhibmagu","tag_id":"cj0c1v8a0001bksfyzbsa4voy","_id":"cj0c1v8a6001iksfyg1hw6x10"},{"post_id":"cj0c1v891000bksfy4kgoeznc","tag_id":"cj0c1v88l0004ksfy38tbp82t","_id":"cj0c1v8a7001lksfya1vl52ji"},{"post_id":"cj0c1v891000bksfy4kgoeznc","tag_id":"cj0c1v891000aksfydzye9z7t","_id":"cj0c1v8a8001mksfy49f5idls"},{"post_id":"cj0c1v893000dksfylq2bbqdi","tag_id":"cj0c1v8a6001jksfyp86l4lqq","_id":"cj0c1v8aa001qksfyhmrrxv3a"},{"post_id":"cj0c1v896000fksfycmh6rtli","tag_id":"cj0c1v8a9001pksfyg4szz69w","_id":"cj0c1v8ah001wksfydhv45786"},{"post_id":"cj0c1v896000fksfycmh6rtli","tag_id":"cj0c1v8ab001sksfygvnh7n94","_id":"cj0c1v8ai001xksfyccv7k8co"},{"post_id":"cj0c1v896000fksfycmh6rtli","tag_id":"cj0c1v8a0001bksfyzbsa4voy","_id":"cj0c1v8aj001zksfykfbsjwpc"},{"post_id":"cj0c1v899000kksfynsmvovj4","tag_id":"cj0c1v8a9001pksfyg4szz69w","_id":"cj0c1v8al0022ksfy84bv1yyx"},{"post_id":"cj0c1v899000kksfynsmvovj4","tag_id":"cj0c1v8ab001sksfygvnh7n94","_id":"cj0c1v8al0023ksfyokuix6ce"},{"post_id":"cj0c1v899000kksfynsmvovj4","tag_id":"cj0c1v8a0001bksfyzbsa4voy","_id":"cj0c1v8am0025ksfy5bdpn4w7"},{"post_id":"cj0c1v89b000mksfyonew4rue","tag_id":"cj0c1v8a9001pksfyg4szz69w","_id":"cj0c1v8an0028ksfy1q9qoud0"},{"post_id":"cj0c1v89b000mksfyonew4rue","tag_id":"cj0c1v8ab001sksfygvnh7n94","_id":"cj0c1v8ao0029ksfyb12ui1op"},{"post_id":"cj0c1v89b000mksfyonew4rue","tag_id":"cj0c1v8a0001bksfyzbsa4voy","_id":"cj0c1v8ao002bksfyts20y75q"},{"post_id":"cj0c1v89i000qksfylnweo852","tag_id":"cj0c1v8an0027ksfy9tst2uyy","_id":"cj0c1v8ao002cksfy13qdtpp3"},{"post_id":"cj0c1v89k000rksfyr2w3dp62","tag_id":"cj0c1v8ao002aksfyyjayyh3n","_id":"cj0c1v8ap002eksfyhufw2qjd"},{"post_id":"cj0c1v89p000vksfyk17c457b","tag_id":"cj0c1v8ao002dksfy6b3a80w7","_id":"cj0c1v8ap002gksfyrw34kg6x"},{"post_id":"cj0c1v89p000vksfyk17c457b","tag_id":"cj0c1v8ap002fksfyobqs4ke5","_id":"cj0c1v8aq002hksfy2ugv1dss"}],"Tag":[{"name":"Mac","_id":"cj0c1v88l0004ksfy38tbp82t"},{"name":"进阶","_id":"cj0c1v891000aksfydzye9z7t"},{"name":"Cocoapods","_id":"cj0c1v897000gksfyde7pep92"},{"name":"Hexo","_id":"cj0c1v89p000tksfy34b16al3"},{"name":"Node","_id":"cj0c1v89w0014ksfyrhrf8zfj"},{"name":"JavaScript","_id":"cj0c1v8a0001bksfyzbsa4voy"},{"name":"React Native","_id":"cj0c1v8a6001jksfyp86l4lqq"},{"name":"ReactNative","_id":"cj0c1v8a9001pksfyg4szz69w"},{"name":"React","_id":"cj0c1v8ab001sksfygvnh7n94"},{"name":"Swift","_id":"cj0c1v8an0027ksfy9tst2uyy"},{"name":"iOS","_id":"cj0c1v8ao002aksfyyjayyh3n"},{"name":"随笔","_id":"cj0c1v8ao002dksfy6b3a80w7"},{"name":"Xcode","_id":"cj0c1v8ap002fksfyobqs4ke5"}]}}